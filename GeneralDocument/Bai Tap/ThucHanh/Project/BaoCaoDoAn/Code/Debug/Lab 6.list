
Lab 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f8  0800b4f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4f8  0800b4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b500  0800b500  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b500  0800b500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b504  0800b504  0001b504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005e98  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005f0c  20005f0c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000233a3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005380  00000000  00000000  00043447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  000487c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b8  00000000  00000000  0004a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ccb  00000000  00000000  0004bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000247c4  00000000  00000000  0007383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbcc4  00000000  00000000  00097fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00173cc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072cc  00000000  00000000  00173d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acd0 	.word	0x0800acd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800acd0 	.word	0x0800acd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <CAN_Transmit>:
//{
//
//}

HAL_StatusTypeDef CAN_Transmit(CAN_HandleTypeDef* hcan, uint16_t TxID ,uint8_t* Data, uint8_t DataLen)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	; 0x38
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	607a      	str	r2, [r7, #4]
 800057e:	461a      	mov	r2, r3
 8000580:	460b      	mov	r3, r1
 8000582:	817b      	strh	r3, [r7, #10]
 8000584:	4613      	mov	r3, r2
 8000586:	727b      	strb	r3, [r7, #9]
	CAN_TxHeaderTypeDef Can_Header = {0};
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef Status;
	uint32_t Mailbox = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
	uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f002 fa91 	bl	8002ac6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005a4:	6378      	str	r0, [r7, #52]	; 0x34
	if(FreeLevel == 0) return HAL_ERROR;
 80005a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d101      	bne.n	80005b0 <CAN_Transmit+0x3c>
 80005ac:	2301      	movs	r3, #1
 80005ae:	e010      	b.n	80005d2 <CAN_Transmit+0x5e>

	Can_Header.DLC = DataLen;
 80005b0:	7a7b      	ldrb	r3, [r7, #9]
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_Header.StdId = TxID;
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	61bb      	str	r3, [r7, #24]
	Status = HAL_CAN_AddTxMessage(hcan, &Can_Header,(uint8_t*) Data, &Mailbox);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	f107 0118 	add.w	r1, r7, #24
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f002 f9a4 	bl	8002910 <HAL_CAN_AddTxMessage>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	return Status;
 80005ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3738      	adds	r7, #56	; 0x38
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2201      	movs	r2, #1
 800060c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fb35 	bl	8001cac <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fb66 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800064c:	2306      	movs	r3, #6
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000654:	2302      	movs	r3, #2
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 fc97 	bl	8001f90 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fb56 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000090 	.word	0x20000090
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2f      	ldr	r2, [pc, #188]	; (800075c <HAL_ADC_MspInit+0xdc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d158      	bne.n	8000754 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a26      	ldr	r2, [pc, #152]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481d      	ldr	r0, [pc, #116]	; (8000764 <HAL_ADC_MspInit+0xe4>)
 80006ee:	f003 fa61 	bl	8003bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006f4:	4a1d      	ldr	r2, [pc, #116]	; (800076c <HAL_ADC_MspInit+0xec>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 8000714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 800071c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 8000724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 800072c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000730:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 800073a:	f002 fe39 	bl	80033b0 <HAL_DMA_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000744:	f000 fae8 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40012000 	.word	0x40012000
 8000760:	40023800 	.word	0x40023800
 8000764:	40020000 	.word	0x40020000
 8000768:	200000d8 	.word	0x200000d8
 800076c:	40026410 	.word	0x40026410

08000770 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_CAN1_Init+0x68>)
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <MX_CAN1_Init+0x6c>)
 8000778:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_CAN1_Init+0x68>)
 800077c:	2204      	movs	r2, #4
 800077e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_CAN1_Init+0x68>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_CAN1_Init+0x68>)
 8000788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800078c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_CAN1_Init+0x68>)
 8000790:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000794:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_CAN1_Init+0x68>)
 8000798:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800079c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_CAN1_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_CAN1_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_CAN1_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_CAN1_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_CAN1_Init+0x68>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_CAN1_Init+0x68>)
 80007be:	2200      	movs	r2, #0
 80007c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_CAN1_Init+0x68>)
 80007c4:	f001 fe84 	bl	80024d0 <HAL_CAN_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007ce:	f000 faa3 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000138 	.word	0x20000138
 80007dc:	40006400 	.word	0x40006400

080007e0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_CAN2_Init+0x68>)
 80007e6:	4a19      	ldr	r2, [pc, #100]	; (800084c <MX_CAN2_Init+0x6c>)
 80007e8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_CAN2_Init+0x68>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_CAN2_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_CAN2_Init+0x68>)
 80007f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007fc:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_CAN2_Init+0x68>)
 8000800:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000804:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_CAN2_Init+0x68>)
 8000808:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800080c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_CAN2_Init+0x68>)
 8000810:	2200      	movs	r2, #0
 8000812:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_CAN2_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_CAN2_Init+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_CAN2_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_CAN2_Init+0x68>)
 8000828:	2200      	movs	r2, #0
 800082a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_CAN2_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_CAN2_Init+0x68>)
 8000834:	f001 fe4c 	bl	80024d0 <HAL_CAN_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800083e:	f000 fa6b 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000160 	.word	0x20000160
 800084c:	40006800 	.word	0x40006800

08000850 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a5a      	ldr	r2, [pc, #360]	; (80009d8 <HAL_CAN_MspInit+0x188>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d14e      	bne.n	8000910 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <HAL_CAN_MspInit+0x18c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a58      	ldr	r2, [pc, #352]	; (80009dc <HAL_CAN_MspInit+0x18c>)
 800087a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800087c:	4b57      	ldr	r3, [pc, #348]	; (80009dc <HAL_CAN_MspInit+0x18c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d10d      	bne.n	80008a0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	4b55      	ldr	r3, [pc, #340]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a54      	ldr	r2, [pc, #336]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 800088e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a4d      	ldr	r2, [pc, #308]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008ce:	2309      	movs	r3, #9
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <HAL_CAN_MspInit+0x194>)
 80008da:	f003 f96b 	bl	8003bb4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2107      	movs	r1, #7
 80008e2:	2014      	movs	r0, #20
 80008e4:	f002 fd3a 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008e8:	2014      	movs	r0, #20
 80008ea:	f002 fd53 	bl	8003394 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 7, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2107      	movs	r1, #7
 80008f2:	2015      	movs	r0, #21
 80008f4:	f002 fd32 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80008f8:	2015      	movs	r0, #21
 80008fa:	f002 fd4b 	bl	8003394 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 7, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2107      	movs	r1, #7
 8000902:	2016      	movs	r0, #22
 8000904:	f002 fd2a 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000908:	2016      	movs	r0, #22
 800090a:	f002 fd43 	bl	8003394 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800090e:	e05f      	b.n	80009d0 <HAL_CAN_MspInit+0x180>
  else if(canHandle->Instance==CAN2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a34      	ldr	r2, [pc, #208]	; (80009e8 <HAL_CAN_MspInit+0x198>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d15a      	bne.n	80009d0 <HAL_CAN_MspInit+0x180>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 8000924:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <HAL_CAN_MspInit+0x18c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	4a27      	ldr	r2, [pc, #156]	; (80009dc <HAL_CAN_MspInit+0x18c>)
 800093e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000940:	4b26      	ldr	r3, [pc, #152]	; (80009dc <HAL_CAN_MspInit+0x18c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10d      	bne.n	8000964 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_CAN_MspInit+0x190>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000980:	2360      	movs	r3, #96	; 0x60
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000990:	2309      	movs	r3, #9
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4814      	ldr	r0, [pc, #80]	; (80009ec <HAL_CAN_MspInit+0x19c>)
 800099c:	f003 f90a 	bl	8003bb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 7, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2107      	movs	r1, #7
 80009a4:	2040      	movs	r0, #64	; 0x40
 80009a6:	f002 fcd9 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80009aa:	2040      	movs	r0, #64	; 0x40
 80009ac:	f002 fcf2 	bl	8003394 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 7, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2107      	movs	r1, #7
 80009b4:	2041      	movs	r0, #65	; 0x41
 80009b6:	f002 fcd1 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80009ba:	2041      	movs	r0, #65	; 0x41
 80009bc:	f002 fcea 	bl	8003394 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 7, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2107      	movs	r1, #7
 80009c4:	2042      	movs	r0, #66	; 0x42
 80009c6:	f002 fcc9 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80009ca:	2042      	movs	r0, #66	; 0x42
 80009cc:	f002 fce2 	bl	8003394 <HAL_NVIC_EnableIRQ>
}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40006400 	.word	0x40006400
 80009dc:	20000188 	.word	0x20000188
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40006800 	.word	0x40006800
 80009ec:	40020400 	.word	0x40020400

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_DMA_Init+0x3c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <MX_DMA_Init+0x3c>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_DMA_Init+0x3c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2107      	movs	r1, #7
 8000a16:	2038      	movs	r0, #56	; 0x38
 8000a18:	f002 fca0 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a1c:	2038      	movs	r0, #56	; 0x38
 8000a1e:	f002 fcb9 	bl	8003394 <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	SyncPrintf_Init();
 8000a34:	f000 fbe6 	bl	8001204 <SyncPrintf_Init>
	ECUCanTPStatusFlagHandle = osEventFlagsNew(&ECUCanTPStatusFlag_attributes);
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <MX_FREERTOS_Init+0x44>)
 8000a3a:	f005 fc3a 	bl	80062b2 <osEventFlagsNew>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <MX_FREERTOS_Init+0x48>)
 8000a42:	6013      	str	r3, [r2, #0]
	TesterCanTPStatusFlagHandle = osEventFlagsNew(&TesterCanTPStatusFlag_attributes);
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_FREERTOS_Init+0x4c>)
 8000a46:	f005 fc34 	bl	80062b2 <osEventFlagsNew>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <MX_FREERTOS_Init+0x50>)
 8000a4e:	6013      	str	r3, [r2, #0]
	TesterTaskHandle = osThreadNew(TesterTask_Handler, NULL, &TesterTask_attributes);
 8000a50:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <MX_FREERTOS_Init+0x54>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_FREERTOS_Init+0x58>)
 8000a56:	f005 fb7f 	bl	8006158 <osThreadNew>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <MX_FREERTOS_Init+0x5c>)
 8000a5e:	6013      	str	r3, [r2, #0]

	ECUTaskHandle = osThreadNew(ECUTask_Handler, NULL, &ECUTask_attributes);
 8000a60:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <MX_FREERTOS_Init+0x60>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <MX_FREERTOS_Init+0x64>)
 8000a66:	f005 fb77 	bl	8006158 <osThreadNew>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <MX_FREERTOS_Init+0x68>)
 8000a6e:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	0800b014 	.word	0x0800b014
 8000a78:	20000194 	.word	0x20000194
 8000a7c:	0800b024 	.word	0x0800b024
 8000a80:	20000198 	.word	0x20000198
 8000a84:	0800aff0 	.word	0x0800aff0
 8000a88:	08001b55 	.word	0x08001b55
 8000a8c:	20000190 	.word	0x20000190
 8000a90:	0800afcc 	.word	0x0800afcc
 8000a94:	0800173d 	.word	0x0800173d
 8000a98:	2000018c 	.word	0x2000018c

08000a9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a47      	ldr	r2, [pc, #284]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a40      	ldr	r2, [pc, #256]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a39      	ldr	r2, [pc, #228]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <MX_GPIO_Init+0x13c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED2B2_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2107      	movs	r1, #7
 8000b26:	482d      	ldr	r0, [pc, #180]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000b28:	f003 f9e0 	bl	8003eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Joystick_Mid_Pin|Joystick_A_Pin|Joystick_B_Pin;
 8000b2c:	f242 0390 	movw	r3, #8336	; 0x2090
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4827      	ldr	r0, [pc, #156]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b44:	f003 f836 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4821      	ldr	r0, [pc, #132]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b5e:	f003 f829 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED2B2_Pin;
 8000b62:	2307      	movs	r3, #7
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_GPIO_Init+0x140>)
 8000b7a:	f003 f81b 	bl	8003bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2107      	movs	r1, #7
 8000b82:	2006      	movs	r0, #6
 8000b84:	f002 fbea 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b88:	2006      	movs	r0, #6
 8000b8a:	f002 fc03 	bl	8003394 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2107      	movs	r1, #7
 8000b92:	2007      	movs	r0, #7
 8000b94:	f002 fbe2 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b98:	2007      	movs	r0, #7
 8000b9a:	f002 fbfb 	bl	8003394 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2107      	movs	r1, #7
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f002 fbda 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ba8:	200a      	movs	r0, #10
 8000baa:	f002 fbf3 	bl	8003394 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	2017      	movs	r0, #23
 8000bb4:	f002 fbd2 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bb8:	2017      	movs	r0, #23
 8000bba:	f002 fbeb 	bl	8003394 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	2028      	movs	r0, #40	; 0x28
 8000bc4:	f002 fbca 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bc8:	2028      	movs	r0, #40	; 0x28
 8000bca:	f002 fbe3 	bl	8003394 <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f001 f81c 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f816 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff ff52 	bl	8000a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f7ff fefa 	bl	80009f0 <MX_DMA_Init>
  MX_CAN1_Init();
 8000bfc:	f7ff fdb8 	bl	8000770 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000c00:	f7ff fdee 	bl	80007e0 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000c04:	f000 fa5a 	bl	80010bc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c08:	f7ff fce8 	bl	80005dc <MX_ADC1_Init>
  MX_RNG_Init();
 8000c0c:	f000 f88a 	bl	8000d24 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c10:	f005 fa58 	bl	80060c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c14:	f7ff ff0c 	bl	8000a30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c18:	f005 fa78 	bl	800610c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <main+0x34>
	...

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	; 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f009 fb60 	bl	800a2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemClock_Config+0xcc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c90:	2304      	movs	r3, #4
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c94:	23a8      	movs	r3, #168	; 0xa8
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 f953 	bl	8003f50 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cb0:	f000 f832 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fbb4 	bl	8004440 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cde:	f000 f81b 	bl	8000d18 <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	; 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d06:	f000 ffb1 	bl	8001c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40001000 	.word	0x40001000

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_RNG_Init+0x20>)
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <MX_RNG_Init+0x24>)
 8000d2c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_RNG_Init+0x20>)
 8000d30:	f003 fdd8 	bl	80048e4 <HAL_RNG_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000d3a:	f7ff ffed 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000019c 	.word	0x2000019c
 8000d48:	50060800 	.word	0x50060800

08000d4c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_RNG_MspInit+0x48>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d115      	bne.n	8000d8a <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_RNG_MspInit+0x4c>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <HAL_RNG_MspInit+0x4c>)
 8000d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_RNG_MspInit+0x4c>)
 8000d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 7, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	2050      	movs	r0, #80	; 0x50
 8000d80:	f002 faec 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000d84:	2050      	movs	r0, #80	; 0x50
 8000d86:	f002 fb05 	bl	8003394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	50060800 	.word	0x50060800
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_MspInit+0x54>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <HAL_MspInit+0x54>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x54>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_MspInit+0x54>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_MspInit+0x54>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x54>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	210f      	movs	r1, #15
 8000dde:	f06f 0001 	mvn.w	r0, #1
 8000de2:	f002 fabb 	bl	800335c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <HAL_InitTick+0xe4>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_InitTick+0xe4>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_InitTick+0xe4>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e20:	f107 0210 	add.w	r2, r7, #16
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fd28 	bl	8004880 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e3a:	f003 fcf9 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8000e3e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e40:	e004      	b.n	8000e4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e42:	f003 fcf5 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8000e46:	4603      	mov	r3, r0
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <HAL_InitTick+0xe8>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	0c9b      	lsrs	r3, r3, #18
 8000e56:	3b01      	subs	r3, #1
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e5c:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <HAL_InitTick+0xf0>)
 8000e5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e82:	f003 fe1a 	bl	8004aba <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d11b      	bne.n	8000ecc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <HAL_InitTick+0xec>)
 8000e96:	f003 fe69 	bl	8004b6c <HAL_TIM_Base_Start_IT>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d111      	bne.n	8000ecc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ea8:	2036      	movs	r0, #54	; 0x36
 8000eaa:	f002 fa73 	bl	8003394 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d808      	bhi.n	8000ec6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	2036      	movs	r0, #54	; 0x36
 8000eba:	f002 fa4f 	bl	800335c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_InitTick+0xf4>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e002      	b.n	8000ecc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	431bde83 	.word	0x431bde83
 8000ee0:	200001ac 	.word	0x200001ac
 8000ee4:	40001000 	.word	0x40001000
 8000ee8:	20000004 	.word	0x20000004

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN0_Pin);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f002 ffff 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f002 fff8 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joystick_A_Pin);
 8000f38:	2010      	movs	r0, #16
 8000f3a:	f002 fff1 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <CAN1_RX0_IRQHandler+0x10>)
 8000f4a:	f001 ff29 	bl	8002da0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000138 	.word	0x20000138

08000f58 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <CAN1_RX1_IRQHandler+0x10>)
 8000f5e:	f001 ff1f 	bl	8002da0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000138 	.word	0x20000138

08000f6c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <CAN1_SCE_IRQHandler+0x10>)
 8000f72:	f001 ff15 	bl	8002da0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000138 	.word	0x20000138

08000f80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joystick_B_Pin);
 8000f84:	2080      	movs	r0, #128	; 0x80
 8000f86:	f002 ffcb 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <USART3_IRQHandler+0x10>)
 8000f96:	f004 f91d 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001f8 	.word	0x200001f8

08000fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joystick_Mid_Pin);
 8000fa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fac:	f002 ffb8 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM6_DAC_IRQHandler+0x10>)
 8000fba:	f003 fe47 	bl	8004c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001ac 	.word	0x200001ac

08000fc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA2_Stream0_IRQHandler+0x10>)
 8000fce:	f002 fb87 	bl	80036e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000d8 	.word	0x200000d8

08000fdc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <CAN2_RX0_IRQHandler+0x10>)
 8000fe2:	f001 fedd 	bl	8002da0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000160 	.word	0x20000160

08000ff0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <CAN2_RX1_IRQHandler+0x10>)
 8000ff6:	f001 fed3 	bl	8002da0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000160 	.word	0x20000160

08001004 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <CAN2_SCE_IRQHandler+0x10>)
 800100a:	f001 fec9 	bl	8002da0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000160 	.word	0x20000160

08001018 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <HASH_RNG_IRQHandler+0x10>)
 800101e:	f003 fce1 	bl	80049e4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000019c 	.word	0x2000019c

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f009 f910 	bl	800a280 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20020000 	.word	0x20020000
 800108c:	00000400 	.word	0x00000400
 8001090:	200001f4 	.word	0x200001f4
 8001094:	20005f10 	.word	0x20005f10

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART3_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010f4:	f003 ff8e 	bl	8005014 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f7ff fe0b 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200001f8 	.word	0x200001f8
 800110c:	40004800 	.word	0x40004800

08001110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_UART_MspInit+0x94>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d134      	bne.n	800119c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_UART_MspInit+0x98>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <HAL_UART_MspInit+0x98>)
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_UART_MspInit+0x98>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_UART_MspInit+0x98>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_UART_MspInit+0x98>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_UART_MspInit+0x98>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800116a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800117c:	2307      	movs	r3, #7
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <HAL_UART_MspInit+0x9c>)
 8001188:	f002 fd14 	bl	8003bb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2107      	movs	r1, #7
 8001190:	2027      	movs	r0, #39	; 0x27
 8001192:	f002 f8e3 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001196:	2027      	movs	r0, #39	; 0x27
 8001198:	f002 f8fc 	bl	8003394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40004800 	.word	0x40004800
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b6:	490e      	ldr	r1, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011cc:	4c0b      	ldr	r4, [pc, #44]	; (80011fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011da:	f7ff ff5d 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011de:	f009 f855 	bl	800a28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fd01 	bl	8000be8 <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011f4:	0800b508 	.word	0x0800b508
  ldr r2, =_sbss
 80011f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011fc:	20005f0c 	.word	0x20005f0c

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <SyncPrintf_Init+0x14>)
 800120a:	f005 f93b 	bl	8006484 <osMutexNew>
 800120e:	4603      	mov	r3, r0
 8001210:	4a02      	ldr	r2, [pc, #8]	; (800121c <SyncPrintf_Init+0x18>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800b04c 	.word	0x0800b04c
 800121c:	2000023c 	.word	0x2000023c

08001220 <SyncPrintf>:

int	SyncPrintf (const char *__restrict format, ...)
{
 8001220:	b40f      	push	{r0, r1, r2, r3}
 8001222:	b580      	push	{r7, lr}
 8001224:	b09c      	sub	sp, #112	; 0x70
 8001226:	af00      	add	r7, sp, #0
	osMutexAcquire(PrintfMutex, osWaitForever);
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <SyncPrintf+0x7c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	4618      	mov	r0, r3
 8001232:	f005 f9ad 	bl	8006590 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2260      	movs	r2, #96	; 0x60
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f009 f856 	bl	800a2f4 <memset>
	size_t size=sizeof(Buffer);
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	603b      	str	r3, [r7, #0]
	va_start(arg,format);
 800124c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001250:	66bb      	str	r3, [r7, #104]	; 0x68
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 8001252:	4639      	mov	r1, r7
 8001254:	1d38      	adds	r0, r7, #4
 8001256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800125a:	f009 f991 	bl	800a580 <vasniprintf>
 800125e:	66f8      	str	r0, [r7, #108]	; 0x6c
	va_end(arg);
	if(Output != NULL)
 8001260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00d      	beq.n	8001282 <SyncPrintf+0x62>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b29a      	uxth	r2, r3
 800126a:	230a      	movs	r3, #10
 800126c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800126e:	480c      	ldr	r0, [pc, #48]	; (80012a0 <SyncPrintf+0x80>)
 8001270:	f003 ff1d 	bl	80050ae <HAL_UART_Transmit>

		if(Output != Buffer)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001278:	429a      	cmp	r2, r3
 800127a:	d002      	beq.n	8001282 <SyncPrintf+0x62>
		{

			vPortFree(Output);
 800127c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800127e:	f008 fb57 	bl	8009930 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <SyncPrintf+0x7c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f005 f9cd 	bl	8006626 <osMutexRelease>

	return size;
 800128c:	683b      	ldr	r3, [r7, #0]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3770      	adds	r7, #112	; 0x70
 8001292:	46bd      	mov	sp, r7
 8001294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001298:	b004      	add	sp, #16
 800129a:	4770      	bx	lr
 800129c:	2000023c 	.word	0x2000023c
 80012a0:	200001f8 	.word	0x200001f8

080012a4 <ECU_Init>:

CanTP_HandleTypedef ECUCanTP ={0};

uint16_t ADCVal[1]={0};
HAL_StatusTypeDef ECU_Init()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	ECUCanTP.CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 80012a8:	4b20      	ldr	r3, [pc, #128]	; (800132c <ECU_Init+0x88>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
	ECUCanTP.CanFilter.FilterIdHigh = ECU_RxID << 5;
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <ECU_Init+0x88>)
 80012b0:	f24f 4240 	movw	r2, #62528	; 0xf440
 80012b4:	609a      	str	r2, [r3, #8]
	ECUCanTP.CanFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <ECU_Init+0x88>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	621a      	str	r2, [r3, #32]
	ECUCanTP.CanFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <ECU_Init+0x88>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
	ECUCanTP.CanFilter.FilterBank = ECU_CANFilterBank;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <ECU_Init+0x88>)
 80012c4:	220a      	movs	r2, #10
 80012c6:	61da      	str	r2, [r3, #28]
	ECUCanTP.CanFilter.FilterFIFOAssignment = ECU_CANRxFifo;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <ECU_Init+0x88>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
	ECUCanTP.CanFilter.SlaveStartFilterBank = 15;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <ECU_Init+0x88>)
 80012d0:	220f      	movs	r2, #15
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
//	ECUCanTP.CanRxFifo = ECU_CANRxFifo;
	ECUCanTP.hcan = &ECU_HCAN;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <ECU_Init+0x88>)
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <ECU_Init+0x8c>)
 80012d8:	605a      	str	r2, [r3, #4]
	ECUCanTP.Status = ECUCanTPStatusFlagHandle;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <ECU_Init+0x90>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <ECU_Init+0x88>)
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
	ECUCanTP.CanRxID = ECU_RxID;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <ECU_Init+0x88>)
 80012e4:	f240 72a2 	movw	r2, #1954	; 0x7a2
 80012e8:	805a      	strh	r2, [r3, #2]
	ECUCanTP.CanTxID = ECU_TxID;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <ECU_Init+0x88>)
 80012ec:	f240 7212 	movw	r2, #1810	; 0x712
 80012f0:	801a      	strh	r2, [r3, #0]
	HAL_CheckERR(CanTP_Init(&ECUCanTP));
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <ECU_Init+0x88>)
 80012f4:	f008 fe66 	bl	8009fc4 <CanTP_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <ECU_Init+0x64>
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <ECU_Init+0x88>)
 8001300:	f008 fe60 	bl	8009fc4 <CanTP_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	e00f      	b.n	8001328 <ECU_Init+0x84>
	HAL_CheckERR(HAL_ADC_Start_DMA(&ECU_HADC, (uint32_t*)ADCVal, 1));
 8001308:	2201      	movs	r2, #1
 800130a:	490b      	ldr	r1, [pc, #44]	; (8001338 <ECU_Init+0x94>)
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <ECU_Init+0x98>)
 800130e:	f000 fd11 	bl	8001d34 <HAL_ADC_Start_DMA>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <ECU_Init+0x82>
 8001318:	2201      	movs	r2, #1
 800131a:	4907      	ldr	r1, [pc, #28]	; (8001338 <ECU_Init+0x94>)
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <ECU_Init+0x98>)
 800131e:	f000 fd09 	bl	8001d34 <HAL_ADC_Start_DMA>
 8001322:	4603      	mov	r3, r0
 8001324:	e000      	b.n	8001328 <ECU_Init+0x84>
	return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000240 	.word	0x20000240
 8001330:	20000138 	.word	0x20000138
 8001334:	20000194 	.word	0x20000194
 8001338:	20000280 	.word	0x20000280
 800133c:	20000090 	.word	0x20000090

08001340 <ECU_Response_Analog>:

static HAL_StatusTypeDef ECU_Response_Analog()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
	uint8_t Data[5];
	uint16_t Value = ADCVal[0];
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <ECU_Response_Analog+0x70>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	81fb      	strh	r3, [r7, #14]
	Data[0] = 0x62;
 800134c:	2362      	movs	r3, #98	; 0x62
 800134e:	723b      	strb	r3, [r7, #8]
	Data[1] = ECU_AnalogRead_DID >>8;
 8001350:	23e0      	movs	r3, #224	; 0xe0
 8001352:	727b      	strb	r3, [r7, #9]
	Data[2] = ECU_AnalogRead_DID & 0xff;
 8001354:	2315      	movs	r3, #21
 8001356:	72bb      	strb	r3, [r7, #10]
	Data[3] = Value >> 8;
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29b      	uxth	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	72fb      	strb	r3, [r7, #11]
	Data[4] = Value & 0xff;
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	733b      	strb	r3, [r7, #12]
	CanTP_Packet DataPacket = {
 8001368:	2305      	movs	r3, #5
 800136a:	803b      	strh	r3, [r7, #0]
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	607b      	str	r3, [r7, #4]
			.Data = Data,
			.Len = 5
	};
	SyncPrintf("ECU Read Value %d \r\n", Value);
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	4619      	mov	r1, r3
 8001376:	480f      	ldr	r0, [pc, #60]	; (80013b4 <ECU_Response_Analog+0x74>)
 8001378:	f7ff ff52 	bl	8001220 <SyncPrintf>
	osDelay(5);
 800137c:	2005      	movs	r0, #5
 800137e:	f004 ff7d 	bl	800627c <osDelay>
	HAL_CheckERR(CanTP_Transmit(&ECUCanTP, DataPacket));
 8001382:	463b      	mov	r3, r7
 8001384:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <ECU_Response_Analog+0x78>)
 800138a:	f008 fe75 	bl	800a078 <CanTP_Transmit>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d007      	beq.n	80013a4 <ECU_Response_Analog+0x64>
 8001394:	463b      	mov	r3, r7
 8001396:	e893 0006 	ldmia.w	r3, {r1, r2}
 800139a:	4807      	ldr	r0, [pc, #28]	; (80013b8 <ECU_Response_Analog+0x78>)
 800139c:	f008 fe6c 	bl	800a078 <CanTP_Transmit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	e000      	b.n	80013a6 <ECU_Response_Analog+0x66>
	return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000280 	.word	0x20000280
 80013b4:	0800ad34 	.word	0x0800ad34
 80013b8:	20000240 	.word	0x20000240

080013bc <ECU_ReadData_Service>:


static HAL_StatusTypeDef ECU_ReadData_Service(uint8_t* Buffer, uint8_t Len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
	uint16_t DID = Buffer[0]<<8 | Buffer[1];	// Because of the maximum number of DID is limited to 1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	81fb      	strh	r3, [r7, #14]
	if(DID == ECU_AnalogRead_DID)
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	f24e 0215 	movw	r2, #57365	; 0xe015
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <ECU_ReadData_Service+0x30>
	{
		ECU_Response_Analog();
 80013e8:	f7ff ffaa 	bl	8001340 <ECU_Response_Analog>
	};

	return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <ECU_WriteData_Service>:

static HAL_StatusTypeDef ECU_WriteData_Service(uint8_t* Buffer, uint8_t Len)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
	uint8_t DID = Buffer[0] << 8 | Buffer[1];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b25a      	sxtb	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	75fb      	strb	r3, [r7, #23]
				.Data = ResponseBuffer,
				.Len = sizeof(ResponseBuffer)
		};
		HAL_CheckERR(CanTP_Transmit(&ECUCanTP, RespPacket));
	}
	return HAL_OK;
 8001418:	2300      	movs	r3, #0
};
 800141a:	4618      	mov	r0, r3
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <ECU_SecurityUnlock>:


static HAL_StatusTypeDef ECU_SecurityUnlock()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	SyncPrintf("ECU: Security Unlock \r\n");
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <ECU_SecurityUnlock+0x1c>)
 800142e:	f7ff fef7 	bl	8001220 <SyncPrintf>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2101      	movs	r1, #1
 8001436:	4804      	ldr	r0, [pc, #16]	; (8001448 <ECU_SecurityUnlock+0x20>)
 8001438:	f002 fd58 	bl	8003eec <HAL_GPIO_WritePin>

	return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800ad4c 	.word	0x0800ad4c
 8001448:	40020400 	.word	0x40020400

0800144c <ECU_SecurityLock>:
static HAL_StatusTypeDef ECU_SecurityLock()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	SyncPrintf("ECU: Security Lock \r\n");
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <ECU_SecurityLock+0x1c>)
 8001452:	f7ff fee5 	bl	8001220 <SyncPrintf>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2101      	movs	r1, #1
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <ECU_SecurityLock+0x20>)
 800145c:	f002 fd46 	bl	8003eec <HAL_GPIO_WritePin>
	return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800ad64 	.word	0x0800ad64
 800146c:	40020400 	.word	0x40020400

08001470 <ECU_SecurityAccess_RespSeed>:


static HAL_StatusTypeDef ECU_SecurityAccess_RespSeed(uint8_t SubFunctionID, uint32_t SecuritySeed)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	2300      	movs	r3, #0
 8001482:	83bb      	strh	r3, [r7, #28]
	Buffer[0] = ECU_SecurityAccess_RespSID;
 8001484:	2367      	movs	r3, #103	; 0x67
 8001486:	763b      	strb	r3, [r7, #24]
	Buffer[1] = SubFunctionID;
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	767b      	strb	r3, [r7, #25]
	uint32_t Seed_BE = __htonl(SecuritySeed);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	ba1b      	rev	r3, r3
 8001490:	617b      	str	r3, [r7, #20]
	memcpy(Buffer+2, &Seed_BE, 4);
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	3302      	adds	r3, #2
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]
	CanTP_Packet RespPacket = {
 800149c:	2306      	movs	r3, #6
 800149e:	81bb      	strh	r3, [r7, #12]
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	613b      	str	r3, [r7, #16]
			.Data = Buffer,
			.Len  = sizeof(Buffer)
	};
	osDelay(10);
 80014a6:	200a      	movs	r0, #10
 80014a8:	f004 fee8 	bl	800627c <osDelay>
	HAL_CheckERR(CanTP_Transmit(&ECUCanTP, RespPacket));
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <ECU_SecurityAccess_RespSeed+0x6c>)
 80014b6:	f008 fddf 	bl	800a078 <CanTP_Transmit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <ECU_SecurityAccess_RespSeed+0x62>
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <ECU_SecurityAccess_RespSeed+0x6c>)
 80014ca:	f008 fdd5 	bl	800a078 <CanTP_Transmit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	e000      	b.n	80014d4 <ECU_SecurityAccess_RespSeed+0x64>
	return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000240 	.word	0x20000240

080014e0 <ECU_SecurityAccess_RespKey>:

static HAL_StatusTypeDef ECU_SecurityAccess_RespKey(uint8_t SubFunctionID)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2] = {ECU_SecurityAccess_RespSID, SubFunctionID};
 80014ea:	2367      	movs	r3, #103	; 0x67
 80014ec:	753b      	strb	r3, [r7, #20]
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	757b      	strb	r3, [r7, #21]
	CanTP_Packet RespPacket = {
 80014f2:	2302      	movs	r3, #2
 80014f4:	81bb      	strh	r3, [r7, #12]
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	613b      	str	r3, [r7, #16]
			.Data = Buffer,
			.Len = 2
	};
	osDelay(10);
 80014fc:	200a      	movs	r0, #10
 80014fe:	f004 febd 	bl	800627c <osDelay>
	HAL_CheckERR(CanTP_Transmit(&ECUCanTP, RespPacket));
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	e893 0006 	ldmia.w	r3, {r1, r2}
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <ECU_SecurityAccess_RespKey+0x54>)
 800150c:	f008 fdb4 	bl	800a078 <CanTP_Transmit>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <ECU_SecurityAccess_RespKey+0x48>
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <ECU_SecurityAccess_RespKey+0x54>)
 8001520:	f008 fdaa 	bl	800a078 <CanTP_Transmit>
 8001524:	4603      	mov	r3, r0
 8001526:	e000      	b.n	800152a <ECU_SecurityAccess_RespKey+0x4a>
	return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000240 	.word	0x20000240

08001538 <ECU_SecurityAccess_CheckKey>:

static HAL_StatusTypeDef ECU_SecurityAccess_CheckKey(uint32_t ExpectedKey, uint32_t Timeout)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	CanTP_Packet RcvPacket ={0};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
	HAL_CheckERR(CanTP_Receive(&ECUCanTP, &RcvPacket, Timeout));
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	481e      	ldr	r0, [pc, #120]	; (80015d0 <ECU_SecurityAccess_CheckKey+0x98>)
 8001556:	f008 fdc1 	bl	800a0dc <CanTP_Receive>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <ECU_SecurityAccess_CheckKey+0x3a>
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <ECU_SecurityAccess_CheckKey+0x98>)
 800156a:	f008 fdb7 	bl	800a0dc <CanTP_Receive>
 800156e:	4603      	mov	r3, r0
 8001570:	e029      	b.n	80015c6 <ECU_SecurityAccess_CheckKey+0x8e>
	uint8_t SID = RcvPacket.Data[0];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	77fb      	strb	r3, [r7, #31]
	uint8_t SubFunctID = RcvPacket.Data[1];
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	77bb      	strb	r3, [r7, #30]
	uint32_t RcvKey_BE, RcvKey;

	memcpy(&RcvKey_BE, RcvPacket.Data + 2, 4);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3302      	adds	r3, #2
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
	vPortFree(RcvPacket.Data);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4618      	mov	r0, r3
 800158a:	f008 f9d1 	bl	8009930 <vPortFree>

	if(SID != ECU_SecurityAccess_SID) return HAL_ERROR;
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b27      	cmp	r3, #39	; 0x27
 8001592:	d001      	beq.n	8001598 <ECU_SecurityAccess_CheckKey+0x60>
 8001594:	2301      	movs	r3, #1
 8001596:	e016      	b.n	80015c6 <ECU_SecurityAccess_CheckKey+0x8e>
	if(SubFunctID == 0x02)
 8001598:	7fbb      	ldrb	r3, [r7, #30]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d110      	bne.n	80015c0 <ECU_SecurityAccess_CheckKey+0x88>
	{
		RcvKey = __ntohl(RcvKey_BE);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	ba1b      	rev	r3, r3
 80015a2:	61bb      	str	r3, [r7, #24]
		if(RcvKey == ExpectedKey)
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d106      	bne.n	80015ba <ECU_SecurityAccess_CheckKey+0x82>
		{
			ECU_SecurityUnlock();
 80015ac:	f7ff ff3c 	bl	8001428 <ECU_SecurityUnlock>
			ECU_SecurityAccess_RespKey(SubFunctID);
 80015b0:	7fbb      	ldrb	r3, [r7, #30]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff94 	bl	80014e0 <ECU_SecurityAccess_RespKey>
 80015b8:	e004      	b.n	80015c4 <ECU_SecurityAccess_CheckKey+0x8c>
		}
		else
		{
			ECU_SecurityLock();
 80015ba:	f7ff ff47 	bl	800144c <ECU_SecurityLock>
 80015be:	e001      	b.n	80015c4 <ECU_SecurityAccess_CheckKey+0x8c>
		}
	}
	else
	{
		return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <ECU_SecurityAccess_CheckKey+0x8e>
	}
	return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000240 	.word	0x20000240

080015d4 <ECU_SecurityAccess_Service>:


static HAL_StatusTypeDef ECU_SecurityAccess_Service(uint8_t* Data, uint8_t DataLen)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
	uint32_t SeedValue;
	uint8_t SubFuncID = Data[0];
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef Status;
	if(SubFuncID == 0x01)
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d12d      	bne.n	8001648 <ECU_SecurityAccess_Service+0x74>
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &SeedValue);
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4619      	mov	r1, r3
 80015f2:	4818      	ldr	r0, [pc, #96]	; (8001654 <ECU_SecurityAccess_Service+0x80>)
 80015f4:	f003 f9a0 	bl	8004938 <HAL_RNG_GenerateRandomNumber>
		SyncPrintf("ECU: Generate Seed %ld \r\n", SeedValue);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4816      	ldr	r0, [pc, #88]	; (8001658 <ECU_SecurityAccess_Service+0x84>)
 80015fe:	f7ff fe0f 	bl	8001220 <SyncPrintf>
		HAL_CheckERR(ECU_SecurityAccess_RespSeed(SubFuncID, SeedValue));
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff31 	bl	8001470 <ECU_SecurityAccess_RespSeed>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <ECU_SecurityAccess_Service+0x50>
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff28 	bl	8001470 <ECU_SecurityAccess_RespSeed>
 8001620:	4603      	mov	r3, r0
 8001622:	e012      	b.n	800164a <ECU_SecurityAccess_Service+0x76>
		uint32_t ExpectedKey = Key_Calculate(SeedValue);
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f8f2 	bl	8001810 <Key_Calculate>
 800162c:	6138      	str	r0, [r7, #16]
		SyncPrintf("ECU: Expected Key %ld \r\n", ExpectedKey);
 800162e:	6939      	ldr	r1, [r7, #16]
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <ECU_SecurityAccess_Service+0x88>)
 8001632:	f7ff fdf5 	bl	8001220 <SyncPrintf>
		Status = ECU_SecurityAccess_CheckKey(ExpectedKey, 500);
 8001636:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800163a:	6938      	ldr	r0, [r7, #16]
 800163c:	f7ff ff7c 	bl	8001538 <ECU_SecurityAccess_CheckKey>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
		return Status;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	e000      	b.n	800164a <ECU_SecurityAccess_Service+0x76>
	}
	return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000019c 	.word	0x2000019c
 8001658:	0800ad7c 	.word	0x0800ad7c
 800165c:	0800ad98 	.word	0x0800ad98

08001660 <ECU_Loop>:
HAL_StatusTypeDef ECU_Loop()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
	CanTP_Packet DataPacket ={0};
 8001666:	463b      	mov	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
	HAL_StatusTypeDef Status = CanTP_Receive(&ECUCanTP, &DataPacket, osWaitForever);
 800166e:	463b      	mov	r3, r7
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	4619      	mov	r1, r3
 8001676:	482c      	ldr	r0, [pc, #176]	; (8001728 <ECU_Loop+0xc8>)
 8001678:	f008 fd30 	bl	800a0dc <CanTP_Receive>
 800167c:	4603      	mov	r3, r0
 800167e:	72fb      	strb	r3, [r7, #11]
	SyncPrintf("ECU: RcvData ");
 8001680:	482a      	ldr	r0, [pc, #168]	; (800172c <ECU_Loop+0xcc>)
 8001682:	f7ff fdcd 	bl	8001220 <SyncPrintf>
	for(int i = 0; i <DataPacket.Len; ++i)
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e00a      	b.n	80016a2 <ECU_Loop+0x42>
	{
		SyncPrintf("0x%.2x ", DataPacket.Data[i]);
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	4826      	ldr	r0, [pc, #152]	; (8001730 <ECU_Loop+0xd0>)
 8001698:	f7ff fdc2 	bl	8001220 <SyncPrintf>
	for(int i = 0; i <DataPacket.Len; ++i)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	883b      	ldrh	r3, [r7, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	dbef      	blt.n	800168c <ECU_Loop+0x2c>
	}
	SyncPrintf("\r\n");
 80016ac:	4821      	ldr	r0, [pc, #132]	; (8001734 <ECU_Loop+0xd4>)
 80016ae:	f7ff fdb7 	bl	8001220 <SyncPrintf>

	if(Status == HAL_OK)
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d132      	bne.n	800171e <ECU_Loop+0xbe>
	{
		uint8_t SID = DataPacket.Data[0];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	72bb      	strb	r3, [r7, #10]
		if(SID == ECU_ReadData_ByID_SID)
 80016be:	7abb      	ldrb	r3, [r7, #10]
 80016c0:	2b22      	cmp	r3, #34	; 0x22
 80016c2:	d10a      	bne.n	80016da <ECU_Loop+0x7a>
		{
			ECU_ReadData_Service(DataPacket.Data + 1, DataPacket.Len - 1); // Remove First Byte SID
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	883b      	ldrh	r3, [r7, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fe72 	bl	80013bc <ECU_ReadData_Service>
 80016d8:	e01d      	b.n	8001716 <ECU_Loop+0xb6>
		}
		else if(SID == ECU_WriteData_ByID_SID)
 80016da:	7abb      	ldrb	r3, [r7, #10]
 80016dc:	2b2e      	cmp	r3, #46	; 0x2e
 80016de:	d10a      	bne.n	80016f6 <ECU_Loop+0x96>
		{
			ECU_WriteData_Service(DataPacket.Data + 1, DataPacket.Len - 1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	883b      	ldrh	r3, [r7, #0]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f7ff fe81 	bl	80013f6 <ECU_WriteData_Service>
 80016f4:	e00f      	b.n	8001716 <ECU_Loop+0xb6>
		}
		else if(SID == ECU_SecurityAccess_SID)
 80016f6:	7abb      	ldrb	r3, [r7, #10]
 80016f8:	2b27      	cmp	r3, #39	; 0x27
 80016fa:	d10c      	bne.n	8001716 <ECU_Loop+0xb6>
		{
			SyncPrintf("ECU: Security Access \r\n");
 80016fc:	480e      	ldr	r0, [pc, #56]	; (8001738 <ECU_Loop+0xd8>)
 80016fe:	f7ff fd8f 	bl	8001220 <SyncPrintf>
			ECU_SecurityAccess_Service(DataPacket.Data + 1, DataPacket.Len - 1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	883b      	ldrh	r3, [r7, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff ff5f 	bl	80015d4 <ECU_SecurityAccess_Service>

		}
		vPortFree(DataPacket.Data);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f008 f909 	bl	8009930 <vPortFree>
	}

	return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000240 	.word	0x20000240
 800172c:	0800adb4 	.word	0x0800adb4
 8001730:	0800adc4 	.word	0x0800adc4
 8001734:	0800adcc 	.word	0x0800adcc
 8001738:	0800add0 	.word	0x0800add0

0800173c <ECUTask_Handler>:


void ECUTask_Handler(void *argument)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status;
	Status = ECU_Init();
 8001744:	f7ff fdae 	bl	80012a4 <ECU_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
	SyncPrintf("ECU Init State %ld\r\n", (uint32_t) Status);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <ECUTask_Handler+0x2c>)
 8001752:	f7ff fd65 	bl	8001220 <SyncPrintf>
	uint32_t RNG_Number;
	HAL_RNG_GenerateRandomNumber(&hrng, &RNG_Number);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4619      	mov	r1, r3
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <ECUTask_Handler+0x30>)
 800175e:	f003 f8eb 	bl	8004938 <HAL_RNG_GenerateRandomNumber>

	while(1)
	{
		ECU_Loop();
 8001762:	f7ff ff7d 	bl	8001660 <ECU_Loop>
 8001766:	e7fc      	b.n	8001762 <ECUTask_Handler+0x26>
 8001768:	0800ade8 	.word	0x0800ade8
 800176c:	2000019c 	.word	0x2000019c

08001770 <HAL_CAN_RxFifo0MsgPendingCallback>:
//		osDelay(500);
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == ECU_HCAN.Instance)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d114      	bne.n	80017ae <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	{
		CAN_RxHeaderTypeDef RcvHeader;
		uint8_t RcvData[8];
		HAL_CAN_GetRxMessage(hcan, ECU_CANRxFifo, &RcvHeader, RcvData);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	f107 0214 	add.w	r2, r7, #20
 800178c:	2100      	movs	r1, #0
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f001 f9ce 	bl	8002b30 <HAL_CAN_GetRxMessage>
		if(RcvHeader.StdId == ECUCanTP.CanRxID)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001798:	8852      	ldrh	r2, [r2, #2]
 800179a:	4293      	cmp	r3, r2
 800179c:	d107      	bne.n	80017ae <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
		{
			CanTP_RcvCBHandler(&ECUCanTP, RcvData, RcvHeader.DLC);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4619      	mov	r1, r3
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80017aa:	f008 f9fd 	bl	8009ba8 <CanTP_RcvCBHandler>
		}
	}

}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	; 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000138 	.word	0x20000138
 80017bc:	20000240 	.word	0x20000240

080017c0 <xcrc32>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

unsigned int xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  unsigned int crc = init;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	617b      	str	r3, [r7, #20]
  while (len--)
 80017d0:	e00f      	b.n	80017f2 <xcrc32+0x32>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	021a      	lsls	r2, r3, #8
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	0e1b      	lsrs	r3, r3, #24
 80017da:	68f9      	ldr	r1, [r7, #12]
 80017dc:	7809      	ldrb	r1, [r1, #0]
 80017de:	404b      	eors	r3, r1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	490a      	ldr	r1, [pc, #40]	; (800180c <xcrc32+0x4c>)
 80017e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017e8:	4053      	eors	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
      buf++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
  while (len--)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ea      	bne.n	80017d2 <xcrc32+0x12>
    }
  return crc;
 80017fc:	697b      	ldr	r3, [r7, #20]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	0800b05c 	.word	0x0800b05c

08001810 <Key_Calculate>:

uint32_t Key_Calculate(uint32_t Seed)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	return xcrc32((uint8_t *)&Seed, 4, 0xffffffff);
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	f04f 32ff 	mov.w	r2, #4294967295
 800181e:	2104      	movs	r1, #4
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ffcd 	bl	80017c0 <xcrc32>
 8001826:	4603      	mov	r3, r0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <Tester_Init>:
uint8_t Joystick_Pressed = 0;
uint8_t BTN0_IsPress = 0;
uint8_t BTN1_IsPress = 0;

HAL_StatusTypeDef Tester_Init()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	TesterCanTP.CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <Tester_Init+0x5c>)
 8001836:	2201      	movs	r2, #1
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
	TesterCanTP.CanFilter.FilterIdHigh = Tester_RxID << 5;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <Tester_Init+0x5c>)
 800183c:	f24e 2240 	movw	r2, #57920	; 0xe240
 8001840:	609a      	str	r2, [r3, #8]
	TesterCanTP.CanFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <Tester_Init+0x5c>)
 8001844:	2201      	movs	r2, #1
 8001846:	621a      	str	r2, [r3, #32]
	TesterCanTP.CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <Tester_Init+0x5c>)
 800184a:	2201      	movs	r2, #1
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
	TesterCanTP.CanFilter.FilterBank = Tester_CANFilterBank;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <Tester_Init+0x5c>)
 8001850:	2205      	movs	r2, #5
 8001852:	61da      	str	r2, [r3, #28]
	TesterCanTP.CanFilter.FilterFIFOAssignment = Tester_CANRxFifo;
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <Tester_Init+0x5c>)
 8001856:	2201      	movs	r2, #1
 8001858:	619a      	str	r2, [r3, #24]
	TesterCanTP.CanFilter.SlaveStartFilterBank = 0;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <Tester_Init+0x5c>)
 800185c:	2200      	movs	r2, #0
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
	TesterCanTP.hcan = &Tester_HCAN;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <Tester_Init+0x5c>)
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <Tester_Init+0x60>)
 8001864:	605a      	str	r2, [r3, #4]
	TesterCanTP.Status = TesterCanTPStatusFlagHandle;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <Tester_Init+0x64>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <Tester_Init+0x5c>)
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
	TesterCanTP.CanRxID = Tester_RxID;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <Tester_Init+0x5c>)
 8001870:	f240 7212 	movw	r2, #1810	; 0x712
 8001874:	805a      	strh	r2, [r3, #2]
	TesterCanTP.CanTxID = Tester_TxID;
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <Tester_Init+0x5c>)
 8001878:	f240 72a2 	movw	r2, #1954	; 0x7a2
 800187c:	801a      	strh	r2, [r3, #0]
//	osDelay(10);
	CanTP_Init(&TesterCanTP);
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <Tester_Init+0x5c>)
 8001880:	f008 fba0 	bl	8009fc4 <CanTP_Init>
	return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000284 	.word	0x20000284
 8001890:	20000160 	.word	0x20000160
 8001894:	20000198 	.word	0x20000198

08001898 <Tester_SecurityAccess_RequestSeed>:
	return HAL_OK;
};


static HAL_StatusTypeDef Tester_SecurityAccess_RequestSeed(uint32_t* Seed)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	uint8_t Buffer[] = {Tester_SecurityAccess_SID, Tester_SecurityAccess_ReqSeedID};
 80018a0:	f240 1327 	movw	r3, #295	; 0x127
 80018a4:	83bb      	strh	r3, [r7, #28]
	CanTP_Packet ReqPacket = {
 80018a6:	2302      	movs	r3, #2
 80018a8:	82bb      	strh	r3, [r7, #20]
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	61bb      	str	r3, [r7, #24]
			.Data = Buffer,
			.Len = 2
	};
//	HAL_StatusTypeDef Status =0;
	osDelay(10);
 80018b0:	200a      	movs	r0, #10
 80018b2:	f004 fce3 	bl	800627c <osDelay>
	HAL_CheckERR(CanTP_Transmit(&TesterCanTP, ReqPacket));
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018be:	4825      	ldr	r0, [pc, #148]	; (8001954 <Tester_SecurityAccess_RequestSeed+0xbc>)
 80018c0:	f008 fbda 	bl	800a078 <CanTP_Transmit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <Tester_SecurityAccess_RequestSeed+0x44>
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018d2:	4820      	ldr	r0, [pc, #128]	; (8001954 <Tester_SecurityAccess_RequestSeed+0xbc>)
 80018d4:	f008 fbd0 	bl	800a078 <CanTP_Transmit>
 80018d8:	4603      	mov	r3, r0
 80018da:	e037      	b.n	800194c <Tester_SecurityAccess_RequestSeed+0xb4>
	CanTP_Packet RespPacket ={0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
	HAL_CheckERR(CanTP_Receive(&TesterCanTP, &RespPacket,500));
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4818      	ldr	r0, [pc, #96]	; (8001954 <Tester_SecurityAccess_RequestSeed+0xbc>)
 80018f2:	f008 fbf3 	bl	800a0dc <CanTP_Receive>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <Tester_SecurityAccess_RequestSeed+0x78>
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001904:	4619      	mov	r1, r3
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <Tester_SecurityAccess_RequestSeed+0xbc>)
 8001908:	f008 fbe8 	bl	800a0dc <CanTP_Receive>
 800190c:	4603      	mov	r3, r0
 800190e:	e01d      	b.n	800194c <Tester_SecurityAccess_RequestSeed+0xb4>
	uint8_t SID = RespPacket.Data[0];
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	77fb      	strb	r3, [r7, #31]
	uint8_t SubFuncID = RespPacket.Data[1];
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	785b      	ldrb	r3, [r3, #1]
 800191a:	77bb      	strb	r3, [r7, #30]
	uint32_t Seed_BE;
	memcpy(&Seed_BE, RespPacket.Data + 2, 4);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	3302      	adds	r3, #2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60bb      	str	r3, [r7, #8]
	vPortFree(RespPacket.Data);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4618      	mov	r0, r3
 8001928:	f008 f802 	bl	8009930 <vPortFree>
	if(SID == Tester_SecurityAccess_RespSID && SubFuncID == Tester_SecurityAccess_ReqSeedID)
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	2b67      	cmp	r3, #103	; 0x67
 8001930:	d108      	bne.n	8001944 <Tester_SecurityAccess_RequestSeed+0xac>
 8001932:	7fbb      	ldrb	r3, [r7, #30]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <Tester_SecurityAccess_RequestSeed+0xac>
	{
		*Seed = __ntohl(Seed_BE);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	ba1a      	rev	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e003      	b.n	800194c <Tester_SecurityAccess_RequestSeed+0xb4>
	}
	else
	{
		SyncPrintf("Tester: Request Seed Failed \r\n");
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <Tester_SecurityAccess_RequestSeed+0xc0>)
 8001946:	f7ff fc6b 	bl	8001220 <SyncPrintf>
		return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
	}

}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000284 	.word	0x20000284
 8001958:	0800ae60 	.word	0x0800ae60

0800195c <Tester_SecurityAccess_ValidKey>:

static HAL_StatusTypeDef Tester_SecurityAccess_ValidKey(uint8_t SubFunctionID, uint32_t Key)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
 800196c:	2300      	movs	r3, #0
 800196e:	84bb      	strh	r3, [r7, #36]	; 0x24
	Buffer[0] = Tester_SecurityAccess_SID;
 8001970:	2327      	movs	r3, #39	; 0x27
 8001972:	f887 3020 	strb.w	r3, [r7, #32]
	Buffer[1] = SubFunctionID;
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint32_t Key_BE = __htonl(Key);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	ba1b      	rev	r3, r3
 8001980:	61fb      	str	r3, [r7, #28]
	memmove(Buffer+2, &Key_BE, 4);
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	3302      	adds	r3, #2
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	601a      	str	r2, [r3, #0]
	CanTP_Packet SendPacket = {
 800198c:	2306      	movs	r3, #6
 800198e:	82bb      	strh	r3, [r7, #20]
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	61bb      	str	r3, [r7, #24]
			.Data = Buffer,
			.Len = sizeof(Buffer)
	};
	osDelay(10);
 8001996:	200a      	movs	r0, #10
 8001998:	f004 fc70 	bl	800627c <osDelay>
	HAL_CheckERR(CanTP_Transmit(&TesterCanTP, SendPacket));
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019a4:	4823      	ldr	r0, [pc, #140]	; (8001a34 <Tester_SecurityAccess_ValidKey+0xd8>)
 80019a6:	f008 fb67 	bl	800a078 <CanTP_Transmit>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <Tester_SecurityAccess_ValidKey+0x66>
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019b8:	481e      	ldr	r0, [pc, #120]	; (8001a34 <Tester_SecurityAccess_ValidKey+0xd8>)
 80019ba:	f008 fb5d 	bl	800a078 <CanTP_Transmit>
 80019be:	4603      	mov	r3, r0
 80019c0:	e033      	b.n	8001a2a <Tester_SecurityAccess_ValidKey+0xce>

	CanTP_Packet RespPacket ={0};
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
	HAL_CheckERR(CanTP_Receive(&TesterCanTP, &RespPacket, 500));
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4817      	ldr	r0, [pc, #92]	; (8001a34 <Tester_SecurityAccess_ValidKey+0xd8>)
 80019d8:	f008 fb80 	bl	800a0dc <CanTP_Receive>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <Tester_SecurityAccess_ValidKey+0x9a>
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4811      	ldr	r0, [pc, #68]	; (8001a34 <Tester_SecurityAccess_ValidKey+0xd8>)
 80019ee:	f008 fb75 	bl	800a0dc <CanTP_Receive>
 80019f2:	4603      	mov	r3, r0
 80019f4:	e019      	b.n	8001a2a <Tester_SecurityAccess_ValidKey+0xce>
	uint8_t RespSID = RespPacket.Data[0];
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t RespSubFuncID = RespPacket.Data[1];
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	785b      	ldrb	r3, [r3, #1]
 8001a02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(RespSID == Tester_SecurityAccess_RespSID && RespSubFuncID == SubFunctionID)
 8001a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a0a:	2b67      	cmp	r3, #103	; 0x67
 8001a0c:	d109      	bne.n	8001a22 <Tester_SecurityAccess_ValidKey+0xc6>
 8001a0e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d104      	bne.n	8001a22 <Tester_SecurityAccess_ValidKey+0xc6>
	{
		SyncPrintf("Tester: Security Access Success \r\n");
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <Tester_SecurityAccess_ValidKey+0xdc>)
 8001a1a:	f7ff fc01 	bl	8001220 <SyncPrintf>
		return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e003      	b.n	8001a2a <Tester_SecurityAccess_ValidKey+0xce>
	}
	else
	{
		SyncPrintf("Tester: Security Access Failed \r\n");
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <Tester_SecurityAccess_ValidKey+0xe0>)
 8001a24:	f7ff fbfc 	bl	8001220 <SyncPrintf>
		return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
	}
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000284 	.word	0x20000284
 8001a38:	0800ae80 	.word	0x0800ae80
 8001a3c:	0800aea4 	.word	0x0800aea4

08001a40 <Tester_SecurityAccess>:

static HAL_StatusTypeDef Tester_SecurityAccess(uint8_t IsSendTrueKey)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	uint32_t SecuritySeed;
	osDelay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f004 fc16 	bl	800627c <osDelay>
	HAL_CheckERR(Tester_SecurityAccess_RequestSeed(&SecuritySeed));
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff1f 	bl	8001898 <Tester_SecurityAccess_RequestSeed>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <Tester_SecurityAccess+0x2e>
 8001a60:	f107 0308 	add.w	r3, r7, #8
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff17 	bl	8001898 <Tester_SecurityAccess_RequestSeed>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e01d      	b.n	8001aaa <Tester_SecurityAccess+0x6a>
	SyncPrintf("Tester: Seed Receive %ld\r\n", SecuritySeed);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <Tester_SecurityAccess+0x74>)
 8001a74:	f7ff fbd4 	bl	8001220 <SyncPrintf>
	uint32_t SecurityKey = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
	if(IsSendTrueKey == 1)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <Tester_SecurityAccess+0x4e>
	{
		SecurityKey = Key_Calculate(SecuritySeed);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fec3 	bl	8001810 <Key_Calculate>
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	e001      	b.n	8001a92 <Tester_SecurityAccess+0x52>
	}
	else
	{
		SecurityKey = 12346789;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <Tester_SecurityAccess+0x78>)
 8001a90:	60fb      	str	r3, [r7, #12]
	}
	osDelay(10);
 8001a92:	200a      	movs	r0, #10
 8001a94:	f004 fbf2 	bl	800627c <osDelay>
	SyncPrintf("Tester Send Key %ld \r\n", SecurityKey);
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <Tester_SecurityAccess+0x7c>)
 8001a9c:	f7ff fbc0 	bl	8001220 <SyncPrintf>
	Tester_SecurityAccess_ValidKey(Tester_SecurityAccess_SendKeyID, SecurityKey);
 8001aa0:	68f9      	ldr	r1, [r7, #12]
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7ff ff5a 	bl	800195c <Tester_SecurityAccess_ValidKey>
	return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0800aec8 	.word	0x0800aec8
 8001ab8:	00bc65a5 	.word	0x00bc65a5
 8001abc:	0800aee4 	.word	0x0800aee4

08001ac0 <Tester_Loop>:

HAL_StatusTypeDef Tester_Loop()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
//	Tester_ReadDataByID();
//	osDelay(1000);
//	 Tester_WriteDataByID();
	if(BTN0_IsPress == 1)
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <Tester_Loop+0x7c>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d130      	bne.n	8001b30 <Tester_Loop+0x70>
	{
		SyncPrintf("------------------------------- \r\n");
 8001ace:	481c      	ldr	r0, [pc, #112]	; (8001b40 <Tester_Loop+0x80>)
 8001ad0:	f7ff fba6 	bl	8001220 <SyncPrintf>

		BTN0_IsPress = 0;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <Tester_Loop+0x7c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
		SyncPrintf("Security Access Press 0: False Key, Press 1: True Key \r\n");
 8001ada:	481a      	ldr	r0, [pc, #104]	; (8001b44 <Tester_Loop+0x84>)
 8001adc:	f7ff fba0 	bl	8001220 <SyncPrintf>
		while(BTN0_IsPress == 0 && BTN1_IsPress == 0);
 8001ae0:	bf00      	nop
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <Tester_Loop+0x7c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <Tester_Loop+0x32>
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <Tester_Loop+0x88>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f7      	beq.n	8001ae2 <Tester_Loop+0x22>
		uint8_t SendTrueKey = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	71fb      	strb	r3, [r7, #7]
		if(BTN0_IsPress)
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <Tester_Loop+0x7c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <Tester_Loop+0x4a>
		{
			SendTrueKey = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71fb      	strb	r3, [r7, #7]
			SyncPrintf("Tester: Send False Key \r\n");
 8001b02:	4812      	ldr	r0, [pc, #72]	; (8001b4c <Tester_Loop+0x8c>)
 8001b04:	f7ff fb8c 	bl	8001220 <SyncPrintf>
 8001b08:	e008      	b.n	8001b1c <Tester_Loop+0x5c>
		}else if(BTN1_IsPress)
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <Tester_Loop+0x88>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <Tester_Loop+0x5c>
		{
			SendTrueKey = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	71fb      	strb	r3, [r7, #7]
			SyncPrintf("Tester Send True Key \r\n");
 8001b16:	480e      	ldr	r0, [pc, #56]	; (8001b50 <Tester_Loop+0x90>)
 8001b18:	f7ff fb82 	bl	8001220 <SyncPrintf>
		}
		Tester_SecurityAccess(SendTrueKey);
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff8e 	bl	8001a40 <Tester_SecurityAccess>
		BTN0_IsPress = 0;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <Tester_Loop+0x7c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
		BTN1_IsPress = 0;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <Tester_Loop+0x88>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
	}
	return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200002c5 	.word	0x200002c5
 8001b40:	0800aefc 	.word	0x0800aefc
 8001b44:	0800af20 	.word	0x0800af20
 8001b48:	200002c6 	.word	0x200002c6
 8001b4c:	0800af5c 	.word	0x0800af5c
 8001b50:	0800af78 	.word	0x0800af78

08001b54 <TesterTask_Handler>:


void TesterTask_Handler(void *argument)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status;
	Status = Tester_Init();
 8001b5c:	f7ff fe68 	bl	8001830 <Tester_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]
	SyncPrintf("Tester Init State %ld\r\n", (uint32_t) Status);
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TesterTask_Handler+0x20>)
 8001b6a:	f7ff fb59 	bl	8001220 <SyncPrintf>
	while(1)
	{
		Tester_Loop();
 8001b6e:	f7ff ffa7 	bl	8001ac0 <Tester_Loop>
 8001b72:	e7fc      	b.n	8001b6e <TesterTask_Handler+0x1a>
 8001b74:	0800af90 	.word	0x0800af90

08001b78 <HAL_CAN_RxFifo1MsgPendingCallback>:
	}
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

	if(hcan->Instance == Tester_HCAN.Instance)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d114      	bne.n	8001bb6 <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
	{
		CAN_RxHeaderTypeDef RcvHeader;
		uint8_t RcvData[8];
		HAL_CAN_GetRxMessage(&Tester_HCAN, Tester_CANRxFifo, &RcvHeader, RcvData);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	f107 0214 	add.w	r2, r7, #20
 8001b94:	2101      	movs	r1, #1
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8001b98:	f000 ffca 	bl	8002b30 <HAL_CAN_GetRxMessage>
		if(RcvHeader.StdId == TesterCanTP.CanRxID)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8001ba0:	8852      	ldrh	r2, [r2, #2]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
		{
			CanTP_RcvCBHandler(&TesterCanTP, RcvData, RcvHeader.DLC);
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8001bb2:	f007 fff9 	bl	8009ba8 <CanTP_RcvCBHandler>
		}
	}

}
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	; 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000160 	.word	0x20000160
 8001bc4:	20000284 	.word	0x20000284

08001bc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN0_Pin)
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <HAL_GPIO_EXTI_Callback+0x16>
	{
		BTN0_IsPress = 1;
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_GPIO_EXTI_Callback+0x54>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BTN1_Pin)
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d102      	bne.n	8001bea <HAL_GPIO_EXTI_Callback+0x22>
	{
		BTN1_IsPress =1 ;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x58>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == Joystick_A_Pin)
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d102      	bne.n	8001bf6 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		Joystick_Pressed = 1;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == Joystick_B_Pin)
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d102      	bne.n	8001c02 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		Joystick_Pressed = 2;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == Joystick_Mid_Pin)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c08:	d102      	bne.n	8001c10 <HAL_GPIO_EXTI_Callback+0x48>
	{
		Joystick_Pressed = 3;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	701a      	strb	r2, [r3, #0]
	}
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200002c5 	.word	0x200002c5
 8001c20:	200002c6 	.word	0x200002c6
 8001c24:	200002c4 	.word	0x200002c4

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_Init+0x40>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_Init+0x40>)
 8001c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x40>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f001 fb78 	bl	8003346 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f7ff f8cc 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff f89e 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	200002c8 	.word	0x200002c8

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	200002c8 	.word	0x200002c8

08001cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e033      	b.n	8001d2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fcd8 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf2:	f023 0302 	bic.w	r3, r3, #2
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fa68 	bl	80021d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1a:	e001      	b.n	8001d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Start_DMA+0x1e>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0e9      	b.n	8001f26 <HAL_ADC_Start_DMA+0x1f2>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d018      	beq.n	8001d9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_ADC_Start_DMA+0x1fc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6d      	ldr	r2, [pc, #436]	; (8001f34 <HAL_ADC_Start_DMA+0x200>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9a      	lsrs	r2, r3, #18
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da8:	d107      	bne.n	8001dba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 80a1 	bne.w	8001f0c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f023 0206 	bic.w	r2, r3, #6
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_ADC_Start_DMA+0x204>)
 8001e28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	4a43      	ldr	r2, [pc, #268]	; (8001f3c <HAL_ADC_Start_DMA+0x208>)
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <HAL_ADC_Start_DMA+0x20c>)
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <HAL_ADC_Start_DMA+0x210>)
 8001e40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	334c      	adds	r3, #76	; 0x4c
 8001e76:	4619      	mov	r1, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f001 fb46 	bl	800350c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d12a      	bne.n	8001ee2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <HAL_ADC_Start_DMA+0x214>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d015      	beq.n	8001ec2 <HAL_ADC_Start_DMA+0x18e>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_ADC_Start_DMA+0x218>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_Start_DMA+0x178>
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_ADC_Start_DMA+0x204>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_ADC_Start_DMA+0x21c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d136      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_ADC_Start_DMA+0x204>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d130      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d129      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e020      	b.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_ADC_Start_DMA+0x214>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d11b      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d114      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	e00b      	b.n	8001f24 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83
 8001f38:	40012300 	.word	0x40012300
 8001f3c:	080023cd 	.word	0x080023cd
 8001f40:	08002487 	.word	0x08002487
 8001f44:	080024a3 	.word	0x080024a3
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	40012100 	.word	0x40012100
 8001f50:	40012200 	.word	0x40012200

08001f54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1c>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e105      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x228>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b09      	cmp	r3, #9
 8001fba:	d925      	bls.n	8002008 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68d9      	ldr	r1, [r3, #12]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b1e      	subs	r3, #30
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	400a      	ands	r2, r1
 8001fe0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68d9      	ldr	r1, [r3, #12]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4403      	add	r3, r0
 8001ffa:	3b1e      	subs	r3, #30
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	e022      	b.n	800204e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6919      	ldr	r1, [r3, #16]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	2207      	movs	r2, #7
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6919      	ldr	r1, [r3, #16]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	4603      	mov	r3, r0
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4403      	add	r3, r0
 8002044:	409a      	lsls	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d824      	bhi.n	80020a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b05      	subs	r3, #5
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	400a      	ands	r2, r1
 8002076:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3b05      	subs	r3, #5
 8002092:	fa00 f203 	lsl.w	r2, r0, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
 800209e:	e04c      	b.n	800213a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d824      	bhi.n	80020f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b23      	subs	r3, #35	; 0x23
 80020ba:	221f      	movs	r2, #31
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43da      	mvns	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	400a      	ands	r2, r1
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3b23      	subs	r3, #35	; 0x23
 80020e4:	fa00 f203 	lsl.w	r2, r0, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
 80020f0:	e023      	b.n	800213a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	3b41      	subs	r3, #65	; 0x41
 8002104:	221f      	movs	r2, #31
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	400a      	ands	r2, r1
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b41      	subs	r3, #65	; 0x41
 800212e:	fa00 f203 	lsl.w	r2, r0, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_ADC_ConfigChannel+0x234>)
 800213c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_ADC_ConfigChannel+0x238>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d109      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1cc>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b12      	cmp	r3, #18
 800214e:	d105      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_ADC_ConfigChannel+0x238>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d123      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x21e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d003      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x1e6>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b11      	cmp	r3, #17
 8002174:	d11b      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b10      	cmp	r3, #16
 8002188:	d111      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_ADC_ConfigChannel+0x23c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_ADC_ConfigChannel+0x240>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0c9a      	lsrs	r2, r3, #18
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40012300 	.word	0x40012300
 80021c8:	40012000 	.word	0x40012000
 80021cc:	20000000 	.word	0x20000000
 80021d0:	431bde83 	.word	0x431bde83

080021d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021dc:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <ADC_Init+0x1f0>)
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	021a      	lsls	r2, r3, #8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800222c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <ADC_Init+0x1f4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d022      	beq.n	80022b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800227a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6899      	ldr	r1, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800229c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e00f      	b.n	80022d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0202 	bic.w	r2, r2, #2
 80022e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6899      	ldr	r1, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e1b      	ldrb	r3, [r3, #24]
 80022ec:	005a      	lsls	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01b      	beq.n	8002338 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800230e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800231e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	3b01      	subs	r3, #1
 800232c:	035a      	lsls	r2, r3, #13
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	e007      	b.n	8002348 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	3b01      	subs	r3, #1
 8002364:	051a      	lsls	r2, r3, #20
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800237c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800238a:	025a      	lsls	r2, r3, #9
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	029a      	lsls	r2, r3, #10
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40012300 	.word	0x40012300
 80023c8:	0f000001 	.word	0x0f000001

080023cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d13c      	bne.n	8002460 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d12b      	bne.n	8002458 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002404:	2b00      	cmp	r3, #0
 8002406:	d127      	bne.n	8002458 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002420:	2b00      	cmp	r3, #0
 8002422:	d119      	bne.n	8002458 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0220 	bic.w	r2, r2, #32
 8002432:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fd7b 	bl	8001f54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800245e:	e00e      	b.n	800247e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff fd85 	bl	8001f7c <HAL_ADC_ErrorCallback>
}
 8002472:	e004      	b.n	800247e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff fd67 	bl	8001f68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2240      	movs	r2, #64	; 0x40
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f043 0204 	orr.w	r2, r3, #4
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff fd5a 	bl	8001f7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0ed      	b.n	80026be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe f9ae 	bl	8000850 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002504:	f7ff fbc6 	bl	8001c94 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800250a:	e012      	b.n	8002532 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800250c:	f7ff fbc2 	bl	8001c94 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d90b      	bls.n	8002532 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2205      	movs	r2, #5
 800252a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0c5      	b.n	80026be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0e5      	beq.n	800250c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0202 	bic.w	r2, r2, #2
 800254e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002550:	f7ff fba0 	bl	8001c94 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002556:	e012      	b.n	800257e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002558:	f7ff fb9c 	bl	8001c94 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b0a      	cmp	r3, #10
 8002564:	d90b      	bls.n	800257e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2205      	movs	r2, #5
 8002576:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e09f      	b.n	80026be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7e1b      	ldrb	r3, [r3, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e007      	b.n	80025b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7e5b      	ldrb	r3, [r3, #25]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e007      	b.n	80025e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7e9b      	ldrb	r3, [r3, #26]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d108      	bne.n	80025fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e007      	b.n	800260a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0220 	bic.w	r2, r2, #32
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7edb      	ldrb	r3, [r3, #27]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0210 	bic.w	r2, r2, #16
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e007      	b.n	8002634 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0210 	orr.w	r2, r2, #16
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7f1b      	ldrb	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e007      	b.n	800265e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0208 	bic.w	r2, r2, #8
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7f5b      	ldrb	r3, [r3, #29]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0204 	orr.w	r2, r2, #4
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e007      	b.n	8002688 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0204 	bic.w	r2, r2, #4
 8002686:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	ea42 0103 	orr.w	r1, r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d003      	beq.n	80026ee <HAL_CAN_ConfigFilter+0x26>
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f040 80be 	bne.w	800286a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_CAN_ConfigFilter+0x1bc>)
 80026f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002708:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	431a      	orrs	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2201      	movs	r2, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43db      	mvns	r3, r3
 8002740:	401a      	ands	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d123      	bne.n	8002798 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002772:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3248      	adds	r2, #72	; 0x48
 8002778:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800278c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800278e:	6979      	ldr	r1, [r7, #20]
 8002790:	3348      	adds	r3, #72	; 0x48
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d122      	bne.n	80027e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3248      	adds	r2, #72	; 0x48
 80027c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027dc:	6979      	ldr	r1, [r7, #20]
 80027de:	3348      	adds	r3, #72	; 0x48
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002800:	e007      	b.n	8002812 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	431a      	orrs	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	401a      	ands	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800282c:	e007      	b.n	800283e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	431a      	orrs	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	431a      	orrs	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800285c:	f023 0201 	bic.w	r2, r3, #1
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e006      	b.n	8002878 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40006400 	.word	0x40006400

08002888 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d12e      	bne.n	80028fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028b4:	f7ff f9ee 	bl	8001c94 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ba:	e012      	b.n	80028e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028bc:	f7ff f9ea 	bl	8001c94 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b0a      	cmp	r3, #10
 80028c8:	d90b      	bls.n	80028e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2205      	movs	r2, #5
 80028da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e012      	b.n	8002908 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e5      	bne.n	80028bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e006      	b.n	8002908 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002924:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d003      	beq.n	800293c <HAL_CAN_AddTxMessage+0x2c>
 8002934:	7ffb      	ldrb	r3, [r7, #31]
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 80b8 	bne.w	8002aac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800294c:	2b00      	cmp	r3, #0
 800294e:	d105      	bne.n	800295c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80a0 	beq.w	8002a9c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	0e1b      	lsrs	r3, r3, #24
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d907      	bls.n	800297c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e09e      	b.n	8002aba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800297c:	2201      	movs	r2, #1
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	409a      	lsls	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	6809      	ldr	r1, [r1, #0]
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3318      	adds	r3, #24
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	440b      	add	r3, r1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e00f      	b.n	80029ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3318      	adds	r3, #24
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	440b      	add	r3, r1
 80029c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3318      	adds	r3, #24
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	440b      	add	r3, r1
 80029da:	3304      	adds	r3, #4
 80029dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	7d1b      	ldrb	r3, [r3, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d111      	bne.n	8002a0a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3318      	adds	r3, #24
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6811      	ldr	r1, [r2, #0]
 80029fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3318      	adds	r3, #24
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	440b      	add	r3, r1
 8002a06:	3304      	adds	r3, #4
 8002a08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3307      	adds	r3, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	061a      	lsls	r2, r3, #24
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3306      	adds	r3, #6
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3305      	adds	r3, #5
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	4313      	orrs	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	3204      	adds	r2, #4
 8002a2a:	7812      	ldrb	r2, [r2, #0]
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	ea43 0200 	orr.w	r2, r3, r0
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3303      	adds	r3, #3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3301      	adds	r3, #1
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	4610      	mov	r0, r2
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	6811      	ldr	r1, [r2, #0]
 8002a68:	ea43 0200 	orr.w	r2, r3, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3318      	adds	r3, #24
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3318      	adds	r3, #24
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	440b      	add	r3, r1
 8002a96:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e00e      	b.n	8002aba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e006      	b.n	8002aba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d002      	beq.n	8002ae6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002ae0:	7afb      	ldrb	r3, [r7, #11]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d11d      	bne.n	8002b22 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3301      	adds	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b44:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d003      	beq.n	8002b54 <HAL_CAN_GetRxMessage+0x24>
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	f040 80f3 	bne.w	8002d3a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10e      	bne.n	8002b78 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0e7      	b.n	8002d48 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0d8      	b.n	8002d48 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	331b      	adds	r3, #27
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4413      	add	r3, r2
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0204 	and.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10c      	bne.n	8002bce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	331b      	adds	r3, #27
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0d5b      	lsrs	r3, r3, #21
 8002bc4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e00b      	b.n	8002be6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	331b      	adds	r3, #27
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0202 	and.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	331b      	adds	r3, #27
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	331b      	adds	r3, #27
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4413      	add	r3, r2
 8002c20:	3304      	adds	r3, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	331b      	adds	r3, #27
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	4413      	add	r3, r2
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0a1a      	lsrs	r2, r3, #8
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0c1a      	lsrs	r2, r3, #16
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0e1a      	lsrs	r2, r3, #24
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	3303      	adds	r3, #3
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0a1a      	lsrs	r2, r3, #8
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	3305      	adds	r3, #5
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0c1a      	lsrs	r2, r3, #16
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	3306      	adds	r3, #6
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e1a      	lsrs	r2, r3, #24
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3307      	adds	r3, #7
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d108      	bne.n	8002d26 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0220 	orr.w	r2, r2, #32
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	e007      	b.n	8002d36 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e006      	b.n	8002d48 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d002      	beq.n	8002d72 <HAL_CAN_ActivateNotification+0x1e>
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d109      	bne.n	8002d86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6959      	ldr	r1, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e006      	b.n	8002d94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d07c      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f983 	bl	800310e <HAL_CAN_TxMailbox0CompleteCallback>
 8002e08:	e016      	b.n	8002e38 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1c:	e00c      	b.n	8002e38 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e30:	e002      	b.n	8002e38 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f989 	bl	800314a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d024      	beq.n	8002e8c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f963 	bl	8003122 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e5c:	e016      	b.n	8002e8c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	e00c      	b.n	8002e8c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	e002      	b.n	8002e8c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f969 	bl	800315e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d024      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f943 	bl	8003136 <HAL_CAN_TxMailbox2CompleteCallback>
 8002eb0:	e016      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	e00c      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	e002      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f949 	bl	8003172 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00c      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2210      	movs	r2, #16
 8002f02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f930 	bl	8003186 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe fc16 	bl	8001770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2208      	movs	r2, #8
 8002f82:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f908 	bl	800319a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe fde8 	bl	8001b78 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8f2 	bl	80031ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8eb 	bl	80031c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07b      	beq.n	80030ee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d072      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305a:	2b00      	cmp	r3, #0
 800305c:	d043      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003064:	2b00      	cmp	r3, #0
 8003066:	d03e      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800306e:	2b60      	cmp	r3, #96	; 0x60
 8003070:	d02b      	beq.n	80030ca <HAL_CAN_IRQHandler+0x32a>
 8003072:	2b60      	cmp	r3, #96	; 0x60
 8003074:	d82e      	bhi.n	80030d4 <HAL_CAN_IRQHandler+0x334>
 8003076:	2b50      	cmp	r3, #80	; 0x50
 8003078:	d022      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x320>
 800307a:	2b50      	cmp	r3, #80	; 0x50
 800307c:	d82a      	bhi.n	80030d4 <HAL_CAN_IRQHandler+0x334>
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	d019      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x316>
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d826      	bhi.n	80030d4 <HAL_CAN_IRQHandler+0x334>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d010      	beq.n	80030ac <HAL_CAN_IRQHandler+0x30c>
 800308a:	2b30      	cmp	r3, #48	; 0x30
 800308c:	d822      	bhi.n	80030d4 <HAL_CAN_IRQHandler+0x334>
 800308e:	2b10      	cmp	r3, #16
 8003090:	d002      	beq.n	8003098 <HAL_CAN_IRQHandler+0x2f8>
 8003092:	2b20      	cmp	r3, #32
 8003094:	d005      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003096:	e01d      	b.n	80030d4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	f043 0308 	orr.w	r3, r3, #8
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030a0:	e019      	b.n	80030d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	f043 0310 	orr.w	r3, r3, #16
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030aa:	e014      	b.n	80030d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030b4:	e00f      	b.n	80030d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030be:	e00a      	b.n	80030d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030c8:	e005      	b.n	80030d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030d2:	e000      	b.n	80030d6 <HAL_CAN_IRQHandler+0x336>
            break;
 80030d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2204      	movs	r2, #4
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f868 	bl	80031d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	; 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003208:	4013      	ands	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	60d3      	str	r3, [r2, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <__NVIC_GetPriorityGrouping+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0307 	and.w	r3, r3, #7
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db0b      	blt.n	800327a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	4907      	ldr	r1, [pc, #28]	; (8003288 <__NVIC_EnableIRQ+0x38>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2001      	movs	r0, #1
 8003272:	fa00 f202 	lsl.w	r2, r0, r2
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	; (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	; (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
         );
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff4c 	bl	80031ec <__NVIC_SetPriorityGrouping>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800336e:	f7ff ff61 	bl	8003234 <__NVIC_GetPriorityGrouping>
 8003372:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	6978      	ldr	r0, [r7, #20]
 800337a:	f7ff ffb1 	bl	80032e0 <NVIC_EncodePriority>
 800337e:	4602      	mov	r2, r0
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff80 	bl	800328c <__NVIC_SetPriority>
}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff54 	bl	8003250 <__NVIC_EnableIRQ>
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7fe fc6a 	bl	8001c94 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e099      	b.n	8003500 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ec:	e00f      	b.n	800340e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ee:	f7fe fc51 	bl	8001c94 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d908      	bls.n	800340e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e078      	b.n	8003500 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e8      	bne.n	80033ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4b38      	ldr	r3, [pc, #224]	; (8003508 <HAL_DMA_Init+0x158>)
 8003428:	4013      	ands	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800343a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003446:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003452:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2b04      	cmp	r3, #4
 8003466:	d107      	bne.n	8003478 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	4313      	orrs	r3, r2
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0307 	bic.w	r3, r3, #7
 800348e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d117      	bne.n	80034d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb01 	bl	8003abc <DMA_CheckFifoParam>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2240      	movs	r2, #64	; 0x40
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034ce:	2301      	movs	r3, #1
 80034d0:	e016      	b.n	8003500 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fab8 	bl	8003a50 <DMA_CalcBaseAndBitshift>
 80034e0:	4603      	mov	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	223f      	movs	r2, #63	; 0x3f
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	f010803f 	.word	0xf010803f

0800350c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_DMA_Start_IT+0x26>
 800352e:	2302      	movs	r3, #2
 8003530:	e040      	b.n	80035b4 <HAL_DMA_Start_IT+0xa8>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12f      	bne.n	80035a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fa4a 	bl	80039f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	223f      	movs	r2, #63	; 0x3f
 8003566:	409a      	lsls	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0216 	orr.w	r2, r2, #22
 800357a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0208 	orr.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e005      	b.n	80035b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035ca:	f7fe fb63 	bl	8001c94 <HAL_GetTick>
 80035ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d008      	beq.n	80035ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e052      	b.n	8003694 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0216 	bic.w	r2, r2, #22
 80035fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800360c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <HAL_DMA_Abort+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0208 	bic.w	r2, r2, #8
 800362c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800363e:	e013      	b.n	8003668 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003640:	f7fe fb28 	bl	8001c94 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b05      	cmp	r3, #5
 800364c:	d90c      	bls.n	8003668 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2203      	movs	r2, #3
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e015      	b.n	8003694 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e4      	bne.n	8003640 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	223f      	movs	r2, #63	; 0x3f
 800367c:	409a      	lsls	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e00c      	b.n	80036d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2205      	movs	r2, #5
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036ec:	4b8e      	ldr	r3, [pc, #568]	; (8003928 <HAL_DMA_IRQHandler+0x248>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a8e      	ldr	r2, [pc, #568]	; (800392c <HAL_DMA_IRQHandler+0x24c>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0a9b      	lsrs	r3, r3, #10
 80036f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	2208      	movs	r2, #8
 800370c:	409a      	lsls	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01a      	beq.n	800374c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0204 	bic.w	r2, r2, #4
 8003732:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2208      	movs	r2, #8
 800373a:	409a      	lsls	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	2201      	movs	r2, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	2201      	movs	r2, #1
 8003770:	409a      	lsls	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	2204      	movs	r2, #4
 8003788:	409a      	lsls	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	2204      	movs	r2, #4
 80037a6:	409a      	lsls	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	f043 0204 	orr.w	r2, r3, #4
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	2210      	movs	r2, #16
 80037be:	409a      	lsls	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d043      	beq.n	8003850 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d03c      	beq.n	8003850 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	2210      	movs	r2, #16
 80037dc:	409a      	lsls	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d018      	beq.n	8003822 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d024      	beq.n	8003850 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
 800380e:	e01f      	b.n	8003850 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01b      	beq.n	8003850 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
 8003820:	e016      	b.n	8003850 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d107      	bne.n	8003840 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0208 	bic.w	r2, r2, #8
 800383e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	2220      	movs	r2, #32
 8003856:	409a      	lsls	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 808f 	beq.w	8003980 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8087 	beq.w	8003980 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	2220      	movs	r2, #32
 8003878:	409a      	lsls	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b05      	cmp	r3, #5
 8003888:	d136      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0216 	bic.w	r2, r2, #22
 8003898:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_DMA_IRQHandler+0x1da>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0208 	bic.w	r2, r2, #8
 80038c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	223f      	movs	r2, #63	; 0x3f
 80038d0:	409a      	lsls	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d07e      	beq.n	80039ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
        }
        return;
 80038f6:	e079      	b.n	80039ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10d      	bne.n	8003930 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	2b00      	cmp	r3, #0
 800391a:	d031      	beq.n	8003980 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
 8003924:	e02c      	b.n	8003980 <HAL_DMA_IRQHandler+0x2a0>
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000
 800392c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d023      	beq.n	8003980 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
 8003940:	e01e      	b.n	8003980 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10f      	bne.n	8003970 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0210 	bic.w	r2, r2, #16
 800395e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	2b00      	cmp	r3, #0
 8003986:	d032      	beq.n	80039ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d022      	beq.n	80039da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2205      	movs	r2, #5
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	3301      	adds	r3, #1
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d307      	bcc.n	80039c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f2      	bne.n	80039ac <HAL_DMA_IRQHandler+0x2cc>
 80039c6:	e000      	b.n	80039ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
 80039ea:	e000      	b.n	80039ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80039ec:	bf00      	nop
    }
  }
}
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d108      	bne.n	8003a34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a32:	e007      	b.n	8003a44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3b10      	subs	r3, #16
 8003a60:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a6a:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d909      	bls.n	8003a92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a90:	e007      	b.n	8003aa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	aaaaaaab 	.word	0xaaaaaaab
 8003ab8:	0800b45c 	.word	0x0800b45c

08003abc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11f      	bne.n	8003b16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d856      	bhi.n	8003b8a <DMA_CheckFifoParam+0xce>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <DMA_CheckFifoParam+0x28>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b07 	.word	0x08003b07
 8003aec:	08003af5 	.word	0x08003af5
 8003af0:	08003b8b 	.word	0x08003b8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d046      	beq.n	8003b8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b04:	e043      	b.n	8003b8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b0e:	d140      	bne.n	8003b92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b14:	e03d      	b.n	8003b92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1e:	d121      	bne.n	8003b64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d837      	bhi.n	8003b96 <DMA_CheckFifoParam+0xda>
 8003b26:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <DMA_CheckFifoParam+0x70>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b3d 	.word	0x08003b3d
 8003b30:	08003b43 	.word	0x08003b43
 8003b34:	08003b3d 	.word	0x08003b3d
 8003b38:	08003b55 	.word	0x08003b55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e030      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d025      	beq.n	8003b9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b52:	e022      	b.n	8003b9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b5c:	d11f      	bne.n	8003b9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b62:	e01c      	b.n	8003b9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d903      	bls.n	8003b72 <DMA_CheckFifoParam+0xb6>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d003      	beq.n	8003b78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b70:	e018      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      break;
 8003b76:	e015      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00e      	beq.n	8003ba2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      break;
 8003b88:	e00b      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e00a      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e008      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
 8003b94:	e006      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8003b96:	bf00      	nop
 8003b98:	e004      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e16b      	b.n	8003ea8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	f040 815a 	bne.w	8003ea2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d005      	beq.n	8003c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d130      	bne.n	8003c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	2203      	movs	r2, #3
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 0201 	and.w	r2, r3, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d017      	beq.n	8003ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d123      	bne.n	8003cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	08da      	lsrs	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3208      	adds	r2, #8
 8003cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	220f      	movs	r2, #15
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	08da      	lsrs	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3208      	adds	r2, #8
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0203 	and.w	r2, r3, #3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80b4 	beq.w	8003ea2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b60      	ldr	r3, [pc, #384]	; (8003ec0 <HAL_GPIO_Init+0x30c>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	4a5f      	ldr	r2, [pc, #380]	; (8003ec0 <HAL_GPIO_Init+0x30c>)
 8003d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d48:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4a:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <HAL_GPIO_Init+0x30c>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d56:	4a5b      	ldr	r2, [pc, #364]	; (8003ec4 <HAL_GPIO_Init+0x310>)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	220f      	movs	r2, #15
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a52      	ldr	r2, [pc, #328]	; (8003ec8 <HAL_GPIO_Init+0x314>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02b      	beq.n	8003dda <HAL_GPIO_Init+0x226>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a51      	ldr	r2, [pc, #324]	; (8003ecc <HAL_GPIO_Init+0x318>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d025      	beq.n	8003dd6 <HAL_GPIO_Init+0x222>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a50      	ldr	r2, [pc, #320]	; (8003ed0 <HAL_GPIO_Init+0x31c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01f      	beq.n	8003dd2 <HAL_GPIO_Init+0x21e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4f      	ldr	r2, [pc, #316]	; (8003ed4 <HAL_GPIO_Init+0x320>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d019      	beq.n	8003dce <HAL_GPIO_Init+0x21a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <HAL_GPIO_Init+0x324>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_GPIO_Init+0x216>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4d      	ldr	r2, [pc, #308]	; (8003edc <HAL_GPIO_Init+0x328>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00d      	beq.n	8003dc6 <HAL_GPIO_Init+0x212>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4c      	ldr	r2, [pc, #304]	; (8003ee0 <HAL_GPIO_Init+0x32c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <HAL_GPIO_Init+0x20e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4b      	ldr	r2, [pc, #300]	; (8003ee4 <HAL_GPIO_Init+0x330>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_GPIO_Init+0x20a>
 8003dba:	2307      	movs	r3, #7
 8003dbc:	e00e      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	e00c      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dc2:	2306      	movs	r3, #6
 8003dc4:	e00a      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	e008      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e004      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e002      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	f002 0203 	and.w	r2, r2, #3
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	4093      	lsls	r3, r2
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dec:	4935      	ldr	r1, [pc, #212]	; (8003ec4 <HAL_GPIO_Init+0x310>)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	3302      	adds	r3, #2
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e1e:	4a32      	ldr	r2, [pc, #200]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e4e:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e72:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e9c:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	f67f ae90 	bls.w	8003bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	40020800 	.word	0x40020800
 8003ed4:	40020c00 	.word	0x40020c00
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40021400 	.word	0x40021400
 8003ee0:	40021800 	.word	0x40021800
 8003ee4:	40021c00 	.word	0x40021c00
 8003ee8:	40013c00 	.word	0x40013c00

08003eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003efc:	787b      	ldrb	r3, [r7, #1]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f08:	e003      	b.n	8003f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f0a:	887b      	ldrh	r3, [r7, #2]
 8003f0c:	041a      	lsls	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	619a      	str	r2, [r3, #24]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd fe42 	bl	8001bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40013c00 	.word	0x40013c00

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e267      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d075      	beq.n	800405a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6e:	4b88      	ldr	r3, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b85      	ldr	r3, [pc, #532]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f86:	4b82      	ldr	r3, [pc, #520]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f92:	d10b      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	4b7e      	ldr	r3, [pc, #504]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05b      	beq.n	8004058 <HAL_RCC_OscConfig+0x108>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d157      	bne.n	8004058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e242      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x74>
 8003fb6:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a75      	ldr	r2, [pc, #468]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x98>
 8003fce:	4b70      	ldr	r3, [pc, #448]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6f      	ldr	r2, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b6d      	ldr	r3, [pc, #436]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6c      	ldr	r2, [pc, #432]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	4b69      	ldr	r3, [pc, #420]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a68      	ldr	r2, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b66      	ldr	r3, [pc, #408]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a65      	ldr	r2, [pc, #404]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd fe44 	bl	8001c94 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fd fe40 	bl	8001c94 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e207      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xc0>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fd fe30 	bl	8001c94 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fd fe2c 	bl	8001c94 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1f3      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	4b51      	ldr	r3, [pc, #324]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0xe8>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004066:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b44      	ldr	r3, [pc, #272]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1c7      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	e03a      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_OscConfig+0x244>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd fde5 	bl	8001c94 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fd fde1 	bl	8001c94 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1a8      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4925      	ldr	r1, [pc, #148]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	e015      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCC_OscConfig+0x244>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fdc4 	bl	8001c94 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004110:	f7fd fdc0 	bl	8001c94 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e187      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d036      	beq.n	80041a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_RCC_OscConfig+0x248>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd fda4 	bl	8001c94 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004150:	f7fd fda0 	bl	8001c94 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e167      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x240>)
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x200>
 800416e:	e01b      	b.n	80041a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x248>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fd fd8d 	bl	8001c94 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	e00e      	b.n	800419c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417e:	f7fd fd89 	bl	8001c94 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d907      	bls.n	800419c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e150      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
 8004190:	40023800 	.word	0x40023800
 8004194:	42470000 	.word	0x42470000
 8004198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ea      	bne.n	800417e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8097 	beq.w	80042e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ba:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	4b7d      	ldr	r3, [pc, #500]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a7c      	ldr	r2, [pc, #496]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b7a      	ldr	r3, [pc, #488]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b77      	ldr	r3, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b74      	ldr	r3, [pc, #464]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a73      	ldr	r2, [pc, #460]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fd fd49 	bl	8001c94 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd fd45 	bl	8001c94 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e10c      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x474>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x2ea>
 800422c:	4b64      	ldr	r3, [pc, #400]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a63      	ldr	r2, [pc, #396]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e01c      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x30c>
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a5e      	ldr	r2, [pc, #376]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800425c:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a57      	ldr	r2, [pc, #348]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a54      	ldr	r2, [pc, #336]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd fd0a 	bl	8001c94 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fd fd06 	bl	8001c94 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0cb      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ee      	beq.n	8004284 <HAL_RCC_OscConfig+0x334>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7fd fcf4 	bl	8001c94 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd fcf0 	bl	8001c94 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0b5      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a1 	beq.w	8004430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ee:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d05c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d141      	bne.n	8004386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd fcc4 	bl	8001c94 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004310:	f7fd fcc0 	bl	8001c94 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e087      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	491b      	ldr	r1, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fd fc99 	bl	8001c94 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004366:	f7fd fc95 	bl	8001c94 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e05c      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x416>
 8004384:	e054      	b.n	8004430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd fc82 	bl	8001c94 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004394:	f7fd fc7e 	bl	8001c94 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e045      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_OscConfig+0x470>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x444>
 80043b2:	e03d      	b.n	8004430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e038      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x4ec>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d028      	beq.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d121      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11a      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004404:	4293      	cmp	r3, r2
 8004406:	d111      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	3b01      	subs	r3, #1
 8004416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0cc      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d90c      	bls.n	800447c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b65      	ldr	r3, [pc, #404]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b63      	ldr	r3, [pc, #396]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0b8      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d020      	beq.n	80044ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004494:	4b59      	ldr	r3, [pc, #356]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a58      	ldr	r2, [pc, #352]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ac:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	494d      	ldr	r1, [pc, #308]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d044      	beq.n	8004560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d119      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450e:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e067      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4934      	ldr	r1, [pc, #208]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004530:	f7fd fbb0 	bl	8001c94 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7fd fbac 	bl	8001c94 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e04f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d20c      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e032      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4916      	ldr	r1, [pc, #88]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	490e      	ldr	r1, [pc, #56]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c6:	f000 f821 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	490a      	ldr	r1, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	5ccb      	ldrb	r3, [r1, r3]
 80045da:	fa22 f303 	lsr.w	r3, r2, r3
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fc fc04 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023c00 	.word	0x40023c00
 80045fc:	40023800 	.word	0x40023800
 8004600:	0800b034 	.word	0x0800b034
 8004604:	20000000 	.word	0x20000000
 8004608:	20000004 	.word	0x20000004

0800460c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800460c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004610:	b094      	sub	sp, #80	; 0x50
 8004612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	647b      	str	r3, [r7, #68]	; 0x44
 8004618:	2300      	movs	r3, #0
 800461a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800461c:	2300      	movs	r3, #0
 800461e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004624:	4b79      	ldr	r3, [pc, #484]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d00d      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x40>
 8004630:	2b08      	cmp	r3, #8
 8004632:	f200 80e1 	bhi.w	80047f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x34>
 800463a:	2b04      	cmp	r3, #4
 800463c:	d003      	beq.n	8004646 <HAL_RCC_GetSysClockFreq+0x3a>
 800463e:	e0db      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_GetSysClockFreq+0x204>)
 8004642:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004644:	e0db      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004646:	4b73      	ldr	r3, [pc, #460]	; (8004814 <HAL_RCC_GetSysClockFreq+0x208>)
 8004648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800464a:	e0d8      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800464c:	4b6f      	ldr	r3, [pc, #444]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004656:	4b6d      	ldr	r3, [pc, #436]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d063      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004662:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	2200      	movs	r2, #0
 800466a:	63bb      	str	r3, [r7, #56]	; 0x38
 800466c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004674:	633b      	str	r3, [r7, #48]	; 0x30
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
 800467a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800467e:	4622      	mov	r2, r4
 8004680:	462b      	mov	r3, r5
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	0159      	lsls	r1, r3, #5
 800468c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004690:	0150      	lsls	r0, r2, #5
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4621      	mov	r1, r4
 8004698:	1a51      	subs	r1, r2, r1
 800469a:	6139      	str	r1, [r7, #16]
 800469c:	4629      	mov	r1, r5
 800469e:	eb63 0301 	sbc.w	r3, r3, r1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046b0:	4659      	mov	r1, fp
 80046b2:	018b      	lsls	r3, r1, #6
 80046b4:	4651      	mov	r1, sl
 80046b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ba:	4651      	mov	r1, sl
 80046bc:	018a      	lsls	r2, r1, #6
 80046be:	4651      	mov	r1, sl
 80046c0:	ebb2 0801 	subs.w	r8, r2, r1
 80046c4:	4659      	mov	r1, fp
 80046c6:	eb63 0901 	sbc.w	r9, r3, r1
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046de:	4690      	mov	r8, r2
 80046e0:	4699      	mov	r9, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	eb18 0303 	adds.w	r3, r8, r3
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	462b      	mov	r3, r5
 80046ec:	eb49 0303 	adc.w	r3, r9, r3
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046fe:	4629      	mov	r1, r5
 8004700:	024b      	lsls	r3, r1, #9
 8004702:	4621      	mov	r1, r4
 8004704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004708:	4621      	mov	r1, r4
 800470a:	024a      	lsls	r2, r1, #9
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004712:	2200      	movs	r2, #0
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
 8004716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800471c:	f7fb fda8 	bl	8000270 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4613      	mov	r3, r2
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	e058      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472a:	4b38      	ldr	r3, [pc, #224]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	2200      	movs	r2, #0
 8004732:	4618      	mov	r0, r3
 8004734:	4611      	mov	r1, r2
 8004736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	f04f 0000 	mov.w	r0, #0
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	0159      	lsls	r1, r3, #5
 8004752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004756:	0150      	lsls	r0, r2, #5
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4641      	mov	r1, r8
 800475e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004762:	4649      	mov	r1, r9
 8004764:	eb63 0b01 	sbc.w	fp, r3, r1
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800477c:	ebb2 040a 	subs.w	r4, r2, sl
 8004780:	eb63 050b 	sbc.w	r5, r3, fp
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	00eb      	lsls	r3, r5, #3
 800478e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004792:	00e2      	lsls	r2, r4, #3
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	4643      	mov	r3, r8
 800479a:	18e3      	adds	r3, r4, r3
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	464b      	mov	r3, r9
 80047a0:	eb45 0303 	adc.w	r3, r5, r3
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047b2:	4629      	mov	r1, r5
 80047b4:	028b      	lsls	r3, r1, #10
 80047b6:	4621      	mov	r1, r4
 80047b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047bc:	4621      	mov	r1, r4
 80047be:	028a      	lsls	r2, r1, #10
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c6:	2200      	movs	r2, #0
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	61fa      	str	r2, [r7, #28]
 80047cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d0:	f7fb fd4e 	bl	8000270 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4613      	mov	r3, r2
 80047da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCC_GetSysClockFreq+0x200>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f6:	e002      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetSysClockFreq+0x204>)
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004800:	4618      	mov	r0, r3
 8004802:	3750      	adds	r7, #80	; 0x50
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	00f42400 	.word	0x00f42400
 8004814:	007a1200 	.word	0x007a1200

08004818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_RCC_GetHCLKFreq+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000000 	.word	0x20000000

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004834:	f7ff fff0 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0a9b      	lsrs	r3, r3, #10
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	0800b044 	.word	0x0800b044

08004858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800485c:	f7ff ffdc 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0b5b      	lsrs	r3, r3, #13
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	; (800487c <HAL_RCC_GetPCLK2Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	0800b044 	.word	0x0800b044

08004880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	220f      	movs	r2, #15
 800488e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0203 	and.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	08db      	lsrs	r3, r3, #3
 80048ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_RCC_GetClockConfig+0x60>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0207 	and.w	r2, r3, #7
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e01c      	b.n	8004930 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	795b      	ldrb	r3, [r3, #5]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc fa20 	bl	8000d4c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0204 	orr.w	r2, r2, #4
 8004920:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_RNG_GenerateRandomNumber+0x1a>
 800494e:	2302      	movs	r3, #2
 8004950:	e044      	b.n	80049dc <HAL_RNG_GenerateRandomNumber+0xa4>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	795b      	ldrb	r3, [r3, #5]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d133      	bne.n	80049ca <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004968:	f7fd f994 	bl	8001c94 <HAL_GetTick>
 800496c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800496e:	e018      	b.n	80049a2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004970:	f7fd f990 	bl	8001c94 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d911      	bls.n	80049a2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d00a      	beq.n	80049a2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e01c      	b.n	80049dc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d1df      	bne.n	8004970 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	715a      	strb	r2, [r3, #5]
 80049c8:	e004      	b.n	80049d4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2204      	movs	r2, #4
 80049ce:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	711a      	strb	r2, [r3, #4]

  return status;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d105      	bne.n	8004a0a <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2210      	movs	r2, #16
 8004a02:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004a04:	2301      	movs	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e00b      	b.n	8004a22 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b40      	cmp	r3, #64	; 0x40
 8004a16:	d104      	bne.n	8004a22 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d10b      	bne.n	8004a40 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f839 	bl	8004aa6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004a3c:	605a      	str	r2, [r3, #4]

    return;
 8004a3e:	e024      	b.n	8004a8a <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d11d      	bne.n	8004a8a <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0208 	bic.w	r2, r2, #8
 8004a5c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	795b      	ldrb	r3, [r3, #5]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d00b      	beq.n	8004a8a <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f803 	bl	8004a90 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e041      	b.n	8004b50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f839 	bl	8004b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 f9d7 	bl	8004eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d001      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e04e      	b.n	8004c22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d022      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bae:	d01d      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x80>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d111      	bne.n	8004c10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d010      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	e007      	b.n	8004c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	40010400 	.word	0x40010400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40001800 	.word	0x40001800

08004c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0202 	mvn.w	r2, #2
 8004c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8ee 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8e0 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8f1 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0204 	mvn.w	r2, #4
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8c4 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8b6 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f8c7 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d122      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d11b      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0208 	mvn.w	r2, #8
 8004d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2204      	movs	r2, #4
 8004d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f89a 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f88c 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f89d 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0210 	mvn.w	r2, #16
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f870 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f862 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f873 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d10e      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0201 	mvn.w	r2, #1
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fb ff92 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b80      	cmp	r3, #128	; 0x80
 8004ddc:	d10e      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d107      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f902 	bl	8005000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f838 	bl	8004e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d10e      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d107      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0220 	mvn.w	r2, #32
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8cc 	bl	8004fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e54:	bf00      	nop
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <TIM_Base_SetConfig+0x114>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d00f      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3d      	ldr	r2, [pc, #244]	; (8004fc4 <TIM_Base_SetConfig+0x118>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3c      	ldr	r2, [pc, #240]	; (8004fc8 <TIM_Base_SetConfig+0x11c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3b      	ldr	r2, [pc, #236]	; (8004fcc <TIM_Base_SetConfig+0x120>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a3a      	ldr	r2, [pc, #232]	; (8004fd0 <TIM_Base_SetConfig+0x124>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d108      	bne.n	8004efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2f      	ldr	r2, [pc, #188]	; (8004fc0 <TIM_Base_SetConfig+0x114>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0c:	d027      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <TIM_Base_SetConfig+0x118>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d023      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <TIM_Base_SetConfig+0x11c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01f      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <TIM_Base_SetConfig+0x120>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a29      	ldr	r2, [pc, #164]	; (8004fd0 <TIM_Base_SetConfig+0x124>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d017      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <TIM_Base_SetConfig+0x128>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a27      	ldr	r2, [pc, #156]	; (8004fd8 <TIM_Base_SetConfig+0x12c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a26      	ldr	r2, [pc, #152]	; (8004fdc <TIM_Base_SetConfig+0x130>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <TIM_Base_SetConfig+0x134>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a24      	ldr	r2, [pc, #144]	; (8004fe4 <TIM_Base_SetConfig+0x138>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <TIM_Base_SetConfig+0x13c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <TIM_Base_SetConfig+0x114>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_Base_SetConfig+0xf8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <TIM_Base_SetConfig+0x124>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d103      	bne.n	8004fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	615a      	str	r2, [r3, #20]
}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40010400 	.word	0x40010400
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800
 8004fe0:	40001800 	.word	0x40001800
 8004fe4:	40001c00 	.word	0x40001c00
 8004fe8:	40002000 	.word	0x40002000

08004fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e03f      	b.n	80050a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fc f868 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	; 0x24
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fd7b 	bl	8005b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800506c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800507c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800508c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08a      	sub	sp, #40	; 0x28
 80050b2:	af02      	add	r7, sp, #8
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d17c      	bne.n	80051c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_UART_Transmit+0x2c>
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e075      	b.n	80051ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_UART_Transmit+0x3e>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e06e      	b.n	80051ca <HAL_UART_Transmit+0x11c>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2221      	movs	r2, #33	; 0x21
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005102:	f7fc fdc7 	bl	8001c94 <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	88fa      	ldrh	r2, [r7, #6]
 8005112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511c:	d108      	bne.n	8005130 <HAL_UART_Transmit+0x82>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e003      	b.n	8005138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005140:	e02a      	b.n	8005198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2200      	movs	r2, #0
 800514a:	2180      	movs	r1, #128	; 0x80
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 faf9 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e036      	b.n	80051ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3302      	adds	r3, #2
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e007      	b.n	800518a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1cf      	bne.n	8005142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2200      	movs	r2, #0
 80051aa:	2140      	movs	r1, #64	; 0x40
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fac9 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e006      	b.n	80051ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0ba      	sub	sp, #232	; 0xe8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005200:	2300      	movs	r3, #0
 8005202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_UART_IRQHandler+0x66>
 8005226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fbd3 	bl	80059de <UART_Receive_IT>
      return;
 8005238:	e256      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800523a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80de 	beq.w	8005400 <HAL_UART_IRQHandler+0x22c>
 8005244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005254:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80d1 	beq.w	8005400 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <HAL_UART_IRQHandler+0xae>
 800526a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0201 	orr.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <HAL_UART_IRQHandler+0xd2>
 800528e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_UART_IRQHandler+0xf6>
 80052b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f043 0204 	orr.w	r2, r3, #4
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d011      	beq.n	80052fa <HAL_UART_IRQHandler+0x126>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d105      	bne.n	80052ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f043 0208 	orr.w	r2, r3, #8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 81ed 	beq.w	80056de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_UART_IRQHandler+0x14e>
 8005310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fb5e 	bl	80059de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <HAL_UART_IRQHandler+0x17a>
 8005346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d04f      	beq.n	80053ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa66 	bl	8005820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d141      	bne.n	80053e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800537c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3314      	adds	r3, #20
 800538a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800538e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800539a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d9      	bne.n	8005362 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	4a7d      	ldr	r2, [pc, #500]	; (80055b0 <HAL_UART_IRQHandler+0x3dc>)
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe f96a 	bl	800369c <HAL_DMA_Abort_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	e00e      	b.n	80053fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f99a 	bl	8005718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	e00a      	b.n	80053fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f996 	bl	8005718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	e006      	b.n	80053fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f992 	bl	8005718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053fa:	e170      	b.n	80056de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	bf00      	nop
    return;
 80053fe:	e16e      	b.n	80056de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	2b01      	cmp	r3, #1
 8005406:	f040 814a 	bne.w	800569e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8143 	beq.w	800569e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 813c 	beq.w	800569e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	f040 80b4 	bne.w	80055b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8140 	beq.w	80056e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800546a:	429a      	cmp	r2, r3
 800546c:	f080 8139 	bcs.w	80056e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005476:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	f000 8088 	beq.w	8005596 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800549c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1d9      	bne.n	8005486 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3314      	adds	r3, #20
 80054d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e1      	bne.n	80054d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800551e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005532:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005534:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e3      	bne.n	800550e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005566:	f023 0310 	bic.w	r3, r3, #16
 800556a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005578:	65ba      	str	r2, [r7, #88]	; 0x58
 800557a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800557e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e3      	bne.n	8005554 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe f813 	bl	80035bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8c0 	bl	800572c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055ac:	e099      	b.n	80056e2 <HAL_UART_IRQHandler+0x50e>
 80055ae:	bf00      	nop
 80055b0:	080058e7 	.word	0x080058e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 808b 	beq.w	80056e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8086 	beq.w	80056e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	623b      	str	r3, [r7, #32]
   return(result);
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005636:	633a      	str	r2, [r7, #48]	; 0x30
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60fb      	str	r3, [r7, #12]
   return(result);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e3      	bne.n	8005658 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f848 	bl	800572c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800569c:	e023      	b.n	80056e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800569e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_UART_IRQHandler+0x4ea>
 80056aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f929 	bl	800590e <UART_Transmit_IT>
    return;
 80056bc:	e014      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <HAL_UART_IRQHandler+0x514>
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f969 	bl	80059ae <UART_EndTransmit_IT>
    return;
 80056dc:	e004      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
    return;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
      return;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
      return;
 80056e6:	bf00      	nop
  }
}
 80056e8:	37e8      	adds	r7, #232	; 0xe8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop

080056f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005754:	e050      	b.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d04c      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800575e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <UART_WaitOnFlagUntilTimeout+0x30>
 8005764:	f7fc fa96 	bl	8001c94 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005770:	429a      	cmp	r2, r3
 8005772:	d241      	bcs.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005794:	637a      	str	r2, [r7, #52]	; 0x34
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800579a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	613b      	str	r3, [r7, #16]
   return(result);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057c8:	623a      	str	r2, [r7, #32]
 80057ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69f9      	ldr	r1, [r7, #28]
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e00f      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4013      	ands	r3, r2
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	429a      	cmp	r2, r3
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	429a      	cmp	r2, r3
 8005814:	d09f      	beq.n	8005756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3740      	adds	r7, #64	; 0x40
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b095      	sub	sp, #84	; 0x54
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005848:	643a      	str	r2, [r7, #64]	; 0x40
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800584e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3314      	adds	r3, #20
 8005862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	61fb      	str	r3, [r7, #28]
   return(result);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	d119      	bne.n	80058cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0310 	bic.w	r3, r3, #16
 80058ae:	647b      	str	r3, [r7, #68]	; 0x44
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b8:	61ba      	str	r2, [r7, #24]
 80058ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6979      	ldr	r1, [r7, #20]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058da:	bf00      	nop
 80058dc:	3754      	adds	r7, #84	; 0x54
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff ff09 	bl	8005718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b21      	cmp	r3, #33	; 0x21
 8005920:	d13e      	bne.n	80059a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592a:	d114      	bne.n	8005956 <UART_Transmit_IT+0x48>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d110      	bne.n	8005956 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]
 8005954:	e008      	b.n	8005968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6211      	str	r1, [r2, #32]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29b      	uxth	r3, r3
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4619      	mov	r1, r3
 8005976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10f      	bne.n	800599c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800598a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800599a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e000      	b.n	80059a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fe8e 	bl	80056f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b08c      	sub	sp, #48	; 0x30
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b22      	cmp	r3, #34	; 0x22
 80059f0:	f040 80ab 	bne.w	8005b4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fc:	d117      	bne.n	8005a2e <UART_Receive_IT+0x50>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d113      	bne.n	8005a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a2c:	e026      	b.n	8005a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a40:	d007      	beq.n	8005a52 <UART_Receive_IT+0x74>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <UART_Receive_IT+0x82>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	e008      	b.n	8005a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d15a      	bne.n	8005b46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0220 	bic.w	r2, r2, #32
 8005a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d135      	bne.n	8005b3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f023 0310 	bic.w	r3, r3, #16
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	330c      	adds	r3, #12
 8005af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af6:	623a      	str	r2, [r7, #32]
 8005af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	69f9      	ldr	r1, [r7, #28]
 8005afc:	6a3a      	ldr	r2, [r7, #32]
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e5      	bne.n	8005ad6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d10a      	bne.n	8005b2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fdf9 	bl	800572c <HAL_UARTEx_RxEventCallback>
 8005b3a:	e002      	b.n	8005b42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fde1 	bl	8005704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e002      	b.n	8005b4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e000      	b.n	8005b4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b4a:	2302      	movs	r3, #2
  }
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3730      	adds	r7, #48	; 0x30
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b58:	b0c0      	sub	sp, #256	; 0x100
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	ea40 0301 	orr.w	r3, r0, r1
 8005b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bac:	f021 010c 	bic.w	r1, r1, #12
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	6999      	ldr	r1, [r3, #24]
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	ea40 0301 	orr.w	r3, r0, r1
 8005bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b8f      	ldr	r3, [pc, #572]	; (8005e20 <UART_SetConfig+0x2cc>)
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d005      	beq.n	8005bf4 <UART_SetConfig+0xa0>
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b8d      	ldr	r3, [pc, #564]	; (8005e24 <UART_SetConfig+0x2d0>)
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d104      	bne.n	8005bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bf4:	f7fe fe30 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 8005bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bfc:	e003      	b.n	8005c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bfe:	f7fe fe17 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8005c02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c10:	f040 810c 	bne.w	8005e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c26:	4622      	mov	r2, r4
 8005c28:	462b      	mov	r3, r5
 8005c2a:	1891      	adds	r1, r2, r2
 8005c2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c2e:	415b      	adcs	r3, r3
 8005c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c36:	4621      	mov	r1, r4
 8005c38:	eb12 0801 	adds.w	r8, r2, r1
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	eb43 0901 	adc.w	r9, r3, r1
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c56:	4690      	mov	r8, r2
 8005c58:	4699      	mov	r9, r3
 8005c5a:	4623      	mov	r3, r4
 8005c5c:	eb18 0303 	adds.w	r3, r8, r3
 8005c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c64:	462b      	mov	r3, r5
 8005c66:	eb49 0303 	adc.w	r3, r9, r3
 8005c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c82:	460b      	mov	r3, r1
 8005c84:	18db      	adds	r3, r3, r3
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
 8005c88:	4613      	mov	r3, r2
 8005c8a:	eb42 0303 	adc.w	r3, r2, r3
 8005c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c98:	f7fa faea 	bl	8000270 <__aeabi_uldivmod>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	011c      	lsls	r4, r3, #4
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	1891      	adds	r1, r2, r2
 8005cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cc4:	415b      	adcs	r3, r3
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ccc:	4641      	mov	r1, r8
 8005cce:	eb12 0a01 	adds.w	sl, r2, r1
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cec:	4692      	mov	sl, r2
 8005cee:	469b      	mov	fp, r3
 8005cf0:	4643      	mov	r3, r8
 8005cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8005cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8005d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	18db      	adds	r3, r3, r3
 8005d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d1e:	4613      	mov	r3, r2
 8005d20:	eb42 0303 	adc.w	r3, r2, r3
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d2e:	f7fa fa9f 	bl	8000270 <__aeabi_uldivmod>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4611      	mov	r1, r2
 8005d38:	4b3b      	ldr	r3, [pc, #236]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	2264      	movs	r2, #100	; 0x64
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	1acb      	subs	r3, r1, r3
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d4e:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005d50:	fba3 2302 	umull	r2, r3, r3, r2
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d5c:	441c      	add	r4, r3
 8005d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	1891      	adds	r1, r2, r2
 8005d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d78:	415b      	adcs	r3, r3
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d80:	4641      	mov	r1, r8
 8005d82:	1851      	adds	r1, r2, r1
 8005d84:	6339      	str	r1, [r7, #48]	; 0x30
 8005d86:	4649      	mov	r1, r9
 8005d88:	414b      	adcs	r3, r1
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d98:	4659      	mov	r1, fp
 8005d9a:	00cb      	lsls	r3, r1, #3
 8005d9c:	4651      	mov	r1, sl
 8005d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005da2:	4651      	mov	r1, sl
 8005da4:	00ca      	lsls	r2, r1, #3
 8005da6:	4610      	mov	r0, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	4642      	mov	r2, r8
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db4:	464b      	mov	r3, r9
 8005db6:	460a      	mov	r2, r1
 8005db8:	eb42 0303 	adc.w	r3, r2, r3
 8005dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	18db      	adds	r3, r3, r3
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dda:	4613      	mov	r3, r2
 8005ddc:	eb42 0303 	adc.w	r3, r2, r3
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dea:	f7fa fa41 	bl	8000270 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2164      	movs	r1, #100	; 0x64
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f003 0207 	and.w	r2, r3, #7
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4422      	add	r2, r4
 8005e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e1c:	e105      	b.n	800602a <UART_SetConfig+0x4d6>
 8005e1e:	bf00      	nop
 8005e20:	40011000 	.word	0x40011000
 8005e24:	40011400 	.word	0x40011400
 8005e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e3e:	4642      	mov	r2, r8
 8005e40:	464b      	mov	r3, r9
 8005e42:	1891      	adds	r1, r2, r2
 8005e44:	6239      	str	r1, [r7, #32]
 8005e46:	415b      	adcs	r3, r3
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e4e:	4641      	mov	r1, r8
 8005e50:	1854      	adds	r4, r2, r1
 8005e52:	4649      	mov	r1, r9
 8005e54:	eb43 0501 	adc.w	r5, r3, r1
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	00eb      	lsls	r3, r5, #3
 8005e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e66:	00e2      	lsls	r2, r4, #3
 8005e68:	4614      	mov	r4, r2
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	4643      	mov	r3, r8
 8005e6e:	18e3      	adds	r3, r4, r3
 8005e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e74:	464b      	mov	r3, r9
 8005e76:	eb45 0303 	adc.w	r3, r5, r3
 8005e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	008b      	lsls	r3, r1, #2
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	008a      	lsls	r2, r1, #2
 8005ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005eac:	f7fa f9e0 	bl	8000270 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4b60      	ldr	r3, [pc, #384]	; (8006038 <UART_SetConfig+0x4e4>)
 8005eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	011c      	lsls	r4, r3, #4
 8005ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	1891      	adds	r1, r2, r2
 8005ed6:	61b9      	str	r1, [r7, #24]
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	1851      	adds	r1, r2, r1
 8005ee4:	6139      	str	r1, [r7, #16]
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	414b      	adcs	r3, r1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ef8:	4659      	mov	r1, fp
 8005efa:	00cb      	lsls	r3, r1, #3
 8005efc:	4651      	mov	r1, sl
 8005efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f02:	4651      	mov	r1, sl
 8005f04:	00ca      	lsls	r2, r1, #3
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	189b      	adds	r3, r3, r2
 8005f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f14:	464b      	mov	r3, r9
 8005f16:	460a      	mov	r2, r1
 8005f18:	eb42 0303 	adc.w	r3, r2, r3
 8005f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f38:	4649      	mov	r1, r9
 8005f3a:	008b      	lsls	r3, r1, #2
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f42:	4641      	mov	r1, r8
 8005f44:	008a      	lsls	r2, r1, #2
 8005f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f4a:	f7fa f991 	bl	8000270 <__aeabi_uldivmod>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4b39      	ldr	r3, [pc, #228]	; (8006038 <UART_SetConfig+0x4e4>)
 8005f54:	fba3 1302 	umull	r1, r3, r3, r2
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	2164      	movs	r1, #100	; 0x64
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	3332      	adds	r3, #50	; 0x32
 8005f66:	4a34      	ldr	r2, [pc, #208]	; (8006038 <UART_SetConfig+0x4e4>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f72:	441c      	add	r4, r3
 8005f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f78:	2200      	movs	r2, #0
 8005f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f82:	4642      	mov	r2, r8
 8005f84:	464b      	mov	r3, r9
 8005f86:	1891      	adds	r1, r2, r2
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	415b      	adcs	r3, r3
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f92:	4641      	mov	r1, r8
 8005f94:	1851      	adds	r1, r2, r1
 8005f96:	6039      	str	r1, [r7, #0]
 8005f98:	4649      	mov	r1, r9
 8005f9a:	414b      	adcs	r3, r1
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005faa:	4659      	mov	r1, fp
 8005fac:	00cb      	lsls	r3, r1, #3
 8005fae:	4651      	mov	r1, sl
 8005fb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb4:	4651      	mov	r1, sl
 8005fb6:	00ca      	lsls	r2, r1, #3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	189b      	adds	r3, r3, r2
 8005fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	eb42 0303 	adc.w	r3, r2, r3
 8005fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd8:	667a      	str	r2, [r7, #100]	; 0x64
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	008b      	lsls	r3, r1, #2
 8005fea:	4641      	mov	r1, r8
 8005fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	008a      	lsls	r2, r1, #2
 8005ff4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ff8:	f7fa f93a 	bl	8000270 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <UART_SetConfig+0x4e4>)
 8006002:	fba3 1302 	umull	r1, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	2164      	movs	r1, #100	; 0x64
 800600a:	fb01 f303 	mul.w	r3, r1, r3
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	3332      	adds	r3, #50	; 0x32
 8006014:	4a08      	ldr	r2, [pc, #32]	; (8006038 <UART_SetConfig+0x4e4>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	f003 020f 	and.w	r2, r3, #15
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4422      	add	r2, r4
 8006028:	609a      	str	r2, [r3, #8]
}
 800602a:	bf00      	nop
 800602c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006030:	46bd      	mov	sp, r7
 8006032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006036:	bf00      	nop
 8006038:	51eb851f 	.word	0x51eb851f

0800603c <__NVIC_SetPriority>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	6039      	str	r1, [r7, #0]
 8006046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604c:	2b00      	cmp	r3, #0
 800604e:	db0a      	blt.n	8006066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	b2da      	uxtb	r2, r3
 8006054:	490c      	ldr	r1, [pc, #48]	; (8006088 <__NVIC_SetPriority+0x4c>)
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	0112      	lsls	r2, r2, #4
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	440b      	add	r3, r1
 8006060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006064:	e00a      	b.n	800607c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	4908      	ldr	r1, [pc, #32]	; (800608c <__NVIC_SetPriority+0x50>)
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	3b04      	subs	r3, #4
 8006074:	0112      	lsls	r2, r2, #4
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	440b      	add	r3, r1
 800607a:	761a      	strb	r2, [r3, #24]
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	e000e100 	.word	0xe000e100
 800608c:	e000ed00 	.word	0xe000ed00

08006090 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <SysTick_Handler+0x1c>)
 8006096:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006098:	f002 fbce 	bl	8008838 <xTaskGetSchedulerState>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d001      	beq.n	80060a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80060a2:	f003 fae9 	bl	8009678 <xPortSysTickHandler>
  }
}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	e000e010 	.word	0xe000e010

080060b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060b4:	2100      	movs	r1, #0
 80060b6:	f06f 0004 	mvn.w	r0, #4
 80060ba:	f7ff ffbf 	bl	800603c <__NVIC_SetPriority>
#endif
}
 80060be:	bf00      	nop
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ca:	f3ef 8305 	mrs	r3, IPSR
 80060ce:	603b      	str	r3, [r7, #0]
  return(result);
 80060d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060d6:	f06f 0305 	mvn.w	r3, #5
 80060da:	607b      	str	r3, [r7, #4]
 80060dc:	e00c      	b.n	80060f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060de:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <osKernelInitialize+0x44>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d105      	bne.n	80060f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060e6:	4b08      	ldr	r3, [pc, #32]	; (8006108 <osKernelInitialize+0x44>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	e002      	b.n	80060f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
 80060f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060f8:	687b      	ldr	r3, [r7, #4]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	200002cc 	.word	0x200002cc

0800610c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006112:	f3ef 8305 	mrs	r3, IPSR
 8006116:	603b      	str	r3, [r7, #0]
  return(result);
 8006118:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <osKernelStart+0x1a>
    stat = osErrorISR;
 800611e:	f06f 0305 	mvn.w	r3, #5
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	e010      	b.n	8006148 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <osKernelStart+0x48>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d109      	bne.n	8006142 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800612e:	f7ff ffbf 	bl	80060b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <osKernelStart+0x48>)
 8006134:	2202      	movs	r2, #2
 8006136:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006138:	f001 fe74 	bl	8007e24 <vTaskStartScheduler>
      stat = osOK;
 800613c:	2300      	movs	r3, #0
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	e002      	b.n	8006148 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006142:	f04f 33ff 	mov.w	r3, #4294967295
 8006146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006148:	687b      	ldr	r3, [r7, #4]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200002cc 	.word	0x200002cc

08006158 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	; 0x38
 800615c:	af04      	add	r7, sp, #16
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006168:	f3ef 8305 	mrs	r3, IPSR
 800616c:	617b      	str	r3, [r7, #20]
  return(result);
 800616e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006170:	2b00      	cmp	r3, #0
 8006172:	d17e      	bne.n	8006272 <osThreadNew+0x11a>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d07b      	beq.n	8006272 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800617e:	2318      	movs	r3, #24
 8006180:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006186:	f04f 33ff 	mov.w	r3, #4294967295
 800618a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d045      	beq.n	800621e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <osThreadNew+0x48>
        name = attr->name;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <osThreadNew+0x6e>
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b38      	cmp	r3, #56	; 0x38
 80061b8:	d805      	bhi.n	80061c6 <osThreadNew+0x6e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <osThreadNew+0x72>
        return (NULL);
 80061c6:	2300      	movs	r3, #0
 80061c8:	e054      	b.n	8006274 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	089b      	lsrs	r3, r3, #2
 80061d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00e      	beq.n	8006200 <osThreadNew+0xa8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2bbb      	cmp	r3, #187	; 0xbb
 80061e8:	d90a      	bls.n	8006200 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d006      	beq.n	8006200 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <osThreadNew+0xa8>
        mem = 1;
 80061fa:	2301      	movs	r3, #1
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	e010      	b.n	8006222 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10c      	bne.n	8006222 <osThreadNew+0xca>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d108      	bne.n	8006222 <osThreadNew+0xca>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <osThreadNew+0xca>
          mem = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	e001      	b.n	8006222 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d110      	bne.n	800624a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f001 fc04 	bl	8007a4c <xTaskCreateStatic>
 8006244:	4603      	mov	r3, r0
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	e013      	b.n	8006272 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d110      	bne.n	8006272 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	b29a      	uxth	r2, r3
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f001 fc4f 	bl	8007b06 <xTaskCreate>
 8006268:	4603      	mov	r3, r0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d001      	beq.n	8006272 <osThreadNew+0x11a>
            hTask = NULL;
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006272:	693b      	ldr	r3, [r7, #16]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3728      	adds	r7, #40	; 0x28
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006284:	f3ef 8305 	mrs	r3, IPSR
 8006288:	60bb      	str	r3, [r7, #8]
  return(result);
 800628a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <osDelay+0x1c>
    stat = osErrorISR;
 8006290:	f06f 0305 	mvn.w	r3, #5
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e007      	b.n	80062a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fd8a 	bl	8007dbc <vTaskDelay>
    }
  }

  return (stat);
 80062a8:	68fb      	ldr	r3, [r7, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062be:	f3ef 8305 	mrs	r3, IPSR
 80062c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80062c4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d12d      	bne.n	8006326 <osEventFlagsNew+0x74>
    mem = -1;
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d015      	beq.n	8006302 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d006      	beq.n	80062ec <osEventFlagsNew+0x3a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2b1f      	cmp	r3, #31
 80062e4:	d902      	bls.n	80062ec <osEventFlagsNew+0x3a>
        mem = 1;
 80062e6:	2301      	movs	r3, #1
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	e00c      	b.n	8006306 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d108      	bne.n	8006306 <osEventFlagsNew+0x54>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <osEventFlagsNew+0x54>
          mem = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	e001      	b.n	8006306 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d106      	bne.n	800631a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 f9f9 	bl	8006708 <xEventGroupCreateStatic>
 8006316:	6178      	str	r0, [r7, #20]
 8006318:	e005      	b.n	8006326 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006320:	f000 fa29 	bl	8006776 <xEventGroupCreate>
 8006324:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006326:	697b      	ldr	r3, [r7, #20]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <osEventFlagsSet+0x1e>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800634e:	f06f 0303 	mvn.w	r3, #3
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e028      	b.n	80063a8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006356:	f3ef 8305 	mrs	r3, IPSR
 800635a:	60fb      	str	r3, [r7, #12]
  return(result);
 800635c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01d      	beq.n	800639e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006366:	f107 0308 	add.w	r3, r7, #8
 800636a:	461a      	mov	r2, r3
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6938      	ldr	r0, [r7, #16]
 8006370:	f000 fba4 	bl	8006abc <xEventGroupSetBitsFromISR>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800637a:	f06f 0302 	mvn.w	r3, #2
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e012      	b.n	80063a8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00d      	beq.n	80063a8 <osEventFlagsSet+0x78>
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <osEventFlagsSet+0x84>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	e004      	b.n	80063a8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6938      	ldr	r0, [r7, #16]
 80063a2:	f000 fad1 	bl	8006948 <xEventGroupSetBits>
 80063a6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80063a8:	697b      	ldr	r3, [r7, #20]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	; 0x30
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <osEventFlagsWait+0x22>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80063da:	f06f 0303 	mvn.w	r3, #3
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	e04b      	b.n	800647a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e2:	f3ef 8305 	mrs	r3, IPSR
 80063e6:	617b      	str	r3, [r7, #20]
  return(result);
 80063e8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80063ee:	f06f 0305 	mvn.w	r3, #5
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	e041      	b.n	800647a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
 8006404:	e001      	b.n	800640a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006406:	2300      	movs	r3, #0
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006414:	2300      	movs	r3, #0
 8006416:	623b      	str	r3, [r7, #32]
 8006418:	e001      	b.n	800641e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800641a:	2301      	movs	r3, #1
 800641c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	69b8      	ldr	r0, [r7, #24]
 800642a:	f000 f9bf 	bl	80067ac <xEventGroupWaitBits>
 800642e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d010      	beq.n	800645c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4013      	ands	r3, r2
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	d019      	beq.n	800647a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800644c:	f06f 0301 	mvn.w	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e012      	b.n	800647a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006454:	f06f 0302 	mvn.w	r3, #2
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	e00e      	b.n	800647a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4013      	ands	r3, r2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800646c:	f06f 0301 	mvn.w	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	e002      	b.n	800647a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006474:	f06f 0302 	mvn.w	r3, #2
 8006478:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800647a:	69fb      	ldr	r3, [r7, #28]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3728      	adds	r7, #40	; 0x28
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800648c:	2300      	movs	r3, #0
 800648e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006490:	f3ef 8305 	mrs	r3, IPSR
 8006494:	60bb      	str	r3, [r7, #8]
  return(result);
 8006496:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006498:	2b00      	cmp	r3, #0
 800649a:	d174      	bne.n	8006586 <osMutexNew+0x102>
    if (attr != NULL) {
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <osMutexNew+0x26>
      type = attr->attr_bits;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	e001      	b.n	80064ae <osMutexNew+0x2a>
    } else {
      type = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <osMutexNew+0x3a>
      rmtx = 1U;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e001      	b.n	80064c2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d15c      	bne.n	8006586 <osMutexNew+0x102>
      mem = -1;
 80064cc:	f04f 33ff 	mov.w	r3, #4294967295
 80064d0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <osMutexNew+0x6a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b4f      	cmp	r3, #79	; 0x4f
 80064e6:	d902      	bls.n	80064ee <osMutexNew+0x6a>
          mem = 1;
 80064e8:	2301      	movs	r3, #1
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	e00c      	b.n	8006508 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <osMutexNew+0x84>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <osMutexNew+0x84>
            mem = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e001      	b.n	8006508 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d112      	bne.n	8006534 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4619      	mov	r1, r3
 800651a:	2004      	movs	r0, #4
 800651c:	f000 fd05 	bl	8006f2a <xQueueCreateMutexStatic>
 8006520:	61f8      	str	r0, [r7, #28]
 8006522:	e016      	b.n	8006552 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	4619      	mov	r1, r3
 800652a:	2001      	movs	r0, #1
 800652c:	f000 fcfd 	bl	8006f2a <xQueueCreateMutexStatic>
 8006530:	61f8      	str	r0, [r7, #28]
 8006532:	e00e      	b.n	8006552 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006540:	2004      	movs	r0, #4
 8006542:	f000 fcda 	bl	8006efa <xQueueCreateMutex>
 8006546:	61f8      	str	r0, [r7, #28]
 8006548:	e003      	b.n	8006552 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800654a:	2001      	movs	r0, #1
 800654c:	f000 fcd5 	bl	8006efa <xQueueCreateMutex>
 8006550:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00c      	beq.n	8006572 <osMutexNew+0xee>
        if (attr != NULL) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <osMutexNew+0xe2>
          name = attr->name;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e001      	b.n	800656a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	69f8      	ldr	r0, [r7, #28]
 800656e:	f001 fa0f 	bl	8007990 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d006      	beq.n	8006586 <osMutexNew+0x102>
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006586:	69fb      	ldr	r3, [r7, #28]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ae:	f3ef 8305 	mrs	r3, IPSR
 80065b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80065b4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80065ba:	f06f 0305 	mvn.w	r3, #5
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e02c      	b.n	800661c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80065c8:	f06f 0303 	mvn.w	r3, #3
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	e025      	b.n	800661c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d011      	beq.n	80065fa <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f000 fcf5 	bl	8006fc8 <xQueueTakeMutexRecursive>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d01b      	beq.n	800661c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80065ea:	f06f 0301 	mvn.w	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e014      	b.n	800661c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80065f2:	f06f 0302 	mvn.w	r3, #2
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e010      	b.n	800661c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6938      	ldr	r0, [r7, #16]
 80065fe:	f000 ff93 	bl	8007528 <xQueueSemaphoreTake>
 8006602:	4603      	mov	r3, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d009      	beq.n	800661c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800660e:	f06f 0301 	mvn.w	r3, #1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	e002      	b.n	800661c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006616:	f06f 0302 	mvn.w	r3, #2
 800661a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800661c:	697b      	ldr	r3, [r7, #20]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006642:	f3ef 8305 	mrs	r3, IPSR
 8006646:	60bb      	str	r3, [r7, #8]
  return(result);
 8006648:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <osMutexRelease+0x30>
    stat = osErrorISR;
 800664e:	f06f 0305 	mvn.w	r3, #5
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e01f      	b.n	8006696 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800665c:	f06f 0303 	mvn.w	r3, #3
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e018      	b.n	8006696 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 fc78 	bl	8006f60 <xQueueGiveMutexRecursive>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d00f      	beq.n	8006696 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006676:	f06f 0302 	mvn.w	r3, #2
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e00b      	b.n	8006696 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800667e:	2300      	movs	r3, #0
 8006680:	2200      	movs	r2, #0
 8006682:	2100      	movs	r1, #0
 8006684:	6938      	ldr	r0, [r7, #16]
 8006686:	f000 fcd5 	bl	8007034 <xQueueGenericSend>
 800668a:	4603      	mov	r3, r0
 800668c:	2b01      	cmp	r3, #1
 800668e:	d002      	beq.n	8006696 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006690:	f06f 0302 	mvn.w	r3, #2
 8006694:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006696:	697b      	ldr	r3, [r7, #20]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a07      	ldr	r2, [pc, #28]	; (80066cc <vApplicationGetIdleTaskMemory+0x2c>)
 80066b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4a06      	ldr	r2, [pc, #24]	; (80066d0 <vApplicationGetIdleTaskMemory+0x30>)
 80066b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2280      	movs	r2, #128	; 0x80
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	200002d0 	.word	0x200002d0
 80066d0:	2000038c 	.word	0x2000038c

080066d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a07      	ldr	r2, [pc, #28]	; (8006700 <vApplicationGetTimerTaskMemory+0x2c>)
 80066e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4a06      	ldr	r2, [pc, #24]	; (8006704 <vApplicationGetTimerTaskMemory+0x30>)
 80066ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066f2:	601a      	str	r2, [r3, #0]
}
 80066f4:	bf00      	nop
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	2000058c 	.word	0x2000058c
 8006704:	20000648 	.word	0x20000648

08006708 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006716:	f04f 0370 	mov.w	r3, #112	; 0x70
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800672c:	2320      	movs	r3, #32
 800672e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b20      	cmp	r3, #32
 8006734:	d00a      	beq.n	800674c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8006736:	f04f 0370 	mov.w	r3, #112	; 0x70
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f9bf 	bl	8006ae4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2201      	movs	r2, #1
 800676a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800676c:	697b      	ldr	r3, [r7, #20]
	}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800677c:	2020      	movs	r0, #32
 800677e:	f003 f80b 	bl	8009798 <pvPortMalloc>
 8006782:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f9a5 	bl	8006ae4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80067a0:	687b      	ldr	r3, [r7, #4]
	}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b090      	sub	sp, #64	; 0x40
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80067cc:	f04f 0370 	mov.w	r3, #112	; 0x70
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	623b      	str	r3, [r7, #32]
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <xEventGroupWaitBits+0x56>
	__asm volatile
 80067ec:	f04f 0370 	mov.w	r3, #112	; 0x70
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	61fb      	str	r3, [r7, #28]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xEventGroupWaitBits+0x72>
	__asm volatile
 8006808:	f04f 0370 	mov.w	r3, #112	; 0x70
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	61bb      	str	r3, [r7, #24]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800681e:	f002 f80b 	bl	8008838 <xTaskGetSchedulerState>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <xEventGroupWaitBits+0x82>
 8006828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <xEventGroupWaitBits+0x86>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xEventGroupWaitBits+0x88>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006838:	f04f 0370 	mov.w	r3, #112	; 0x70
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	617b      	str	r3, [r7, #20]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800684e:	f001 fb59 	bl	8007f04 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800685e:	f000 f90b 	bl	8006a78 <prvTestWaitCondition>
 8006862:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800686e:	2300      	movs	r3, #0
 8006870:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d028      	beq.n	80068ca <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	43db      	mvns	r3, r3
 8006880:	401a      	ands	r2, r3
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e020      	b.n	80068ca <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006892:	2301      	movs	r3, #1
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
 8006896:	e018      	b.n	80068ca <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068b2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	1d18      	adds	r0, r3, #4
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	4313      	orrs	r3, r2
 80068be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c0:	4619      	mov	r1, r3
 80068c2:	f001 fd1d 	bl	8008300 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80068ca:	f001 fb29 	bl	8007f20 <xTaskResumeAll>
 80068ce:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80068d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d031      	beq.n	800693a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d107      	bne.n	80068ec <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80068dc:	4b19      	ldr	r3, [pc, #100]	; (8006944 <xEventGroupWaitBits+0x198>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80068ec:	f002 f91a 	bl	8008b24 <uxTaskResetEventItemValue>
 80068f0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80068f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11a      	bne.n	8006932 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80068fc:	f002 fe2a 	bl	8009554 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800690c:	f000 f8b4 	bl	8006a78 <prvTestWaitCondition>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	43db      	mvns	r3, r3
 8006924:	401a      	ands	r2, r3
 8006926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006928:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800692e:	f002 fe41 	bl	80095b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006934:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800693c:	4618      	mov	r0, r3
 800693e:	3740      	adds	r7, #64	; 0x40
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	e000ed04 	.word	0xe000ed04

08006948 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08e      	sub	sp, #56	; 0x38
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006952:	2300      	movs	r3, #0
 8006954:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <xEventGroupSetBits+0x32>
	__asm volatile
 8006964:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	613b      	str	r3, [r7, #16]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <xEventGroupSetBits+0x52>
	__asm volatile
 8006984:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60fb      	str	r3, [r7, #12]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	3304      	adds	r3, #4
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	3308      	adds	r3, #8
 80069a4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80069a6:	f001 faad 	bl	8007f04 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80069bc:	e03c      	b.n	8006a38 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80069d4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069dc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d108      	bne.n	80069fa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f8:	e008      	b.n	8006a0c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	4013      	ands	r3, r2
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d101      	bne.n	8006a0c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d010      	beq.n	8006a34 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a30:	f001 fd32 	bl	8008498 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d1be      	bne.n	80069be <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	43db      	mvns	r3, r3
 8006a48:	401a      	ands	r2, r3
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006a4e:	f001 fa67 	bl	8007f20 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	681b      	ldr	r3, [r3, #0]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3738      	adds	r7, #56	; 0x38
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff ff6c 	bl	8006948 <xEventGroupSetBits>
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e007      	b.n	8006aae <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d101      	bne.n	8006aae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006aae:	697b      	ldr	r3, [r7, #20]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	68f9      	ldr	r1, [r7, #12]
 8006ace:	4804      	ldr	r0, [pc, #16]	; (8006ae0 <xEventGroupSetBitsFromISR+0x24>)
 8006ad0:	f002 fbf6 	bl	80092c0 <xTimerPendFunctionCallFromISR>
 8006ad4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006ad6:	697b      	ldr	r3, [r7, #20]
	}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	08006a5f 	.word	0x08006a5f

08006ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f103 0208 	add.w	r2, r3, #8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f04f 32ff 	mov.w	r2, #4294967295
 8006afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f103 0208 	add.w	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f103 0208 	add.w	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d103      	bne.n	8006ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e00c      	b.n	8006bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e002      	b.n	8006bb4 <vListInsert+0x2e>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d2f6      	bcs.n	8006bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	6892      	ldr	r2, [r2, #8]
 8006c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6852      	ldr	r2, [r2, #4]
 8006c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d103      	bne.n	8006c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	1e5a      	subs	r2, r3, #1
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <xQueueGenericReset+0x2a>
	__asm volatile
 8006c60:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60bb      	str	r3, [r7, #8]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c76:	f002 fc6d 	bl	8009554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	441a      	add	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	22ff      	movs	r2, #255	; 0xff
 8006cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22ff      	movs	r2, #255	; 0xff
 8006cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d114      	bne.n	8006cf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01a      	beq.n	8006d0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3310      	adds	r3, #16
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 fb79 	bl	80083d0 <xTaskRemoveFromEventList>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d012      	beq.n	8006d0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <xQueueGenericReset+0xcc>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	e009      	b.n	8006d0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fef2 	bl	8006ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff feed 	bl	8006ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d0a:	f002 fc53 	bl	80095b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d0e:	2301      	movs	r3, #1
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d30:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d4c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <xQueueGenericCreateStatic+0x52>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <xQueueGenericCreateStatic+0x56>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <xQueueGenericCreateStatic+0x58>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d78:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <xQueueGenericCreateStatic+0x7e>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <xQueueGenericCreateStatic+0x82>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <xQueueGenericCreateStatic+0x84>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006da4:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	61fb      	str	r3, [r7, #28]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dba:	2350      	movs	r3, #80	; 0x50
 8006dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b50      	cmp	r3, #80	; 0x50
 8006dc2:	d00a      	beq.n	8006dda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006dc4:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	61bb      	str	r3, [r7, #24]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00d      	beq.n	8006e02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	4613      	mov	r3, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f83f 	bl	8006e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3730      	adds	r7, #48	; 0x30
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	; 0x28
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006e20:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	fb02 f303 	mul.w	r3, r2, r3
 8006e3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3350      	adds	r3, #80	; 0x50
 8006e44:	4618      	mov	r0, r3
 8006e46:	f002 fca7 	bl	8009798 <pvPortMalloc>
 8006e4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d011      	beq.n	8006e76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	3350      	adds	r3, #80	; 0x50
 8006e5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e64:	79fa      	ldrb	r2, [r7, #7]
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f805 	bl	8006e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e76:	69bb      	ldr	r3, [r7, #24]
	}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	e002      	b.n	8006ea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006eae:	2101      	movs	r1, #1
 8006eb0:	69b8      	ldr	r0, [r7, #24]
 8006eb2:	f7ff fecb 	bl	8006c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00e      	beq.n	8006ef2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2100      	movs	r1, #0
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8a1 	bl	8007034 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	4603      	mov	r3, r0
 8006f02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6939      	ldr	r1, [r7, #16]
 8006f12:	6978      	ldr	r0, [r7, #20]
 8006f14:	f7ff ff7a 	bl	8006e0c <xQueueGenericCreate>
 8006f18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff ffd3 	bl	8006ec6 <prvInitialiseMutex>

		return xNewQueue;
 8006f20:	68fb      	ldr	r3, [r7, #12]
	}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b088      	sub	sp, #32
 8006f2e:	af02      	add	r7, sp, #8
 8006f30:	4603      	mov	r3, r0
 8006f32:	6039      	str	r1, [r7, #0]
 8006f34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f36:	2301      	movs	r3, #1
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2200      	movs	r2, #0
 8006f46:	6939      	ldr	r1, [r7, #16]
 8006f48:	6978      	ldr	r0, [r7, #20]
 8006f4a:	f7ff fee7 	bl	8006d1c <xQueueGenericCreateStatic>
 8006f4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff ffb8 	bl	8006ec6 <prvInitialiseMutex>

		return xNewQueue;
 8006f56:	68fb      	ldr	r3, [r7, #12]
	}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006f72:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60fb      	str	r3, [r7, #12]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	689c      	ldr	r4, [r3, #8]
 8006f8c:	f001 fc44 	bl	8008818 <xTaskGetCurrentTaskHandle>
 8006f90:	4603      	mov	r3, r0
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d111      	bne.n	8006fba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	1e5a      	subs	r2, r3, #1
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2200      	movs	r2, #0
 8006fac:	2100      	movs	r1, #0
 8006fae:	6938      	ldr	r0, [r7, #16]
 8006fb0:	f000 f840 	bl	8007034 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e001      	b.n	8006fbe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006fbe:	697b      	ldr	r3, [r7, #20]
	}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd90      	pop	{r4, r7, pc}

08006fc8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006fdc:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60fb      	str	r3, [r7, #12]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	689c      	ldr	r4, [r3, #8]
 8006ff6:	f001 fc0f 	bl	8008818 <xTaskGetCurrentTaskHandle>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	429c      	cmp	r4, r3
 8006ffe:	d107      	bne.n	8007010 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800700a:	2301      	movs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e00c      	b.n	800702a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6938      	ldr	r0, [r7, #16]
 8007014:	f000 fa88 	bl	8007528 <xQueueSemaphoreTake>
 8007018:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800702a:	697b      	ldr	r3, [r7, #20]
	}
 800702c:	4618      	mov	r0, r3
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	bd90      	pop	{r4, r7, pc}

08007034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08e      	sub	sp, #56	; 0x38
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007042:	2300      	movs	r3, #0
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <xQueueGenericSend+0x32>
	__asm volatile
 8007050:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <xQueueGenericSend+0x40>
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <xQueueGenericSend+0x44>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <xQueueGenericSend+0x46>
 8007078:	2300      	movs	r3, #0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <xQueueGenericSend+0x60>
	__asm volatile
 800707e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d103      	bne.n	80070a2 <xQueueGenericSend+0x6e>
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <xQueueGenericSend+0x72>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <xQueueGenericSend+0x74>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80070ac:	f04f 0370 	mov.w	r3, #112	; 0x70
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	623b      	str	r3, [r7, #32]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070c2:	f001 fbb9 	bl	8008838 <xTaskGetSchedulerState>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <xQueueGenericSend+0x9e>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <xQueueGenericSend+0xa2>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <xQueueGenericSend+0xa4>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80070dc:	f04f 0370 	mov.w	r3, #112	; 0x70
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	61fb      	str	r3, [r7, #28]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f2:	f002 fa2f 	bl	8009554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <xQueueGenericSend+0xd4>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d129      	bne.n	800715c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800710e:	f000 fb2f 	bl	8007770 <prvCopyDataToQueue>
 8007112:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d010      	beq.n	800713e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	3324      	adds	r3, #36	; 0x24
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f955 	bl	80083d0 <xTaskRemoveFromEventList>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800712c:	4b3f      	ldr	r3, [pc, #252]	; (800722c <xQueueGenericSend+0x1f8>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	e00a      	b.n	8007154 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007144:	4b39      	ldr	r3, [pc, #228]	; (800722c <xQueueGenericSend+0x1f8>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007154:	f002 fa2e 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 8007158:	2301      	movs	r3, #1
 800715a:	e063      	b.n	8007224 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007162:	f002 fa27 	bl	80095b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007166:	2300      	movs	r3, #0
 8007168:	e05c      	b.n	8007224 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007170:	f107 0314 	add.w	r3, r7, #20
 8007174:	4618      	mov	r0, r3
 8007176:	f001 f9f1 	bl	800855c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717a:	2301      	movs	r3, #1
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800717e:	f002 fa19 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007182:	f000 febf 	bl	8007f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007186:	f002 f9e5 	bl	8009554 <vPortEnterCritical>
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007190:	b25b      	sxtb	r3, r3
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007196:	d103      	bne.n	80071a0 <xQueueGenericSend+0x16c>
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d103      	bne.n	80071b6 <xQueueGenericSend+0x182>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b6:	f002 f9fd 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071ba:	1d3a      	adds	r2, r7, #4
 80071bc:	f107 0314 	add.w	r3, r7, #20
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f9e0 	bl	8008588 <xTaskCheckForTimeOut>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d124      	bne.n	8007218 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071d0:	f000 fbc6 	bl	8007960 <prvIsQueueFull>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d018      	beq.n	800720c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	3310      	adds	r3, #16
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 f868 	bl	80082b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ea:	f000 fb51 	bl	8007890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ee:	f000 fe97 	bl	8007f20 <xTaskResumeAll>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f af7c 	bne.w	80070f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80071fa:	4b0c      	ldr	r3, [pc, #48]	; (800722c <xQueueGenericSend+0x1f8>)
 80071fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	e772      	b.n	80070f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800720c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720e:	f000 fb3f 	bl	8007890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007212:	f000 fe85 	bl	8007f20 <xTaskResumeAll>
 8007216:	e76c      	b.n	80070f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800721a:	f000 fb39 	bl	8007890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800721e:	f000 fe7f 	bl	8007f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007222:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007224:	4618      	mov	r0, r3
 8007226:	3738      	adds	r7, #56	; 0x38
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b090      	sub	sp, #64	; 0x40
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007248:	f04f 0370 	mov.w	r3, #112	; 0x70
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d103      	bne.n	800726c <xQueueGenericSendFromISR+0x3c>
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <xQueueGenericSendFromISR+0x40>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <xQueueGenericSendFromISR+0x42>
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007276:	f04f 0370 	mov.w	r3, #112	; 0x70
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d103      	bne.n	800729a <xQueueGenericSendFromISR+0x6a>
 8007292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <xQueueGenericSendFromISR+0x6e>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <xQueueGenericSendFromISR+0x70>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80072a4:	f04f 0370 	mov.w	r3, #112	; 0x70
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	623b      	str	r3, [r7, #32]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072ba:	f002 fa2d 	bl	8009718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072be:	f3ef 8211 	mrs	r2, BASEPRI
 80072c2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	61fa      	str	r2, [r7, #28]
 80072d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d302      	bcc.n	80072ec <xQueueGenericSendFromISR+0xbc>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d12f      	bne.n	800734c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007302:	f000 fa35 	bl	8007770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007306:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d112      	bne.n	8007336 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d016      	beq.n	8007346 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	3324      	adds	r3, #36	; 0x24
 800731c:	4618      	mov	r0, r3
 800731e:	f001 f857 	bl	80083d0 <xTaskRemoveFromEventList>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00e      	beq.n	8007346 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e007      	b.n	8007346 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007336:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800733a:	3301      	adds	r3, #1
 800733c:	b2db      	uxtb	r3, r3
 800733e:	b25a      	sxtb	r2, r3
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007346:	2301      	movs	r3, #1
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800734a:	e001      	b.n	8007350 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800734c:	2300      	movs	r3, #0
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800735a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800735e:	4618      	mov	r0, r3
 8007360:	3740      	adds	r7, #64	; 0x40
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08c      	sub	sp, #48	; 0x30
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007374:	2300      	movs	r3, #0
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <xQueueReceive+0x30>
	__asm volatile
 8007382:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	623b      	str	r3, [r7, #32]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <xQueueReceive+0x3e>
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <xQueueReceive+0x42>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <xQueueReceive+0x44>
 80073aa:	2300      	movs	r3, #0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <xQueueReceive+0x5e>
	__asm volatile
 80073b0:	f04f 0370 	mov.w	r3, #112	; 0x70
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	61fb      	str	r3, [r7, #28]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073c6:	f001 fa37 	bl	8008838 <xTaskGetSchedulerState>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <xQueueReceive+0x6e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <xQueueReceive+0x72>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <xQueueReceive+0x74>
 80073da:	2300      	movs	r3, #0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <xQueueReceive+0x8e>
	__asm volatile
 80073e0:	f04f 0370 	mov.w	r3, #112	; 0x70
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	61bb      	str	r3, [r7, #24]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073f6:	f002 f8ad 	bl	8009554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	d01f      	beq.n	8007446 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800740a:	f000 fa1b 	bl	8007844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	1e5a      	subs	r2, r3, #1
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00f      	beq.n	800743e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	3310      	adds	r3, #16
 8007422:	4618      	mov	r0, r3
 8007424:	f000 ffd4 	bl	80083d0 <xTaskRemoveFromEventList>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800742e:	4b3d      	ldr	r3, [pc, #244]	; (8007524 <xQueueReceive+0x1bc>)
 8007430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800743e:	f002 f8b9 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 8007442:	2301      	movs	r3, #1
 8007444:	e069      	b.n	800751a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800744c:	f002 f8b2 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007450:	2300      	movs	r3, #0
 8007452:	e062      	b.n	800751a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800745a:	f107 0310 	add.w	r3, r7, #16
 800745e:	4618      	mov	r0, r3
 8007460:	f001 f87c 	bl	800855c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007464:	2301      	movs	r3, #1
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007468:	f002 f8a4 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800746c:	f000 fd4a 	bl	8007f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007470:	f002 f870 	bl	8009554 <vPortEnterCritical>
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800747a:	b25b      	sxtb	r3, r3
 800747c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007480:	d103      	bne.n	800748a <xQueueReceive+0x122>
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007490:	b25b      	sxtb	r3, r3
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d103      	bne.n	80074a0 <xQueueReceive+0x138>
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a0:	f002 f888 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074a4:	1d3a      	adds	r2, r7, #4
 80074a6:	f107 0310 	add.w	r3, r7, #16
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 f86b 	bl	8008588 <xTaskCheckForTimeOut>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d123      	bne.n	8007500 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ba:	f000 fa3b 	bl	8007934 <prvIsQueueEmpty>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d017      	beq.n	80074f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	3324      	adds	r3, #36	; 0x24
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4611      	mov	r1, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fef3 	bl	80082b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d4:	f000 f9dc 	bl	8007890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074d8:	f000 fd22 	bl	8007f20 <xTaskResumeAll>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d189      	bne.n	80073f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074e2:	4b10      	ldr	r3, [pc, #64]	; (8007524 <xQueueReceive+0x1bc>)
 80074e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	e780      	b.n	80073f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f6:	f000 f9cb 	bl	8007890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074fa:	f000 fd11 	bl	8007f20 <xTaskResumeAll>
 80074fe:	e77a      	b.n	80073f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007502:	f000 f9c5 	bl	8007890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007506:	f000 fd0b 	bl	8007f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800750a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750c:	f000 fa12 	bl	8007934 <prvIsQueueEmpty>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	f43f af6f 	beq.w	80073f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007518:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800751a:	4618      	mov	r0, r3
 800751c:	3730      	adds	r7, #48	; 0x30
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08e      	sub	sp, #56	; 0x38
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007532:	2300      	movs	r3, #0
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007544:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	623b      	str	r3, [r7, #32]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007562:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	61fb      	str	r3, [r7, #28]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007578:	f001 f95e 	bl	8008838 <xTaskGetSchedulerState>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <xQueueSemaphoreTake+0x60>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <xQueueSemaphoreTake+0x64>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <xQueueSemaphoreTake+0x66>
 800758c:	2300      	movs	r3, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007592:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	61bb      	str	r3, [r7, #24]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075a8:	f001 ffd4 	bl	8009554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d024      	beq.n	8007602 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	1e5a      	subs	r2, r3, #1
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80075c8:	f001 fac4 	bl	8008b54 <pvTaskIncrementMutexHeldCount>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00f      	beq.n	80075fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	3310      	adds	r3, #16
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fef6 	bl	80083d0 <xTaskRemoveFromEventList>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075ea:	4b54      	ldr	r3, [pc, #336]	; (800773c <xQueueSemaphoreTake+0x214>)
 80075ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075fa:	f001 ffdb 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 80075fe:	2301      	movs	r3, #1
 8007600:	e097      	b.n	8007732 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d111      	bne.n	800762c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800760e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	617b      	str	r3, [r7, #20]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007624:	f001 ffc6 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007628:	2300      	movs	r3, #0
 800762a:	e082      	b.n	8007732 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800762c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007632:	f107 030c 	add.w	r3, r7, #12
 8007636:	4618      	mov	r0, r3
 8007638:	f000 ff90 	bl	800855c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800763c:	2301      	movs	r3, #1
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007640:	f001 ffb8 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007644:	f000 fc5e 	bl	8007f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007648:	f001 ff84 	bl	8009554 <vPortEnterCritical>
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007652:	b25b      	sxtb	r3, r3
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007658:	d103      	bne.n	8007662 <xQueueSemaphoreTake+0x13a>
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007668:	b25b      	sxtb	r3, r3
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	d103      	bne.n	8007678 <xQueueSemaphoreTake+0x150>
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007678:	f001 ff9c 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800767c:	463a      	mov	r2, r7
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	4611      	mov	r1, r2
 8007684:	4618      	mov	r0, r3
 8007686:	f000 ff7f 	bl	8008588 <xTaskCheckForTimeOut>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d132      	bne.n	80076f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007692:	f000 f94f 	bl	8007934 <prvIsQueueEmpty>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d026      	beq.n	80076ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d109      	bne.n	80076b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80076a4:	f001 ff56 	bl	8009554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 f8e1 	bl	8008874 <xTaskPriorityInherit>
 80076b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80076b4:	f001 ff7e 	bl	80095b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	3324      	adds	r3, #36	; 0x24
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	4611      	mov	r1, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fdf9 	bl	80082b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076c8:	f000 f8e2 	bl	8007890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076cc:	f000 fc28 	bl	8007f20 <xTaskResumeAll>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f47f af68 	bne.w	80075a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80076d8:	4b18      	ldr	r3, [pc, #96]	; (800773c <xQueueSemaphoreTake+0x214>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	e75e      	b.n	80075a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80076ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076ec:	f000 f8d0 	bl	8007890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076f0:	f000 fc16 	bl	8007f20 <xTaskResumeAll>
 80076f4:	e758      	b.n	80075a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80076f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076f8:	f000 f8ca 	bl	8007890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076fc:	f000 fc10 	bl	8007f20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007702:	f000 f917 	bl	8007934 <prvIsQueueEmpty>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	f43f af4d 	beq.w	80075a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00d      	beq.n	8007730 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007714:	f001 ff1e 	bl	8009554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800771a:	f000 f811 	bl	8007740 <prvGetDisinheritPriorityAfterTimeout>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007726:	4618      	mov	r0, r3
 8007728:	f001 f97a 	bl	8008a20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800772c:	f001 ff42 	bl	80095b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007730:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007732:	4618      	mov	r0, r3
 8007734:	3738      	adds	r7, #56	; 0x38
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d006      	beq.n	800775e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e001      	b.n	8007762 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007762:	68fb      	ldr	r3, [r7, #12]
	}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10d      	bne.n	80077aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d14d      	bne.n	8007832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	4618      	mov	r0, r3
 800779c:	f001 f8d2 	bl	8008944 <xTaskPriorityDisinherit>
 80077a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	e043      	b.n	8007832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d119      	bne.n	80077e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6858      	ldr	r0, [r3, #4]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	461a      	mov	r2, r3
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	f002 fd8c 	bl	800a2d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	441a      	add	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d32b      	bcc.n	8007832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	e026      	b.n	8007832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68d8      	ldr	r0, [r3, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	461a      	mov	r2, r3
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	f002 fd72 	bl	800a2d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	425b      	negs	r3, r3
 80077fe:	441a      	add	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d207      	bcs.n	8007820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	425b      	negs	r3, r3
 800781a:	441a      	add	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d105      	bne.n	8007832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	3b01      	subs	r3, #1
 8007830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800783a:	697b      	ldr	r3, [r7, #20]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d018      	beq.n	8007888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	441a      	add	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	429a      	cmp	r2, r3
 800786e:	d303      	bcc.n	8007878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68d9      	ldr	r1, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007880:	461a      	mov	r2, r3
 8007882:	6838      	ldr	r0, [r7, #0]
 8007884:	f002 fd28 	bl	800a2d8 <memcpy>
	}
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007898:	f001 fe5c 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078a4:	e011      	b.n	80078ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d012      	beq.n	80078d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3324      	adds	r3, #36	; 0x24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fd8c 	bl	80083d0 <xTaskRemoveFromEventList>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078be:	f000 fec5 	bl	800864c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dce9      	bgt.n	80078a6 <prvUnlockQueue+0x16>
 80078d2:	e000      	b.n	80078d6 <prvUnlockQueue+0x46>
					break;
 80078d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	22ff      	movs	r2, #255	; 0xff
 80078da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80078de:	f001 fe69 	bl	80095b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078e2:	f001 fe37 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078ee:	e011      	b.n	8007914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d012      	beq.n	800791e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3310      	adds	r3, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fd67 	bl	80083d0 <xTaskRemoveFromEventList>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007908:	f000 fea0 	bl	800864c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	3b01      	subs	r3, #1
 8007910:	b2db      	uxtb	r3, r3
 8007912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	dce9      	bgt.n	80078f0 <prvUnlockQueue+0x60>
 800791c:	e000      	b.n	8007920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800791e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	22ff      	movs	r2, #255	; 0xff
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007928:	f001 fe44 	bl	80095b4 <vPortExitCritical>
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800793c:	f001 fe0a 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007948:	2301      	movs	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	e001      	b.n	8007952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007952:	f001 fe2f 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 8007956:	68fb      	ldr	r3, [r7, #12]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007968:	f001 fdf4 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007974:	429a      	cmp	r2, r3
 8007976:	d102      	bne.n	800797e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	e001      	b.n	8007982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007982:	f001 fe17 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 8007986:	68fb      	ldr	r3, [r7, #12]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e014      	b.n	80079ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079a0:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <vQueueAddToRegistry+0x50>)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079ac:	490c      	ldr	r1, [pc, #48]	; (80079e0 <vQueueAddToRegistry+0x50>)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079b6:	4a0a      	ldr	r2, [pc, #40]	; (80079e0 <vQueueAddToRegistry+0x50>)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	4413      	add	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80079c2:	e006      	b.n	80079d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b07      	cmp	r3, #7
 80079ce:	d9e7      	bls.n	80079a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000a48 	.word	0x20000a48

080079e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80079f4:	f001 fdae 	bl	8009554 <vPortEnterCritical>
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079fe:	b25b      	sxtb	r3, r3
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d103      	bne.n	8007a0e <vQueueWaitForMessageRestricted+0x2a>
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a14:	b25b      	sxtb	r3, r3
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d103      	bne.n	8007a24 <vQueueWaitForMessageRestricted+0x40>
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a24:	f001 fdc6 	bl	80095b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d106      	bne.n	8007a3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fc9d 	bl	8008378 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a3e:	6978      	ldr	r0, [r7, #20]
 8007a40:	f7ff ff26 	bl	8007890 <prvUnlockQueue>
	}
 8007a44:	bf00      	nop
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08e      	sub	sp, #56	; 0x38
 8007a50:	af04      	add	r7, sp, #16
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a60:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	623b      	str	r3, [r7, #32]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <xTaskCreateStatic+0x46>
	__asm volatile
 8007a7c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	61fb      	str	r3, [r7, #28]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a92:	23bc      	movs	r3, #188	; 0xbc
 8007a94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2bbc      	cmp	r3, #188	; 0xbc
 8007a9a:	d00a      	beq.n	8007ab2 <xTaskCreateStatic+0x66>
	__asm volatile
 8007a9c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61bb      	str	r3, [r7, #24]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ab2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d01e      	beq.n	8007af8 <xTaskCreateStatic+0xac>
 8007aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01b      	beq.n	8007af8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	2202      	movs	r2, #2
 8007ace:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9303      	str	r3, [sp, #12]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	9302      	str	r3, [sp, #8]
 8007ada:	f107 0314 	add.w	r3, r7, #20
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 f850 	bl	8007b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007af2:	f000 f8f3 	bl	8007cdc <prvAddNewTaskToReadyList>
 8007af6:	e001      	b.n	8007afc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007afc:	697b      	ldr	r3, [r7, #20]
	}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3728      	adds	r7, #40	; 0x28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b08c      	sub	sp, #48	; 0x30
 8007b0a:	af04      	add	r7, sp, #16
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f001 fe3c 	bl	8009798 <pvPortMalloc>
 8007b20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00e      	beq.n	8007b46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b28:	20bc      	movs	r0, #188	; 0xbc
 8007b2a:	f001 fe35 	bl	8009798 <pvPortMalloc>
 8007b2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007b3c:	e005      	b.n	8007b4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b3e:	6978      	ldr	r0, [r7, #20]
 8007b40:	f001 fef6 	bl	8009930 <vPortFree>
 8007b44:	e001      	b.n	8007b4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d017      	beq.n	8007b80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b58:	88fa      	ldrh	r2, [r7, #6]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9303      	str	r3, [sp, #12]
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	9302      	str	r3, [sp, #8]
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f80e 	bl	8007b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b74:	69f8      	ldr	r0, [r7, #28]
 8007b76:	f000 f8b1 	bl	8007cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e002      	b.n	8007b86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295
 8007b84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b86:	69bb      	ldr	r3, [r7, #24]
	}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	21a5      	movs	r1, #165	; 0xa5
 8007baa:	f002 fba3 	bl	800a2f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f023 0307 	bic.w	r3, r3, #7
 8007bc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007bd2:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	617b      	str	r3, [r7, #20]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01f      	beq.n	8007c2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	e012      	b.n	8007c1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	7819      	ldrb	r1, [r3, #0]
 8007bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	3334      	adds	r3, #52	; 0x34
 8007c04:	460a      	mov	r2, r1
 8007c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d006      	beq.n	8007c22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3301      	adds	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	2b0f      	cmp	r3, #15
 8007c1e:	d9e9      	bls.n	8007bf4 <prvInitialiseNewTask+0x64>
 8007c20:	e000      	b.n	8007c24 <prvInitialiseNewTask+0x94>
			{
				break;
 8007c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c2c:	e003      	b.n	8007c36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	2b37      	cmp	r3, #55	; 0x37
 8007c3a:	d901      	bls.n	8007c40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c3c:	2337      	movs	r3, #55	; 0x37
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	2200      	movs	r2, #0
 8007c50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	3304      	adds	r3, #4
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe ff64 	bl	8006b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	3318      	adds	r3, #24
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe ff5f 	bl	8006b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	3354      	adds	r3, #84	; 0x54
 8007c90:	2260      	movs	r2, #96	; 0x60
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f002 fb2d 	bl	800a2f4 <memset>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <prvInitialiseNewTask+0x140>)
 8007c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <prvInitialiseNewTask+0x144>)
 8007ca4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	4a0b      	ldr	r2, [pc, #44]	; (8007cd8 <prvInitialiseNewTask+0x148>)
 8007caa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	69b8      	ldr	r0, [r7, #24]
 8007cb2:	f001 fb25 	bl	8009300 <pxPortInitialiseStack>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc8:	bf00      	nop
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	0800b484 	.word	0x0800b484
 8007cd4:	0800b4a4 	.word	0x0800b4a4
 8007cd8:	0800b464 	.word	0x0800b464

08007cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ce4:	f001 fc36 	bl	8009554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ce8:	4b2d      	ldr	r3, [pc, #180]	; (8007da0 <prvAddNewTaskToReadyList+0xc4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3301      	adds	r3, #1
 8007cee:	4a2c      	ldr	r2, [pc, #176]	; (8007da0 <prvAddNewTaskToReadyList+0xc4>)
 8007cf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cf2:	4b2c      	ldr	r3, [pc, #176]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cfa:	4a2a      	ldr	r2, [pc, #168]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d00:	4b27      	ldr	r3, [pc, #156]	; (8007da0 <prvAddNewTaskToReadyList+0xc4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d110      	bne.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d08:	f000 fcc4 	bl	8008694 <prvInitialiseTaskLists>
 8007d0c:	e00d      	b.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <prvAddNewTaskToReadyList+0xcc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d16:	4b23      	ldr	r3, [pc, #140]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d802      	bhi.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d24:	4a1f      	ldr	r2, [pc, #124]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d2a:	4b20      	ldr	r3, [pc, #128]	; (8007dac <prvAddNewTaskToReadyList+0xd0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	4a1e      	ldr	r2, [pc, #120]	; (8007dac <prvAddNewTaskToReadyList+0xd0>)
 8007d32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d34:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <prvAddNewTaskToReadyList+0xd0>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <prvAddNewTaskToReadyList+0xd4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d903      	bls.n	8007d50 <prvAddNewTaskToReadyList+0x74>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	4a18      	ldr	r2, [pc, #96]	; (8007db0 <prvAddNewTaskToReadyList+0xd4>)
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <prvAddNewTaskToReadyList+0xd8>)
 8007d5e:	441a      	add	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7fe fee9 	bl	8006b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d6c:	f001 fc22 	bl	80095b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d70:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <prvAddNewTaskToReadyList+0xcc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00e      	beq.n	8007d96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d207      	bcs.n	8007d96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d86:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <prvAddNewTaskToReadyList+0xdc>)
 8007d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000f5c 	.word	0x20000f5c
 8007da4:	20000a88 	.word	0x20000a88
 8007da8:	20000f68 	.word	0x20000f68
 8007dac:	20000f78 	.word	0x20000f78
 8007db0:	20000f64 	.word	0x20000f64
 8007db4:	20000a8c 	.word	0x20000a8c
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d017      	beq.n	8007dfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007dce:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <vTaskDelay+0x60>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <vTaskDelay+0x30>
	__asm volatile
 8007dd6:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	60bb      	str	r3, [r7, #8]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007dec:	f000 f88a 	bl	8007f04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007df0:	2100      	movs	r1, #0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fec2 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007df8:	f000 f892 	bl	8007f20 <xTaskResumeAll>
 8007dfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d107      	bne.n	8007e14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <vTaskDelay+0x64>)
 8007e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000f84 	.word	0x20000f84
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08a      	sub	sp, #40	; 0x28
 8007e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e32:	463a      	mov	r2, r7
 8007e34:	1d39      	adds	r1, r7, #4
 8007e36:	f107 0308 	add.w	r3, r7, #8
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fc30 	bl	80066a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	9202      	str	r2, [sp, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	460a      	mov	r2, r1
 8007e52:	4924      	ldr	r1, [pc, #144]	; (8007ee4 <vTaskStartScheduler+0xc0>)
 8007e54:	4824      	ldr	r0, [pc, #144]	; (8007ee8 <vTaskStartScheduler+0xc4>)
 8007e56:	f7ff fdf9 	bl	8007a4c <xTaskCreateStatic>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4a23      	ldr	r2, [pc, #140]	; (8007eec <vTaskStartScheduler+0xc8>)
 8007e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e60:	4b22      	ldr	r3, [pc, #136]	; (8007eec <vTaskStartScheduler+0xc8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e001      	b.n	8007e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d102      	bne.n	8007e7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e78:	f000 fed4 	bl	8008c24 <xTimerCreateTimerTask>
 8007e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d11b      	bne.n	8007ebc <vTaskStartScheduler+0x98>
	__asm volatile
 8007e84:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	613b      	str	r3, [r7, #16]
}
 8007e96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e98:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <vTaskStartScheduler+0xcc>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3354      	adds	r3, #84	; 0x54
 8007e9e:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <vTaskStartScheduler+0xd0>)
 8007ea0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ea2:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <vTaskStartScheduler+0xd4>)
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007eaa:	4b14      	ldr	r3, [pc, #80]	; (8007efc <vTaskStartScheduler+0xd8>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007eb0:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <vTaskStartScheduler+0xdc>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007eb6:	f001 faab 	bl	8009410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007eba:	e00e      	b.n	8007eda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d10a      	bne.n	8007eda <vTaskStartScheduler+0xb6>
	__asm volatile
 8007ec4:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	60fb      	str	r3, [r7, #12]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <vTaskStartScheduler+0xb4>
}
 8007eda:	bf00      	nop
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	0800afa8 	.word	0x0800afa8
 8007ee8:	08008665 	.word	0x08008665
 8007eec:	20000f80 	.word	0x20000f80
 8007ef0:	20000a88 	.word	0x20000a88
 8007ef4:	20000010 	.word	0x20000010
 8007ef8:	20000f7c 	.word	0x20000f7c
 8007efc:	20000f68 	.word	0x20000f68
 8007f00:	20000f60 	.word	0x20000f60

08007f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f08:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <vTaskSuspendAll+0x18>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	4a03      	ldr	r2, [pc, #12]	; (8007f1c <vTaskSuspendAll+0x18>)
 8007f10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f12:	bf00      	nop
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20000f84 	.word	0x20000f84

08007f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f2e:	4b42      	ldr	r3, [pc, #264]	; (8008038 <xTaskResumeAll+0x118>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <xTaskResumeAll+0x2c>
	__asm volatile
 8007f36:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	603b      	str	r3, [r7, #0]
}
 8007f48:	bf00      	nop
 8007f4a:	e7fe      	b.n	8007f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f4c:	f001 fb02 	bl	8009554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f50:	4b39      	ldr	r3, [pc, #228]	; (8008038 <xTaskResumeAll+0x118>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	4a38      	ldr	r2, [pc, #224]	; (8008038 <xTaskResumeAll+0x118>)
 8007f58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f5a:	4b37      	ldr	r3, [pc, #220]	; (8008038 <xTaskResumeAll+0x118>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d162      	bne.n	8008028 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f62:	4b36      	ldr	r3, [pc, #216]	; (800803c <xTaskResumeAll+0x11c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d05e      	beq.n	8008028 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f6a:	e02f      	b.n	8007fcc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f6c:	4b34      	ldr	r3, [pc, #208]	; (8008040 <xTaskResumeAll+0x120>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3318      	adds	r3, #24
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fe3d 	bl	8006bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3304      	adds	r3, #4
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fe38 	bl	8006bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8c:	4b2d      	ldr	r3, [pc, #180]	; (8008044 <xTaskResumeAll+0x124>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d903      	bls.n	8007f9c <xTaskResumeAll+0x7c>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	4a2a      	ldr	r2, [pc, #168]	; (8008044 <xTaskResumeAll+0x124>)
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4a27      	ldr	r2, [pc, #156]	; (8008048 <xTaskResumeAll+0x128>)
 8007faa:	441a      	add	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f7fe fdc3 	bl	8006b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbc:	4b23      	ldr	r3, [pc, #140]	; (800804c <xTaskResumeAll+0x12c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d302      	bcc.n	8007fcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fc6:	4b22      	ldr	r3, [pc, #136]	; (8008050 <xTaskResumeAll+0x130>)
 8007fc8:	2201      	movs	r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fcc:	4b1c      	ldr	r3, [pc, #112]	; (8008040 <xTaskResumeAll+0x120>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1cb      	bne.n	8007f6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fda:	f000 fbfd 	bl	80087d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fde:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <xTaskResumeAll+0x134>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d010      	beq.n	800800c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fea:	f000 f847 	bl	800807c <xTaskIncrementTick>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ff4:	4b16      	ldr	r3, [pc, #88]	; (8008050 <xTaskResumeAll+0x130>)
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f1      	bne.n	8007fea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <xTaskResumeAll+0x134>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800800c:	4b10      	ldr	r3, [pc, #64]	; (8008050 <xTaskResumeAll+0x130>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008018:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <xTaskResumeAll+0x138>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008028:	f001 fac4 	bl	80095b4 <vPortExitCritical>

	return xAlreadyYielded;
 800802c:	68bb      	ldr	r3, [r7, #8]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000f84 	.word	0x20000f84
 800803c:	20000f5c 	.word	0x20000f5c
 8008040:	20000f1c 	.word	0x20000f1c
 8008044:	20000f64 	.word	0x20000f64
 8008048:	20000a8c 	.word	0x20000a8c
 800804c:	20000a88 	.word	0x20000a88
 8008050:	20000f70 	.word	0x20000f70
 8008054:	20000f6c 	.word	0x20000f6c
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <xTaskGetTickCount+0x1c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008068:	687b      	ldr	r3, [r7, #4]
}
 800806a:	4618      	mov	r0, r3
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000f60 	.word	0x20000f60

0800807c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008086:	4b4f      	ldr	r3, [pc, #316]	; (80081c4 <xTaskIncrementTick+0x148>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 808f 	bne.w	80081ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008090:	4b4d      	ldr	r3, [pc, #308]	; (80081c8 <xTaskIncrementTick+0x14c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008098:	4a4b      	ldr	r2, [pc, #300]	; (80081c8 <xTaskIncrementTick+0x14c>)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d120      	bne.n	80080e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080a4:	4b49      	ldr	r3, [pc, #292]	; (80081cc <xTaskIncrementTick+0x150>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80080ae:	f04f 0370 	mov.w	r3, #112	; 0x70
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	603b      	str	r3, [r7, #0]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <xTaskIncrementTick+0x46>
 80080c4:	4b41      	ldr	r3, [pc, #260]	; (80081cc <xTaskIncrementTick+0x150>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	4b41      	ldr	r3, [pc, #260]	; (80081d0 <xTaskIncrementTick+0x154>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a3f      	ldr	r2, [pc, #252]	; (80081cc <xTaskIncrementTick+0x150>)
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	4a3f      	ldr	r2, [pc, #252]	; (80081d0 <xTaskIncrementTick+0x154>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	4b3e      	ldr	r3, [pc, #248]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	4a3d      	ldr	r2, [pc, #244]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	f000 fb79 	bl	80087d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080e6:	4b3c      	ldr	r3, [pc, #240]	; (80081d8 <xTaskIncrementTick+0x15c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d349      	bcc.n	8008184 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f0:	4b36      	ldr	r3, [pc, #216]	; (80081cc <xTaskIncrementTick+0x150>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fa:	4b37      	ldr	r3, [pc, #220]	; (80081d8 <xTaskIncrementTick+0x15c>)
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	601a      	str	r2, [r3, #0]
					break;
 8008102:	e03f      	b.n	8008184 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008104:	4b31      	ldr	r3, [pc, #196]	; (80081cc <xTaskIncrementTick+0x150>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	429a      	cmp	r2, r3
 800811a:	d203      	bcs.n	8008124 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800811c:	4a2e      	ldr	r2, [pc, #184]	; (80081d8 <xTaskIncrementTick+0x15c>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008122:	e02f      	b.n	8008184 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3304      	adds	r3, #4
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fd65 	bl	8006bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	3318      	adds	r3, #24
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe fd5c 	bl	8006bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4b25      	ldr	r3, [pc, #148]	; (80081dc <xTaskIncrementTick+0x160>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d903      	bls.n	8008154 <xTaskIncrementTick+0xd8>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	4a22      	ldr	r2, [pc, #136]	; (80081dc <xTaskIncrementTick+0x160>)
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <xTaskIncrementTick+0x164>)
 8008162:	441a      	add	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7fe fce7 	bl	8006b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008174:	4b1b      	ldr	r3, [pc, #108]	; (80081e4 <xTaskIncrementTick+0x168>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	429a      	cmp	r2, r3
 800817c:	d3b8      	bcc.n	80080f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800817e:	2301      	movs	r3, #1
 8008180:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008182:	e7b5      	b.n	80080f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008184:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <xTaskIncrementTick+0x168>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	4915      	ldr	r1, [pc, #84]	; (80081e0 <xTaskIncrementTick+0x164>)
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d901      	bls.n	80081a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <xTaskIncrementTick+0x16c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80081a8:	2301      	movs	r3, #1
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	e004      	b.n	80081b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <xTaskIncrementTick+0x170>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a0d      	ldr	r2, [pc, #52]	; (80081ec <xTaskIncrementTick+0x170>)
 80081b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081b8:	697b      	ldr	r3, [r7, #20]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000f84 	.word	0x20000f84
 80081c8:	20000f60 	.word	0x20000f60
 80081cc:	20000f14 	.word	0x20000f14
 80081d0:	20000f18 	.word	0x20000f18
 80081d4:	20000f74 	.word	0x20000f74
 80081d8:	20000f7c 	.word	0x20000f7c
 80081dc:	20000f64 	.word	0x20000f64
 80081e0:	20000a8c 	.word	0x20000a8c
 80081e4:	20000a88 	.word	0x20000a88
 80081e8:	20000f70 	.word	0x20000f70
 80081ec:	20000f6c 	.word	0x20000f6c

080081f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081f6:	4b2a      	ldr	r3, [pc, #168]	; (80082a0 <vTaskSwitchContext+0xb0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081fe:	4b29      	ldr	r3, [pc, #164]	; (80082a4 <vTaskSwitchContext+0xb4>)
 8008200:	2201      	movs	r2, #1
 8008202:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008204:	e046      	b.n	8008294 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008206:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <vTaskSwitchContext+0xb4>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820c:	4b26      	ldr	r3, [pc, #152]	; (80082a8 <vTaskSwitchContext+0xb8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	e010      	b.n	8008236 <vTaskSwitchContext+0x46>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <vTaskSwitchContext+0x40>
	__asm volatile
 800821a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	607b      	str	r3, [r7, #4]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <vTaskSwitchContext+0x3e>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3b01      	subs	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	491d      	ldr	r1, [pc, #116]	; (80082ac <vTaskSwitchContext+0xbc>)
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0e4      	beq.n	8008214 <vTaskSwitchContext+0x24>
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4a15      	ldr	r2, [pc, #84]	; (80082ac <vTaskSwitchContext+0xbc>)
 8008256:	4413      	add	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3308      	adds	r3, #8
 800826c:	429a      	cmp	r2, r3
 800826e:	d104      	bne.n	800827a <vTaskSwitchContext+0x8a>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4a0b      	ldr	r2, [pc, #44]	; (80082b0 <vTaskSwitchContext+0xc0>)
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <vTaskSwitchContext+0xb8>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <vTaskSwitchContext+0xc0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3354      	adds	r3, #84	; 0x54
 8008290:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <vTaskSwitchContext+0xc4>)
 8008292:	6013      	str	r3, [r2, #0]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20000f84 	.word	0x20000f84
 80082a4:	20000f70 	.word	0x20000f70
 80082a8:	20000f64 	.word	0x20000f64
 80082ac:	20000a8c 	.word	0x20000a8c
 80082b0:	20000a88 	.word	0x20000a88
 80082b4:	20000010 	.word	0x20000010

080082b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082c8:	f04f 0370 	mov.w	r3, #112	; 0x70
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082de:	4b07      	ldr	r3, [pc, #28]	; (80082fc <vTaskPlaceOnEventList+0x44>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3318      	adds	r3, #24
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fe fc4d 	bl	8006b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082ec:	2101      	movs	r1, #1
 80082ee:	6838      	ldr	r0, [r7, #0]
 80082f0:	f000 fc44 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
}
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000a88 	.word	0x20000a88

08008300 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008312:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	617b      	str	r3, [r7, #20]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <vTaskPlaceOnUnorderedEventList+0x70>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008330:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008350:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008352:	4b08      	ldr	r3, [pc, #32]	; (8008374 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3318      	adds	r3, #24
 8008358:	4619      	mov	r1, r3
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7fe fbef 	bl	8006b3e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008360:	2101      	movs	r1, #1
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fc0a 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
}
 8008368:	bf00      	nop
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20000f84 	.word	0x20000f84
 8008374:	20000a88 	.word	0x20000a88

08008378 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10a      	bne.n	80083a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800838a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	617b      	str	r3, [r7, #20]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <vTaskPlaceOnEventListRestricted+0x54>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3318      	adds	r3, #24
 80083a6:	4619      	mov	r1, r3
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7fe fbc8 	bl	8006b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80083b4:	f04f 33ff 	mov.w	r3, #4294967295
 80083b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	68b8      	ldr	r0, [r7, #8]
 80083be:	f000 fbdd 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
	}
 80083c2:	bf00      	nop
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000a88 	.word	0x20000a88

080083d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80083e6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60fb      	str	r3, [r7, #12]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	3318      	adds	r3, #24
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fbf9 	bl	8006bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008406:	4b1e      	ldr	r3, [pc, #120]	; (8008480 <xTaskRemoveFromEventList+0xb0>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d11d      	bne.n	800844a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3304      	adds	r3, #4
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fbf0 	bl	8006bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	4b19      	ldr	r3, [pc, #100]	; (8008484 <xTaskRemoveFromEventList+0xb4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d903      	bls.n	800842c <xTaskRemoveFromEventList+0x5c>
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	4a16      	ldr	r2, [pc, #88]	; (8008484 <xTaskRemoveFromEventList+0xb4>)
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4a13      	ldr	r2, [pc, #76]	; (8008488 <xTaskRemoveFromEventList+0xb8>)
 800843a:	441a      	add	r2, r3
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	3304      	adds	r3, #4
 8008440:	4619      	mov	r1, r3
 8008442:	4610      	mov	r0, r2
 8008444:	f7fe fb7b 	bl	8006b3e <vListInsertEnd>
 8008448:	e005      	b.n	8008456 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3318      	adds	r3, #24
 800844e:	4619      	mov	r1, r3
 8008450:	480e      	ldr	r0, [pc, #56]	; (800848c <xTaskRemoveFromEventList+0xbc>)
 8008452:	f7fe fb74 	bl	8006b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845a:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <xTaskRemoveFromEventList+0xc0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	429a      	cmp	r2, r3
 8008462:	d905      	bls.n	8008470 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008468:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <xTaskRemoveFromEventList+0xc4>)
 800846a:	2201      	movs	r2, #1
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e001      	b.n	8008474 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008474:	697b      	ldr	r3, [r7, #20]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000f84 	.word	0x20000f84
 8008484:	20000f64 	.word	0x20000f64
 8008488:	20000a8c 	.word	0x20000a8c
 800848c:	20000f1c 	.word	0x20000f1c
 8008490:	20000a88 	.word	0x20000a88
 8008494:	20000f70 	.word	0x20000f70

08008498 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80084a2:	4b29      	ldr	r3, [pc, #164]	; (8008548 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80084aa:	f04f 0370 	mov.w	r3, #112	; 0x70
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	613b      	str	r3, [r7, #16]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80084d6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60fb      	str	r3, [r7, #12]
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7fe fb83 	bl	8006bf8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	3304      	adds	r3, #4
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe fb7e 	bl	8006bf8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008500:	4b12      	ldr	r3, [pc, #72]	; (800854c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d903      	bls.n	8008510 <vTaskRemoveFromUnorderedEventList+0x78>
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	4a0f      	ldr	r2, [pc, #60]	; (800854c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800851e:	441a      	add	r2, r3
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	3304      	adds	r3, #4
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f7fe fb09 	bl	8006b3e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	4b08      	ldr	r3, [pc, #32]	; (8008554 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	429a      	cmp	r2, r3
 8008538:	d902      	bls.n	8008540 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800853a:	4b07      	ldr	r3, [pc, #28]	; (8008558 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
	}
}
 8008540:	bf00      	nop
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20000f84 	.word	0x20000f84
 800854c:	20000f64 	.word	0x20000f64
 8008550:	20000a8c 	.word	0x20000a8c
 8008554:	20000a88 	.word	0x20000a88
 8008558:	20000f70 	.word	0x20000f70

0800855c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008564:	4b06      	ldr	r3, [pc, #24]	; (8008580 <vTaskInternalSetTimeOutState+0x24>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <vTaskInternalSetTimeOutState+0x28>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	605a      	str	r2, [r3, #4]
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	20000f74 	.word	0x20000f74
 8008584:	20000f60 	.word	0x20000f60

08008588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008598:	f04f 0370 	mov.w	r3, #112	; 0x70
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	613b      	str	r3, [r7, #16]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085b4:	f04f 0370 	mov.w	r3, #112	; 0x70
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	60fb      	str	r3, [r7, #12]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085ca:	f000 ffc3 	bl	8009554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085ce:	4b1d      	ldr	r3, [pc, #116]	; (8008644 <xTaskCheckForTimeOut+0xbc>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d102      	bne.n	80085ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61fb      	str	r3, [r7, #28]
 80085ec:	e023      	b.n	8008636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b15      	ldr	r3, [pc, #84]	; (8008648 <xTaskCheckForTimeOut+0xc0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d007      	beq.n	800860a <xTaskCheckForTimeOut+0x82>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	429a      	cmp	r2, r3
 8008602:	d302      	bcc.n	800860a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e015      	b.n	8008636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	429a      	cmp	r2, r3
 8008612:	d20b      	bcs.n	800862c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	1ad2      	subs	r2, r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff9b 	bl	800855c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	e004      	b.n	8008636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008632:	2301      	movs	r3, #1
 8008634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008636:	f000 ffbd 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 800863a:	69fb      	ldr	r3, [r7, #28]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3720      	adds	r7, #32
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20000f60 	.word	0x20000f60
 8008648:	20000f74 	.word	0x20000f74

0800864c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008650:	4b03      	ldr	r3, [pc, #12]	; (8008660 <vTaskMissedYield+0x14>)
 8008652:	2201      	movs	r2, #1
 8008654:	601a      	str	r2, [r3, #0]
}
 8008656:	bf00      	nop
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20000f70 	.word	0x20000f70

08008664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800866c:	f000 f852 	bl	8008714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <prvIdleTask+0x28>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d9f9      	bls.n	800866c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <prvIdleTask+0x2c>)
 800867a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008688:	e7f0      	b.n	800866c <prvIdleTask+0x8>
 800868a:	bf00      	nop
 800868c:	20000a8c 	.word	0x20000a8c
 8008690:	e000ed04 	.word	0xe000ed04

08008694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
 800869e:	e00c      	b.n	80086ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4a12      	ldr	r2, [pc, #72]	; (80086f4 <prvInitialiseTaskLists+0x60>)
 80086ac:	4413      	add	r3, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fa18 	bl	8006ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3301      	adds	r3, #1
 80086b8:	607b      	str	r3, [r7, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b37      	cmp	r3, #55	; 0x37
 80086be:	d9ef      	bls.n	80086a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086c0:	480d      	ldr	r0, [pc, #52]	; (80086f8 <prvInitialiseTaskLists+0x64>)
 80086c2:	f7fe fa0f 	bl	8006ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086c6:	480d      	ldr	r0, [pc, #52]	; (80086fc <prvInitialiseTaskLists+0x68>)
 80086c8:	f7fe fa0c 	bl	8006ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086cc:	480c      	ldr	r0, [pc, #48]	; (8008700 <prvInitialiseTaskLists+0x6c>)
 80086ce:	f7fe fa09 	bl	8006ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086d2:	480c      	ldr	r0, [pc, #48]	; (8008704 <prvInitialiseTaskLists+0x70>)
 80086d4:	f7fe fa06 	bl	8006ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086d8:	480b      	ldr	r0, [pc, #44]	; (8008708 <prvInitialiseTaskLists+0x74>)
 80086da:	f7fe fa03 	bl	8006ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086de:	4b0b      	ldr	r3, [pc, #44]	; (800870c <prvInitialiseTaskLists+0x78>)
 80086e0:	4a05      	ldr	r2, [pc, #20]	; (80086f8 <prvInitialiseTaskLists+0x64>)
 80086e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086e4:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <prvInitialiseTaskLists+0x7c>)
 80086e6:	4a05      	ldr	r2, [pc, #20]	; (80086fc <prvInitialiseTaskLists+0x68>)
 80086e8:	601a      	str	r2, [r3, #0]
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000a8c 	.word	0x20000a8c
 80086f8:	20000eec 	.word	0x20000eec
 80086fc:	20000f00 	.word	0x20000f00
 8008700:	20000f1c 	.word	0x20000f1c
 8008704:	20000f30 	.word	0x20000f30
 8008708:	20000f48 	.word	0x20000f48
 800870c:	20000f14 	.word	0x20000f14
 8008710:	20000f18 	.word	0x20000f18

08008714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800871a:	e019      	b.n	8008750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800871c:	f000 ff1a 	bl	8009554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008720:	4b10      	ldr	r3, [pc, #64]	; (8008764 <prvCheckTasksWaitingTermination+0x50>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3304      	adds	r3, #4
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe fa63 	bl	8006bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008732:	4b0d      	ldr	r3, [pc, #52]	; (8008768 <prvCheckTasksWaitingTermination+0x54>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3b01      	subs	r3, #1
 8008738:	4a0b      	ldr	r2, [pc, #44]	; (8008768 <prvCheckTasksWaitingTermination+0x54>)
 800873a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800873c:	4b0b      	ldr	r3, [pc, #44]	; (800876c <prvCheckTasksWaitingTermination+0x58>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3b01      	subs	r3, #1
 8008742:	4a0a      	ldr	r2, [pc, #40]	; (800876c <prvCheckTasksWaitingTermination+0x58>)
 8008744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008746:	f000 ff35 	bl	80095b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f810 	bl	8008770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008750:	4b06      	ldr	r3, [pc, #24]	; (800876c <prvCheckTasksWaitingTermination+0x58>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e1      	bne.n	800871c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000f30 	.word	0x20000f30
 8008768:	20000f5c 	.word	0x20000f5c
 800876c:	20000f44 	.word	0x20000f44

08008770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3354      	adds	r3, #84	; 0x54
 800877c:	4618      	mov	r0, r3
 800877e:	f001 fe63 	bl	800a448 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008788:	2b00      	cmp	r3, #0
 800878a:	d108      	bne.n	800879e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	4618      	mov	r0, r3
 8008792:	f001 f8cd 	bl	8009930 <vPortFree>
				vPortFree( pxTCB );
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 f8ca 	bl	8009930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800879c:	e018      	b.n	80087d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d103      	bne.n	80087b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 f8c1 	bl	8009930 <vPortFree>
	}
 80087ae:	e00f      	b.n	80087d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d00a      	beq.n	80087d0 <prvDeleteTCB+0x60>
	__asm volatile
 80087ba:	f04f 0370 	mov.w	r3, #112	; 0x70
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	60fb      	str	r3, [r7, #12]
}
 80087cc:	bf00      	nop
 80087ce:	e7fe      	b.n	80087ce <prvDeleteTCB+0x5e>
	}
 80087d0:	bf00      	nop
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <prvResetNextTaskUnblockTime+0x38>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <prvResetNextTaskUnblockTime+0x3c>)
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087f0:	e008      	b.n	8008804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <prvResetNextTaskUnblockTime+0x38>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	4a04      	ldr	r2, [pc, #16]	; (8008814 <prvResetNextTaskUnblockTime+0x3c>)
 8008802:	6013      	str	r3, [r2, #0]
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20000f14 	.word	0x20000f14
 8008814:	20000f7c 	.word	0x20000f7c

08008818 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800881e:	4b05      	ldr	r3, [pc, #20]	; (8008834 <xTaskGetCurrentTaskHandle+0x1c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008824:	687b      	ldr	r3, [r7, #4]
	}
 8008826:	4618      	mov	r0, r3
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20000a88 	.word	0x20000a88

08008838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <xTaskGetSchedulerState+0x34>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d102      	bne.n	800884c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008846:	2301      	movs	r3, #1
 8008848:	607b      	str	r3, [r7, #4]
 800884a:	e008      	b.n	800885e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884c:	4b08      	ldr	r3, [pc, #32]	; (8008870 <xTaskGetSchedulerState+0x38>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008854:	2302      	movs	r3, #2
 8008856:	607b      	str	r3, [r7, #4]
 8008858:	e001      	b.n	800885e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800885a:	2300      	movs	r3, #0
 800885c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800885e:	687b      	ldr	r3, [r7, #4]
	}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	20000f68 	.word	0x20000f68
 8008870:	20000f84 	.word	0x20000f84

08008874 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d051      	beq.n	800892e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888e:	4b2a      	ldr	r3, [pc, #168]	; (8008938 <xTaskPriorityInherit+0xc4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	429a      	cmp	r2, r3
 8008896:	d241      	bcs.n	800891c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	db06      	blt.n	80088ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088a0:	4b25      	ldr	r3, [pc, #148]	; (8008938 <xTaskPriorityInherit+0xc4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	6959      	ldr	r1, [r3, #20]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4a1f      	ldr	r2, [pc, #124]	; (800893c <xTaskPriorityInherit+0xc8>)
 80088c0:	4413      	add	r3, r2
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d122      	bne.n	800890c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fe f994 	bl	8006bf8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088d0:	4b19      	ldr	r3, [pc, #100]	; (8008938 <xTaskPriorityInherit+0xc4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088de:	4b18      	ldr	r3, [pc, #96]	; (8008940 <xTaskPriorityInherit+0xcc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d903      	bls.n	80088ee <xTaskPriorityInherit+0x7a>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	4a15      	ldr	r2, [pc, #84]	; (8008940 <xTaskPriorityInherit+0xcc>)
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <xTaskPriorityInherit+0xc8>)
 80088fc:	441a      	add	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	3304      	adds	r3, #4
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f7fe f91a 	bl	8006b3e <vListInsertEnd>
 800890a:	e004      	b.n	8008916 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <xTaskPriorityInherit+0xc4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	e008      	b.n	800892e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008920:	4b05      	ldr	r3, [pc, #20]	; (8008938 <xTaskPriorityInherit+0xc4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	429a      	cmp	r2, r3
 8008928:	d201      	bcs.n	800892e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800892a:	2301      	movs	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800892e:	68fb      	ldr	r3, [r7, #12]
	}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20000a88 	.word	0x20000a88
 800893c:	20000a8c 	.word	0x20000a8c
 8008940:	20000f64 	.word	0x20000f64

08008944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d056      	beq.n	8008a08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800895a:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <xTaskPriorityDisinherit+0xd0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	429a      	cmp	r2, r3
 8008962:	d00a      	beq.n	800897a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008964:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	60fb      	str	r3, [r7, #12]
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008982:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60bb      	str	r3, [r7, #8]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899c:	1e5a      	subs	r2, r3, #1
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d02c      	beq.n	8008a08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d128      	bne.n	8008a08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe f91c 	bl	8006bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <xTaskPriorityDisinherit+0xd4>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d903      	bls.n	80089e8 <xTaskPriorityDisinherit+0xa4>
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <xTaskPriorityDisinherit+0xd4>)
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <xTaskPriorityDisinherit+0xd8>)
 80089f6:	441a      	add	r2, r3
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7fe f89d 	bl	8006b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a08:	697b      	ldr	r3, [r7, #20]
	}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20000a88 	.word	0x20000a88
 8008a18:	20000f64 	.word	0x20000f64
 8008a1c:	20000a8c 	.word	0x20000a8c

08008a20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d06a      	beq.n	8008b0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008a40:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	60fb      	str	r3, [r7, #12]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d902      	bls.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	e002      	b.n	8008a6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d04b      	beq.n	8008b0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d146      	bne.n	8008b0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a80:	4b25      	ldr	r3, [pc, #148]	; (8008b18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d10a      	bne.n	8008aa0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008a8a:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	60bb      	str	r3, [r7, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	db04      	blt.n	8008abe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	6959      	ldr	r1, [r3, #20]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ace:	4413      	add	r3, r2
 8008ad0:	4299      	cmp	r1, r3
 8008ad2:	d11c      	bne.n	8008b0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe f88d 	bl	8006bf8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d903      	bls.n	8008af2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	4a0c      	ldr	r2, [pc, #48]	; (8008b20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4a07      	ldr	r2, [pc, #28]	; (8008b1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b00:	441a      	add	r2, r3
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f7fe f818 	bl	8006b3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b0e:	bf00      	nop
 8008b10:	3720      	adds	r7, #32
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000a88 	.word	0x20000a88
 8008b1c:	20000a8c 	.word	0x20000a8c
 8008b20:	20000f64 	.word	0x20000f64

08008b24 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <uxTaskResetEventItemValue+0x2c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <uxTaskResetEventItemValue+0x2c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <uxTaskResetEventItemValue+0x2c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008b40:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008b42:	687b      	ldr	r3, [r7, #4]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	20000a88 	.word	0x20000a88

08008b54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b58:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b60:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b66:	3201      	adds	r2, #1
 8008b68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008b6a:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
	}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20000a88 	.word	0x20000a88

08008b7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b86:	4b21      	ldr	r3, [pc, #132]	; (8008c0c <prvAddCurrentTaskToDelayedList+0x90>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b8c:	4b20      	ldr	r3, [pc, #128]	; (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe f830 	bl	8006bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9e:	d10a      	bne.n	8008bb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba6:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4819      	ldr	r0, [pc, #100]	; (8008c14 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bb0:	f7fd ffc5 	bl	8006b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bb4:	e026      	b.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bbe:	4b14      	ldr	r3, [pc, #80]	; (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d209      	bcs.n	8008be2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bce:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fd ffd3 	bl	8006b86 <vListInsert>
}
 8008be0:	e010      	b.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fd ffc9 	bl	8006b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	; (8008c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d202      	bcs.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bfe:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	6013      	str	r3, [r2, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20000f60 	.word	0x20000f60
 8008c10:	20000a88 	.word	0x20000a88
 8008c14:	20000f48 	.word	0x20000f48
 8008c18:	20000f18 	.word	0x20000f18
 8008c1c:	20000f14 	.word	0x20000f14
 8008c20:	20000f7c 	.word	0x20000f7c

08008c24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	; 0x28
 8008c28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c2e:	f000 fb07 	bl	8009240 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c32:	4b1c      	ldr	r3, [pc, #112]	; (8008ca4 <xTimerCreateTimerTask+0x80>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d021      	beq.n	8008c7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c42:	1d3a      	adds	r2, r7, #4
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fd fd41 	bl	80066d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	9202      	str	r2, [sp, #8]
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	2300      	movs	r3, #0
 8008c62:	460a      	mov	r2, r1
 8008c64:	4910      	ldr	r1, [pc, #64]	; (8008ca8 <xTimerCreateTimerTask+0x84>)
 8008c66:	4811      	ldr	r0, [pc, #68]	; (8008cac <xTimerCreateTimerTask+0x88>)
 8008c68:	f7fe fef0 	bl	8007a4c <xTaskCreateStatic>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4a10      	ldr	r2, [pc, #64]	; (8008cb0 <xTimerCreateTimerTask+0x8c>)
 8008c70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c72:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <xTimerCreateTimerTask+0x8c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c84:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	613b      	str	r3, [r7, #16]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c9a:	697b      	ldr	r3, [r7, #20]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000fb8 	.word	0x20000fb8
 8008ca8:	0800afb0 	.word	0x0800afb0
 8008cac:	08008de9 	.word	0x08008de9
 8008cb0:	20000fbc 	.word	0x20000fbc

08008cb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08a      	sub	sp, #40	; 0x28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ccc:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	623b      	str	r3, [r7, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ce2:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <xTimerGenericCommand+0x98>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d02a      	beq.n	8008d40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2b05      	cmp	r3, #5
 8008cfa:	dc18      	bgt.n	8008d2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cfc:	f7ff fd9c 	bl	8008838 <xTaskGetSchedulerState>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d109      	bne.n	8008d1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d06:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <xTimerGenericCommand+0x98>)
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	f107 0110 	add.w	r1, r7, #16
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d12:	f7fe f98f 	bl	8007034 <xQueueGenericSend>
 8008d16:	6278      	str	r0, [r7, #36]	; 0x24
 8008d18:	e012      	b.n	8008d40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <xTimerGenericCommand+0x98>)
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	f107 0110 	add.w	r1, r7, #16
 8008d22:	2300      	movs	r3, #0
 8008d24:	2200      	movs	r2, #0
 8008d26:	f7fe f985 	bl	8007034 <xQueueGenericSend>
 8008d2a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d2c:	e008      	b.n	8008d40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <xTimerGenericCommand+0x98>)
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	f107 0110 	add.w	r1, r7, #16
 8008d36:	2300      	movs	r3, #0
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	f7fe fa79 	bl	8007230 <xQueueGenericSendFromISR>
 8008d3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3728      	adds	r7, #40	; 0x28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000fb8 	.word	0x20000fb8

08008d50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5a:	4b22      	ldr	r3, [pc, #136]	; (8008de4 <prvProcessExpiredTimer+0x94>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fd ff45 	bl	8006bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d022      	beq.n	8008dc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	699a      	ldr	r2, [r3, #24]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	18d1      	adds	r1, r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	6978      	ldr	r0, [r7, #20]
 8008d8a:	f000 f8d1 	bl	8008f30 <prvInsertTimerInActiveList>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01f      	beq.n	8008dd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d94:	2300      	movs	r3, #0
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	6978      	ldr	r0, [r7, #20]
 8008da0:	f7ff ff88 	bl	8008cb4 <xTimerGenericCommand>
 8008da4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d113      	bne.n	8008dd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008dac:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	60fb      	str	r3, [r7, #12]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dc8:	f023 0301 	bic.w	r3, r3, #1
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	6978      	ldr	r0, [r7, #20]
 8008dda:	4798      	blx	r3
}
 8008ddc:	bf00      	nop
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20000fb0 	.word	0x20000fb0

08008de8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 f857 	bl	8008ea8 <prvGetNextExpireTime>
 8008dfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 f803 	bl	8008e0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e06:	f000 f8d5 	bl	8008fb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e0a:	e7f1      	b.n	8008df0 <prvTimerTask+0x8>

08008e0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e16:	f7ff f875 	bl	8007f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f866 	bl	8008ef0 <prvSampleTimeNow>
 8008e24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d130      	bne.n	8008e8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <prvProcessTimerOrBlockTask+0x3c>
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d806      	bhi.n	8008e48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e3a:	f7ff f871 	bl	8007f20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff ff85 	bl	8008d50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e46:	e024      	b.n	8008e92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <prvProcessTimerOrBlockTask+0x90>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <prvProcessTimerOrBlockTask+0x50>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e000      	b.n	8008e5e <prvProcessTimerOrBlockTask+0x52>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e60:	4b0f      	ldr	r3, [pc, #60]	; (8008ea0 <prvProcessTimerOrBlockTask+0x94>)
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	f7fe fdb9 	bl	80079e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e72:	f7ff f855 	bl	8007f20 <xTaskResumeAll>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <prvProcessTimerOrBlockTask+0x98>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	f3bf 8f6f 	isb	sy
}
 8008e8c:	e001      	b.n	8008e92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e8e:	f7ff f847 	bl	8007f20 <xTaskResumeAll>
}
 8008e92:	bf00      	nop
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000fb4 	.word	0x20000fb4
 8008ea0:	20000fb8 	.word	0x20000fb8
 8008ea4:	e000ed04 	.word	0xe000ed04

08008ea8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eb0:	4b0e      	ldr	r3, [pc, #56]	; (8008eec <prvGetNextExpireTime+0x44>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <prvGetNextExpireTime+0x16>
 8008eba:	2201      	movs	r2, #1
 8008ebc:	e000      	b.n	8008ec0 <prvGetNextExpireTime+0x18>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ecc:	4b07      	ldr	r3, [pc, #28]	; (8008eec <prvGetNextExpireTime+0x44>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	e001      	b.n	8008edc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008edc:	68fb      	ldr	r3, [r7, #12]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000fb0 	.word	0x20000fb0

08008ef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ef8:	f7ff f8b0 	bl	800805c <xTaskGetTickCount>
 8008efc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008efe:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <prvSampleTimeNow+0x3c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d205      	bcs.n	8008f14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f08:	f000 f936 	bl	8009178 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	e002      	b.n	8008f1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f1a:	4a04      	ldr	r2, [pc, #16]	; (8008f2c <prvSampleTimeNow+0x3c>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f20:	68fb      	ldr	r3, [r7, #12]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000fc0 	.word	0x20000fc0

08008f30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d812      	bhi.n	8008f7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	1ad2      	subs	r2, r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d302      	bcc.n	8008f6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f64:	2301      	movs	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	e01b      	b.n	8008fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f6a:	4b10      	ldr	r3, [pc, #64]	; (8008fac <prvInsertTimerInActiveList+0x7c>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fd fe06 	bl	8006b86 <vListInsert>
 8008f7a:	e012      	b.n	8008fa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d206      	bcs.n	8008f92 <prvInsertTimerInActiveList+0x62>
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d302      	bcc.n	8008f92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	617b      	str	r3, [r7, #20]
 8008f90:	e007      	b.n	8008fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f92:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <prvInsertTimerInActiveList+0x80>)
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	f7fd fdf2 	bl	8006b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fa2:	697b      	ldr	r3, [r7, #20]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000fb4 	.word	0x20000fb4
 8008fb0:	20000fb0 	.word	0x20000fb0

08008fb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08e      	sub	sp, #56	; 0x38
 8008fb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fba:	e0ca      	b.n	8009152 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da18      	bge.n	8008ff4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fc2:	1d3b      	adds	r3, r7, #4
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008fce:	f04f 0370 	mov.w	r3, #112	; 0x70
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	61fb      	str	r3, [r7, #28]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fea:	6850      	ldr	r0, [r2, #4]
 8008fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fee:	6892      	ldr	r2, [r2, #8]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f2c0 80aa 	blt.w	8009150 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	3304      	adds	r3, #4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fd fdf3 	bl	8006bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009012:	463b      	mov	r3, r7
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff ff6b 	bl	8008ef0 <prvSampleTimeNow>
 800901a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b09      	cmp	r3, #9
 8009020:	f200 8097 	bhi.w	8009152 <prvProcessReceivedCommands+0x19e>
 8009024:	a201      	add	r2, pc, #4	; (adr r2, 800902c <prvProcessReceivedCommands+0x78>)
 8009026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902a:	bf00      	nop
 800902c:	08009055 	.word	0x08009055
 8009030:	08009055 	.word	0x08009055
 8009034:	08009055 	.word	0x08009055
 8009038:	080090c9 	.word	0x080090c9
 800903c:	080090dd 	.word	0x080090dd
 8009040:	08009127 	.word	0x08009127
 8009044:	08009055 	.word	0x08009055
 8009048:	08009055 	.word	0x08009055
 800904c:	080090c9 	.word	0x080090c9
 8009050:	080090dd 	.word	0x080090dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800905a:	f043 0301 	orr.w	r3, r3, #1
 800905e:	b2da      	uxtb	r2, r3
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	18d1      	adds	r1, r2, r3
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009074:	f7ff ff5c 	bl	8008f30 <prvInsertTimerInActiveList>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d069      	beq.n	8009152 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009084:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d05e      	beq.n	8009152 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	441a      	add	r2, r3
 800909c:	2300      	movs	r3, #0
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	2300      	movs	r3, #0
 80090a2:	2100      	movs	r1, #0
 80090a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a6:	f7ff fe05 	bl	8008cb4 <xTimerGenericCommand>
 80090aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d14f      	bne.n	8009152 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090b2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	61bb      	str	r3, [r7, #24]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ce:	f023 0301 	bic.w	r3, r3, #1
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090da:	e03a      	b.n	8009152 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090e2:	f043 0301 	orr.w	r3, r3, #1
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090fc:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	617b      	str	r3, [r7, #20]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	18d1      	adds	r1, r2, r3
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009120:	f7ff ff06 	bl	8008f30 <prvInsertTimerInActiveList>
					break;
 8009124:	e015      	b.n	8009152 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009136:	f000 fbfb 	bl	8009930 <vPortFree>
 800913a:	e00a      	b.n	8009152 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009142:	f023 0301 	bic.w	r3, r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800914e:	e000      	b.n	8009152 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009150:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009152:	4b08      	ldr	r3, [pc, #32]	; (8009174 <prvProcessReceivedCommands+0x1c0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	1d39      	adds	r1, r7, #4
 8009158:	2200      	movs	r2, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe f904 	bl	8007368 <xQueueReceive>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	f47f af2a 	bne.w	8008fbc <prvProcessReceivedCommands+0x8>
	}
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	3730      	adds	r7, #48	; 0x30
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000fb8 	.word	0x20000fb8

08009178 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800917e:	e048      	b.n	8009212 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009180:	4b2d      	ldr	r3, [pc, #180]	; (8009238 <prvSwitchTimerLists+0xc0>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800918a:	4b2b      	ldr	r3, [pc, #172]	; (8009238 <prvSwitchTimerLists+0xc0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3304      	adds	r3, #4
 8009198:	4618      	mov	r0, r3
 800919a:	f7fd fd2d 	bl	8006bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d02e      	beq.n	8009212 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	4413      	add	r3, r2
 80091bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d90e      	bls.n	80091e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091d2:	4b19      	ldr	r3, [pc, #100]	; (8009238 <prvSwitchTimerLists+0xc0>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3304      	adds	r3, #4
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7fd fcd2 	bl	8006b86 <vListInsert>
 80091e2:	e016      	b.n	8009212 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e4:	2300      	movs	r3, #0
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2300      	movs	r3, #0
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	2100      	movs	r1, #0
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f7ff fd60 	bl	8008cb4 <xTimerGenericCommand>
 80091f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091fc:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	603b      	str	r3, [r7, #0]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009212:	4b09      	ldr	r3, [pc, #36]	; (8009238 <prvSwitchTimerLists+0xc0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1b1      	bne.n	8009180 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <prvSwitchTimerLists+0xc0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009222:	4b06      	ldr	r3, [pc, #24]	; (800923c <prvSwitchTimerLists+0xc4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a04      	ldr	r2, [pc, #16]	; (8009238 <prvSwitchTimerLists+0xc0>)
 8009228:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800922a:	4a04      	ldr	r2, [pc, #16]	; (800923c <prvSwitchTimerLists+0xc4>)
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	6013      	str	r3, [r2, #0]
}
 8009230:	bf00      	nop
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000fb0 	.word	0x20000fb0
 800923c:	20000fb4 	.word	0x20000fb4

08009240 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009246:	f000 f985 	bl	8009554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800924a:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <prvCheckForValidListAndQueue+0x60>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d120      	bne.n	8009294 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009252:	4814      	ldr	r0, [pc, #80]	; (80092a4 <prvCheckForValidListAndQueue+0x64>)
 8009254:	f7fd fc46 	bl	8006ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009258:	4813      	ldr	r0, [pc, #76]	; (80092a8 <prvCheckForValidListAndQueue+0x68>)
 800925a:	f7fd fc43 	bl	8006ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <prvCheckForValidListAndQueue+0x6c>)
 8009260:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <prvCheckForValidListAndQueue+0x64>)
 8009262:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009264:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <prvCheckForValidListAndQueue+0x70>)
 8009266:	4a10      	ldr	r2, [pc, #64]	; (80092a8 <prvCheckForValidListAndQueue+0x68>)
 8009268:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800926a:	2300      	movs	r3, #0
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <prvCheckForValidListAndQueue+0x74>)
 8009270:	4a11      	ldr	r2, [pc, #68]	; (80092b8 <prvCheckForValidListAndQueue+0x78>)
 8009272:	2110      	movs	r1, #16
 8009274:	200a      	movs	r0, #10
 8009276:	f7fd fd51 	bl	8006d1c <xQueueGenericCreateStatic>
 800927a:	4603      	mov	r3, r0
 800927c:	4a08      	ldr	r2, [pc, #32]	; (80092a0 <prvCheckForValidListAndQueue+0x60>)
 800927e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <prvCheckForValidListAndQueue+0x60>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <prvCheckForValidListAndQueue+0x60>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	490b      	ldr	r1, [pc, #44]	; (80092bc <prvCheckForValidListAndQueue+0x7c>)
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fb7e 	bl	8007990 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009294:	f000 f98e 	bl	80095b4 <vPortExitCritical>
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000fb8 	.word	0x20000fb8
 80092a4:	20000f88 	.word	0x20000f88
 80092a8:	20000f9c 	.word	0x20000f9c
 80092ac:	20000fb0 	.word	0x20000fb0
 80092b0:	20000fb4 	.word	0x20000fb4
 80092b4:	20001064 	.word	0x20001064
 80092b8:	20000fc4 	.word	0x20000fc4
 80092bc:	0800afb8 	.word	0x0800afb8

080092c0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	; 0x28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80092ce:	f06f 0301 	mvn.w	r3, #1
 80092d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092e0:	4b06      	ldr	r3, [pc, #24]	; (80092fc <xTimerPendFunctionCallFromISR+0x3c>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	f107 0114 	add.w	r1, r7, #20
 80092e8:	2300      	movs	r3, #0
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	f7fd ffa0 	bl	8007230 <xQueueGenericSendFromISR>
 80092f0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3728      	adds	r7, #40	; 0x28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000fb8 	.word	0x20000fb8

08009300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3b04      	subs	r3, #4
 8009310:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3b04      	subs	r3, #4
 800931e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f023 0201 	bic.w	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b04      	subs	r3, #4
 800932e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009330:	4a0c      	ldr	r2, [pc, #48]	; (8009364 <pxPortInitialiseStack+0x64>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3b14      	subs	r3, #20
 800933a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3b04      	subs	r3, #4
 8009346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f06f 0202 	mvn.w	r2, #2
 800934e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3b20      	subs	r3, #32
 8009354:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	08009369 	.word	0x08009369

08009368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009372:	4b12      	ldr	r3, [pc, #72]	; (80093bc <prvTaskExitError+0x54>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937a:	d00a      	beq.n	8009392 <prvTaskExitError+0x2a>
	__asm volatile
 800937c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	60fb      	str	r3, [r7, #12]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <prvTaskExitError+0x28>
	__asm volatile
 8009392:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	60bb      	str	r3, [r7, #8]
}
 80093a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093a6:	bf00      	nop
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0fc      	beq.n	80093a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	2000000c 	.word	0x2000000c

080093c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <pxCurrentTCBConst2>)
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	f380 8809 	msr	PSP, r0
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8811 	msr	BASEPRI, r0
 80093da:	4770      	bx	lr
 80093dc:	f3af 8000 	nop.w

080093e0 <pxCurrentTCBConst2>:
 80093e0:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop

080093e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093e8:	4808      	ldr	r0, [pc, #32]	; (800940c <prvPortStartFirstTask+0x24>)
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	6800      	ldr	r0, [r0, #0]
 80093ee:	f380 8808 	msr	MSP, r0
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8814 	msr	CONTROL, r0
 80093fa:	b662      	cpsie	i
 80093fc:	b661      	cpsie	f
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	df00      	svc	0
 8009408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800940a:	bf00      	nop
 800940c:	e000ed08 	.word	0xe000ed08

08009410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009416:	4b46      	ldr	r3, [pc, #280]	; (8009530 <xPortStartScheduler+0x120>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a46      	ldr	r2, [pc, #280]	; (8009534 <xPortStartScheduler+0x124>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10a      	bne.n	8009436 <xPortStartScheduler+0x26>
	__asm volatile
 8009420:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009436:	4b3e      	ldr	r3, [pc, #248]	; (8009530 <xPortStartScheduler+0x120>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a3f      	ldr	r2, [pc, #252]	; (8009538 <xPortStartScheduler+0x128>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d10a      	bne.n	8009456 <xPortStartScheduler+0x46>
	__asm volatile
 8009440:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <xPortStartScheduler+0x12c>)
 8009458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009478:	b2da      	uxtb	r2, r3
 800947a:	4b31      	ldr	r3, [pc, #196]	; (8009540 <xPortStartScheduler+0x130>)
 800947c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800947e:	4b31      	ldr	r3, [pc, #196]	; (8009544 <xPortStartScheduler+0x134>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009484:	e009      	b.n	800949a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <xPortStartScheduler+0x134>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3b01      	subs	r3, #1
 800948c:	4a2d      	ldr	r2, [pc, #180]	; (8009544 <xPortStartScheduler+0x134>)
 800948e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d0ef      	beq.n	8009486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094a6:	4b27      	ldr	r3, [pc, #156]	; (8009544 <xPortStartScheduler+0x134>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1c3 0307 	rsb	r3, r3, #7
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d00a      	beq.n	80094c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094b2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60bb      	str	r3, [r7, #8]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <xPortStartScheduler+0x134>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <xPortStartScheduler+0x134>)
 80094d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <xPortStartScheduler+0x134>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <xPortStartScheduler+0x134>)
 80094dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <xPortStartScheduler+0x138>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a17      	ldr	r2, [pc, #92]	; (8009548 <xPortStartScheduler+0x138>)
 80094ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <xPortStartScheduler+0x138>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a14      	ldr	r2, [pc, #80]	; (8009548 <xPortStartScheduler+0x138>)
 80094f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094fe:	f000 f8dd 	bl	80096bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <xPortStartScheduler+0x13c>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009508:	f000 f8fc 	bl	8009704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <xPortStartScheduler+0x140>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <xPortStartScheduler+0x140>)
 8009512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009518:	f7ff ff66 	bl	80093e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800951c:	f7fe fe68 	bl	80081f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009520:	f7ff ff22 	bl	8009368 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	e000ed00 	.word	0xe000ed00
 8009534:	410fc271 	.word	0x410fc271
 8009538:	410fc270 	.word	0x410fc270
 800953c:	e000e400 	.word	0xe000e400
 8009540:	200010b4 	.word	0x200010b4
 8009544:	200010b8 	.word	0x200010b8
 8009548:	e000ed20 	.word	0xe000ed20
 800954c:	2000000c 	.word	0x2000000c
 8009550:	e000ef34 	.word	0xe000ef34

08009554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
	__asm volatile
 800955a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	607b      	str	r3, [r7, #4]
}
 800956c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <vPortEnterCritical+0x58>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	4a0d      	ldr	r2, [pc, #52]	; (80095ac <vPortEnterCritical+0x58>)
 8009576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009578:	4b0c      	ldr	r3, [pc, #48]	; (80095ac <vPortEnterCritical+0x58>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d10f      	bne.n	80095a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <vPortEnterCritical+0x5c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800958a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	603b      	str	r3, [r7, #0]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <vPortEnterCritical+0x4a>
	}
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	2000000c 	.word	0x2000000c
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <vPortExitCritical+0x50>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <vPortExitCritical+0x24>
	__asm volatile
 80095c2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	607b      	str	r3, [r7, #4]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <vPortExitCritical+0x50>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	4a09      	ldr	r2, [pc, #36]	; (8009604 <vPortExitCritical+0x50>)
 80095e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <vPortExitCritical+0x50>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <vPortExitCritical+0x42>
 80095ea:	2300      	movs	r3, #0
 80095ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	f383 8811 	msr	BASEPRI, r3
}
 80095f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	2000000c 	.word	0x2000000c
	...

08009610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009610:	f3ef 8009 	mrs	r0, PSP
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	4b15      	ldr	r3, [pc, #84]	; (8009670 <pxCurrentTCBConst>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	f01e 0f10 	tst.w	lr, #16
 8009620:	bf08      	it	eq
 8009622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962a:	6010      	str	r0, [r2, #0]
 800962c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009630:	f04f 0070 	mov.w	r0, #112	; 0x70
 8009634:	f380 8811 	msr	BASEPRI, r0
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f7fe fdd6 	bl	80081f0 <vTaskSwitchContext>
 8009644:	f04f 0000 	mov.w	r0, #0
 8009648:	f380 8811 	msr	BASEPRI, r0
 800964c:	bc09      	pop	{r0, r3}
 800964e:	6819      	ldr	r1, [r3, #0]
 8009650:	6808      	ldr	r0, [r1, #0]
 8009652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009656:	f01e 0f10 	tst.w	lr, #16
 800965a:	bf08      	it	eq
 800965c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009660:	f380 8809 	msr	PSP, r0
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	f3af 8000 	nop.w

08009670 <pxCurrentTCBConst>:
 8009670:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop

08009678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
	__asm volatile
 800967e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	607b      	str	r3, [r7, #4]
}
 8009690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009692:	f7fe fcf3 	bl	800807c <xTaskIncrementTick>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <xPortSysTickHandler+0x40>)
 800969e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f383 8811 	msr	BASEPRI, r3
}
 80096ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <vPortSetupTimerInterrupt+0x38>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <vPortSetupTimerInterrupt+0x3c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <vPortSetupTimerInterrupt+0x40>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	4a09      	ldr	r2, [pc, #36]	; (8009700 <vPortSetupTimerInterrupt+0x44>)
 80096da:	3b01      	subs	r3, #1
 80096dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096e0:	2207      	movs	r2, #7
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000e010 	.word	0xe000e010
 80096f4:	e000e018 	.word	0xe000e018
 80096f8:	20000000 	.word	0x20000000
 80096fc:	10624dd3 	.word	0x10624dd3
 8009700:	e000e014 	.word	0xe000e014

08009704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009714 <vPortEnableVFP+0x10>
 8009708:	6801      	ldr	r1, [r0, #0]
 800970a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800970e:	6001      	str	r1, [r0, #0]
 8009710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009712:	bf00      	nop
 8009714:	e000ed88 	.word	0xe000ed88

08009718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800971e:	f3ef 8305 	mrs	r3, IPSR
 8009722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d914      	bls.n	8009754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800972a:	4a17      	ldr	r2, [pc, #92]	; (8009788 <vPortValidateInterruptPriority+0x70>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <vPortValidateInterruptPriority+0x74>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	7afa      	ldrb	r2, [r7, #11]
 800973a:	429a      	cmp	r2, r3
 800973c:	d20a      	bcs.n	8009754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800973e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	607b      	str	r3, [r7, #4]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <vPortValidateInterruptPriority+0x78>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <vPortValidateInterruptPriority+0x7c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d90a      	bls.n	800977a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009764:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	603b      	str	r3, [r7, #0]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <vPortValidateInterruptPriority+0x60>
	}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	e000e3f0 	.word	0xe000e3f0
 800978c:	200010b4 	.word	0x200010b4
 8009790:	e000ed0c 	.word	0xe000ed0c
 8009794:	200010b8 	.word	0x200010b8

08009798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097a4:	f7fe fbae 	bl	8007f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097a8:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <pvPortMalloc+0x180>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097b0:	f000 f920 	bl	80099f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <pvPortMalloc+0x184>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8093 	bne.w	80098e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01d      	beq.n	8009804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097c8:	2208      	movs	r2, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <pvPortMalloc+0x6c>
	__asm volatile
 80097ee:	f04f 0370 	mov.w	r3, #112	; 0x70
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	617b      	str	r3, [r7, #20]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d06e      	beq.n	80098e8 <pvPortMalloc+0x150>
 800980a:	4b45      	ldr	r3, [pc, #276]	; (8009920 <pvPortMalloc+0x188>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d869      	bhi.n	80098e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009814:	4b43      	ldr	r3, [pc, #268]	; (8009924 <pvPortMalloc+0x18c>)
 8009816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009818:	4b42      	ldr	r3, [pc, #264]	; (8009924 <pvPortMalloc+0x18c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800981e:	e004      	b.n	800982a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <pvPortMalloc+0xa4>
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f1      	bne.n	8009820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800983c:	4b36      	ldr	r3, [pc, #216]	; (8009918 <pvPortMalloc+0x180>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	429a      	cmp	r2, r3
 8009844:	d050      	beq.n	80098e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2208      	movs	r2, #8
 800984c:	4413      	add	r3, r2
 800984e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	2308      	movs	r3, #8
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	429a      	cmp	r2, r3
 8009866:	d91f      	bls.n	80098a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4413      	add	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <pvPortMalloc+0xf8>
	__asm volatile
 800987a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	613b      	str	r3, [r7, #16]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1ad2      	subs	r2, r2, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098a2:	69b8      	ldr	r0, [r7, #24]
 80098a4:	f000 f908 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098a8:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <pvPortMalloc+0x188>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <pvPortMalloc+0x188>)
 80098b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <pvPortMalloc+0x188>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b1b      	ldr	r3, [pc, #108]	; (8009928 <pvPortMalloc+0x190>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d203      	bcs.n	80098ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <pvPortMalloc+0x188>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a18      	ldr	r2, [pc, #96]	; (8009928 <pvPortMalloc+0x190>)
 80098c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <pvPortMalloc+0x184>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <pvPortMalloc+0x194>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <pvPortMalloc+0x194>)
 80098e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098e8:	f7fe fb1a 	bl	8007f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <pvPortMalloc+0x174>
	__asm volatile
 80098f6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <pvPortMalloc+0x172>
	return pvReturn;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3728      	adds	r7, #40	; 0x28
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20005ee4 	.word	0x20005ee4
 800991c:	20005ef8 	.word	0x20005ef8
 8009920:	20005ee8 	.word	0x20005ee8
 8009924:	20005edc 	.word	0x20005edc
 8009928:	20005eec 	.word	0x20005eec
 800992c:	20005ef0 	.word	0x20005ef0

08009930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d04d      	beq.n	80099de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009942:	2308      	movs	r3, #8
 8009944:	425b      	negs	r3, r3
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <vPortFree+0xb8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <vPortFree+0x44>
	__asm volatile
 800995e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	60fb      	str	r3, [r7, #12]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <vPortFree+0x62>
	__asm volatile
 800997c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60bb      	str	r3, [r7, #8]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <vPortFree+0xb8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4013      	ands	r3, r2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d01e      	beq.n	80099de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11a      	bne.n	80099de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <vPortFree+0xb8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099b8:	f7fe faa4 	bl	8007f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <vPortFree+0xbc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <vPortFree+0xbc>)
 80099c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f000 f874 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <vPortFree+0xc0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	4a06      	ldr	r2, [pc, #24]	; (80099f0 <vPortFree+0xc0>)
 80099d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099da:	f7fe faa1 	bl	8007f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099de:	bf00      	nop
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20005ef8 	.word	0x20005ef8
 80099ec:	20005ee8 	.word	0x20005ee8
 80099f0:	20005ef4 	.word	0x20005ef4

080099f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80099fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a00:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <prvHeapInit+0xac>)
 8009a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00c      	beq.n	8009a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3307      	adds	r3, #7
 8009a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <prvHeapInit+0xac>)
 8009a24:	4413      	add	r3, r2
 8009a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a2c:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a40:	2208      	movs	r2, #8
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a5e:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <prvHeapInit+0xb8>)
 8009a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <prvHeapInit+0xbc>)
 8009a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a8c:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <prvHeapInit+0xc0>)
 8009a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	200010bc 	.word	0x200010bc
 8009aa4:	20005edc 	.word	0x20005edc
 8009aa8:	20005ee4 	.word	0x20005ee4
 8009aac:	20005eec 	.word	0x20005eec
 8009ab0:	20005ee8 	.word	0x20005ee8
 8009ab4:	20005ef8 	.word	0x20005ef8

08009ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ac0:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <prvInsertBlockIntoFreeList+0xac>)
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e002      	b.n	8009acc <prvInsertBlockIntoFreeList+0x14>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d8f7      	bhi.n	8009ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d108      	bne.n	8009afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	441a      	add	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d118      	bne.n	8009b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d00d      	beq.n	8009b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	e008      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e003      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d002      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	20005edc 	.word	0x20005edc
 8009b68:	20005ee4 	.word	0x20005ee4

08009b6c <CanTP_WaitData>:

#include "CanTP.h"
#include "main.h"

static HAL_StatusTypeDef CanTP_WaitData(CanTP_HandleTypedef* hCanTP, uint32_t Timeout)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
	int Status = osEventFlagsWait(hCanTP->Status, CANTP_RCV_DoneFlag, osFlagsWaitAll, Timeout);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	2101      	movs	r1, #1
 8009b80:	f7fc fc1a 	bl	80063b8 <osEventFlagsWait>
 8009b84:	4603      	mov	r3, r0
 8009b86:	60fb      	str	r3, [r7, #12]
	if (Status == osFlagsErrorTimeout) return HAL_TIMEOUT;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f113 0f02 	cmn.w	r3, #2
 8009b8e:	d101      	bne.n	8009b94 <CanTP_WaitData+0x28>
 8009b90:	2303      	movs	r3, #3
 8009b92:	e005      	b.n	8009ba0 <CanTP_WaitData+0x34>
	else if( Status < 0 )return HAL_ERROR;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	da01      	bge.n	8009b9e <CanTP_WaitData+0x32>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <CanTP_WaitData+0x34>
	return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <CanTP_RcvCBHandler>:

HAL_StatusTypeDef CanTP_RcvCBHandler(CanTP_HandleTypedef* hCanTP, uint8_t* Data, uint8_t DataLen)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	71fb      	strb	r3, [r7, #7]
	memcpy(hCanTP->CanRxBuffer, Data, DataLen);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3334      	adds	r3, #52	; 0x34
 8009bba:	79fa      	ldrb	r2, [r7, #7]
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 fb8a 	bl	800a2d8 <memcpy>
	hCanTP->CanRxLen = DataLen;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	79fa      	ldrb	r2, [r7, #7]
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	osEventFlagsSet(hCanTP->Status, CANTP_RCV_DoneFlag);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fc fbac 	bl	8006330 <osEventFlagsSet>
	return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <CanTP_TxSF>:

static HAL_StatusTypeDef CanTP_TxSF(CanTP_HandleTypedef* hCanTP, CanTP_SFFrameTypedef FrameInfo)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	1d3b      	adds	r3, r7, #4
 8009bec:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t Payload[8] = {0};
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
	if(FrameInfo.SF_DL > 7) return HAL_ERROR;
 8009bf8:	793b      	ldrb	r3, [r7, #4]
 8009bfa:	2b07      	cmp	r3, #7
 8009bfc:	d901      	bls.n	8009c02 <CanTP_TxSF+0x20>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e01f      	b.n	8009c42 <CanTP_TxSF+0x60>
	Payload[0] = CANTP_SF_ID | FrameInfo.SF_DL;
 8009c02:	793b      	ldrb	r3, [r7, #4]
 8009c04:	743b      	strb	r3, [r7, #16]
	memcpy(Payload + 1, FrameInfo.Data, FrameInfo.SF_DL);
 8009c06:	f107 0310 	add.w	r3, r7, #16
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	68b9      	ldr	r1, [r7, #8]
 8009c0e:	793a      	ldrb	r2, [r7, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fb61 	bl	800a2d8 <memcpy>
	memset(Payload + 1 + FrameInfo.SF_DL, 0x55, 8 - FrameInfo.SF_DL - 1);
 8009c16:	793b      	ldrb	r3, [r7, #4]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	f107 0210 	add.w	r2, r7, #16
 8009c1e:	4413      	add	r3, r2
 8009c20:	793a      	ldrb	r2, [r7, #4]
 8009c22:	f1c2 0207 	rsb	r2, r2, #7
 8009c26:	2155      	movs	r1, #85	; 0x55
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fb63 	bl	800a2f4 <memset>
	return CAN_Transmit(hCanTP->hcan, hCanTP->CanTxID, Payload, 8);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6858      	ldr	r0, [r3, #4]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8819      	ldrh	r1, [r3, #0]
 8009c36:	f107 0210 	add.w	r2, r7, #16
 8009c3a:	2308      	movs	r3, #8
 8009c3c:	f7f6 fc9a 	bl	8000574 <CAN_Transmit>
 8009c40:	4603      	mov	r3, r0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <CanTP_TxFF>:

static HAL_StatusTypeDef CanTP_TxFF(CanTP_HandleTypedef* hCanTP, CanTP_FFFrameTypedef FrameInfo)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b086      	sub	sp, #24
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	1d3b      	adds	r3, r7, #4
 8009c54:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t Payload[8] = {0};
 8009c58:	2300      	movs	r3, #0
 8009c5a:	613b      	str	r3, [r7, #16]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]
	Payload[0] = CANTP_FF_ID | (FrameInfo.FF_DL>>8);
 8009c60:	88bb      	ldrh	r3, [r7, #4]
 8009c62:	0a1b      	lsrs	r3, r3, #8
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f043 0310 	orr.w	r3, r3, #16
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	743b      	strb	r3, [r7, #16]
	Payload[1] = FrameInfo.FF_DL;
 8009c70:	88bb      	ldrh	r3, [r7, #4]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	747b      	strb	r3, [r7, #17]
	memcpy(Payload + 2, FrameInfo.Data, 6);
 8009c76:	f107 0310 	add.w	r3, r7, #16
 8009c7a:	3302      	adds	r3, #2
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	2206      	movs	r2, #6
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fb29 	bl	800a2d8 <memcpy>
	return CAN_Transmit(hCanTP->hcan, hCanTP->CanTxID, Payload, 8);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6858      	ldr	r0, [r3, #4]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8819      	ldrh	r1, [r3, #0]
 8009c8e:	f107 0210 	add.w	r2, r7, #16
 8009c92:	2308      	movs	r3, #8
 8009c94:	f7f6 fc6e 	bl	8000574 <CAN_Transmit>
 8009c98:	4603      	mov	r3, r0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <CanTP_TxCF>:

static HAL_StatusTypeDef CanTP_TxCF(CanTP_HandleTypedef* hCanTP, CanTP_CFFrameTypedef FrameInfo)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b086      	sub	sp, #24
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	4638      	mov	r0, r7
 8009cac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t Payload[8] = {0};
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	617b      	str	r3, [r7, #20]
	Payload[0] = CANTP_CF_ID | FrameInfo.SN;
 8009cb8:	783b      	ldrb	r3, [r7, #0]
 8009cba:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	743b      	strb	r3, [r7, #16]
	memcpy(Payload + 1, FrameInfo.Data, FrameInfo.DataLen);
 8009cc2:	f107 0310 	add.w	r3, r7, #16
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	7a3a      	ldrb	r2, [r7, #8]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 fb03 	bl	800a2d8 <memcpy>
	if(FrameInfo.DataLen < 7)
 8009cd2:	7a3b      	ldrb	r3, [r7, #8]
 8009cd4:	2b06      	cmp	r3, #6
 8009cd6:	d80b      	bhi.n	8009cf0 <CanTP_TxCF+0x4e>
	{
		memset(Payload + 1 + FrameInfo.DataLen, 0x55, 7 - FrameInfo.DataLen);
 8009cd8:	7a3b      	ldrb	r3, [r7, #8]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	f107 0210 	add.w	r2, r7, #16
 8009ce0:	4413      	add	r3, r2
 8009ce2:	7a3a      	ldrb	r2, [r7, #8]
 8009ce4:	f1c2 0207 	rsb	r2, r2, #7
 8009ce8:	2155      	movs	r1, #85	; 0x55
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 fb02 	bl	800a2f4 <memset>
	}
	return CAN_Transmit(hCanTP->hcan, hCanTP->CanTxID, Payload, 8);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6858      	ldr	r0, [r3, #4]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8819      	ldrh	r1, [r3, #0]
 8009cf8:	f107 0210 	add.w	r2, r7, #16
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f7f6 fc39 	bl	8000574 <CAN_Transmit>
 8009d02:	4603      	mov	r3, r0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <CanTP_TxFC>:

static HAL_StatusTypeDef CanTP_TxFC(CanTP_HandleTypedef* hCanTP, CanTP_FCFrameTypedef FrameInfo)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	uint8_t Payload[8] = {0};
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
	Payload[0] = CANTP_FC_ID | FrameInfo.FS;
 8009d1e:	783b      	ldrb	r3, [r7, #0]
 8009d20:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	723b      	strb	r3, [r7, #8]
	Payload[1] =  FrameInfo.BS;
 8009d28:	787b      	ldrb	r3, [r7, #1]
 8009d2a:	727b      	strb	r3, [r7, #9]
	Payload[2] = FrameInfo.STmin;
 8009d2c:	78bb      	ldrb	r3, [r7, #2]
 8009d2e:	72bb      	strb	r3, [r7, #10]
	memset(Payload + 3, 0x55, 5);
 8009d30:	f107 0308 	add.w	r3, r7, #8
 8009d34:	3303      	adds	r3, #3
 8009d36:	2205      	movs	r2, #5
 8009d38:	2155      	movs	r1, #85	; 0x55
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fada 	bl	800a2f4 <memset>
	return CAN_Transmit(hCanTP->hcan, hCanTP->CanTxID, Payload, 8);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6858      	ldr	r0, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	8819      	ldrh	r1, [r3, #0]
 8009d48:	f107 0208 	add.w	r2, r7, #8
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	f7f6 fc11 	bl	8000574 <CAN_Transmit>
 8009d52:	4603      	mov	r3, r0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <CanTP_GetFrameType>:
static uint8_t CanTP_GetFrameType(uint8_t Data[])
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	return Data[0] & 0xf0;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f023 030f 	bic.w	r3, r3, #15
 8009d6c:	b2db      	uxtb	r3, r3
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <CanTP_WaitFC>:
static HAL_StatusTypeDef CanTP_WaitFC(CanTP_HandleTypedef* hCanTP, CanTP_FCFrameTypedef* FrameInfo, uint32_t Timeout)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
	CanTP_WaitData(hCanTP,Timeout);
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f7ff feef 	bl	8009b6c <CanTP_WaitData>
	uint8_t RcvData[8] = {0};
 8009d8e:	2300      	movs	r3, #0
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	2300      	movs	r3, #0
 8009d94:	617b      	str	r3, [r7, #20]
	memcpy(RcvData, hCanTP->CanRxBuffer, hCanTP->CanRxLen);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da2:	461a      	mov	r2, r3
 8009da4:	f107 0310 	add.w	r3, r7, #16
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 fa95 	bl	800a2d8 <memcpy>
	memset(hCanTP->CanRxBuffer, 0, 8);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3334      	adds	r3, #52	; 0x34
 8009db2:	2208      	movs	r2, #8
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fa9c 	bl	800a2f4 <memset>
	hCanTP->CanRxLen = 0;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if((RcvData[0]& 0xf0) != CANTP_FC_ID) return HAL_ERROR;
 8009dc4:	7c3b      	ldrb	r3, [r7, #16]
 8009dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dca:	2bb0      	cmp	r3, #176	; 0xb0
 8009dcc:	d001      	beq.n	8009dd2 <CanTP_WaitFC+0x58>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e00c      	b.n	8009dec <CanTP_WaitFC+0x72>
	FrameInfo->BS = RcvData[1];
 8009dd2:	7c7a      	ldrb	r2, [r7, #17]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	705a      	strb	r2, [r3, #1]
	FrameInfo->STmin = RcvData[2];
 8009dd8:	7cba      	ldrb	r2, [r7, #18]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	709a      	strb	r2, [r3, #2]
	FrameInfo->FS = RcvData[0] &0x0f;
 8009dde:	7c3b      	ldrb	r3, [r7, #16]
 8009de0:	f003 030f 	and.w	r3, r3, #15
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <CanTP_WaitCF>:
static HAL_StatusTypeDef CanTP_WaitCF(CanTP_HandleTypedef* hCanTP, CanTP_CFFrameTypedef* FrameInfo, uint32_t Timeout)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
	CanTP_WaitData(hCanTP,Timeout);
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f7ff feb2 	bl	8009b6c <CanTP_WaitData>
	uint8_t RcvData[8] = {0};
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	61bb      	str	r3, [r7, #24]
	uint8_t RcvLen = hCanTP->CanRxLen;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e16:	77fb      	strb	r3, [r7, #31]
	memcpy(RcvData, hCanTP->CanRxBuffer, hCanTP->CanRxLen);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e24:	461a      	mov	r2, r3
 8009e26:	f107 0314 	add.w	r3, r7, #20
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 fa54 	bl	800a2d8 <memcpy>
	memset(hCanTP->CanRxBuffer, 0, 8);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3334      	adds	r3, #52	; 0x34
 8009e34:	2208      	movs	r2, #8
 8009e36:	2100      	movs	r1, #0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fa5b 	bl	800a2f4 <memset>
	hCanTP->CanRxLen = 0;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if((RcvData[0]& 0xf0) != CANTP_CF_ID) return HAL_ERROR;
 8009e46:	7d3b      	ldrb	r3, [r7, #20]
 8009e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e4c:	2ba0      	cmp	r3, #160	; 0xa0
 8009e4e:	d001      	beq.n	8009e54 <CanTP_WaitCF+0x60>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e014      	b.n	8009e7e <CanTP_WaitCF+0x8a>
	FrameInfo->SN = RcvData[0]&0x0f;
 8009e54:	7d3b      	ldrb	r3, [r7, #20]
 8009e56:	f003 030f 	and.w	r3, r3, #15
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	701a      	strb	r2, [r3, #0]
	FrameInfo->DataLen = RcvLen - 1;
 8009e60:	7ffb      	ldrb	r3, [r7, #31]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	721a      	strb	r2, [r3, #8]
	memcpy(FrameInfo->Data, RcvData+1, RcvLen);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6858      	ldr	r0, [r3, #4]
 8009e6e:	f107 0314 	add.w	r3, r7, #20
 8009e72:	3301      	adds	r3, #1
 8009e74:	7ffa      	ldrb	r2, [r7, #31]
 8009e76:	4619      	mov	r1, r3
 8009e78:	f000 fa2e 	bl	800a2d8 <memcpy>
	return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3720      	adds	r7, #32
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <CanTP_TxSingleFrame>:

static HAL_StatusTypeDef CanTP_TxSingleFrame(CanTP_HandleTypedef* hCanTP, CanTP_Packet Packet)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b086      	sub	sp, #24
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	1d3b      	adds	r3, r7, #4
 8009e90:	e883 0006 	stmia.w	r3, {r1, r2}
	CanTP_SFFrameTypedef MsgFrame;
	MsgFrame.SF_DL = Packet.Len;
 8009e94:	88bb      	ldrh	r3, [r7, #4]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	743b      	strb	r3, [r7, #16]
	MsgFrame.Data = Packet.Data;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	617b      	str	r3, [r7, #20]
	HAL_CheckERR(CanTP_TxSF(hCanTP, MsgFrame));
 8009e9e:	f107 0310 	add.w	r3, r7, #16
 8009ea2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f7ff fe9b 	bl	8009be2 <CanTP_TxSF>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d008      	beq.n	8009ec4 <CanTP_TxSingleFrame+0x3e>
 8009eb2:	f107 0310 	add.w	r3, r7, #16
 8009eb6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff fe91 	bl	8009be2 <CanTP_TxSF>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	e000      	b.n	8009ec6 <CanTP_TxSingleFrame+0x40>
	return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <CanTP_TxMultiFrame>:
static HAL_StatusTypeDef CanTP_TxMultiFrame(CanTP_HandleTypedef* hCanTP, CanTP_Packet Packet)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b08c      	sub	sp, #48	; 0x30
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	1d3b      	adds	r3, r7, #4
 8009ed8:	e883 0006 	stmia.w	r3, {r1, r2}
	CanTP_FFFrameTypedef FFFrame = {0};
 8009edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	605a      	str	r2, [r3, #4]
	CanTP_CFFrameTypedef CFFrame = {0};
 8009ee6:	f107 0318 	add.w	r3, r7, #24
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	605a      	str	r2, [r3, #4]
 8009ef0:	609a      	str	r2, [r3, #8]
	CanTP_FCFrameTypedef FCFrame = {0};
 8009ef2:	f107 0314 	add.w	r3, r7, #20
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	460a      	mov	r2, r1
 8009efa:	801a      	strh	r2, [r3, #0]
 8009efc:	460a      	mov	r2, r1
 8009efe:	709a      	strb	r2, [r3, #2]

	FFFrame.FF_DL = Packet.Len;
 8009f00:	88bb      	ldrh	r3, [r7, #4]
 8009f02:	84bb      	strh	r3, [r7, #36]	; 0x24
	FFFrame.Data = Packet.Data;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_CheckERR(CanTP_TxFF(hCanTP, FFFrame));
 8009f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7ff fe9a 	bl	8009c4a <CanTP_TxFF>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d008      	beq.n	8009f2e <CanTP_TxMultiFrame+0x60>
 8009f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7ff fe90 	bl	8009c4a <CanTP_TxFF>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	e046      	b.n	8009fbc <CanTP_TxMultiFrame+0xee>
	HAL_CheckERR(CanTP_WaitFC(hCanTP, &FCFrame, 200));
 8009f2e:	f107 0314 	add.w	r3, r7, #20
 8009f32:	22c8      	movs	r2, #200	; 0xc8
 8009f34:	4619      	mov	r1, r3
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7ff ff1f 	bl	8009d7a <CanTP_WaitFC>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <CanTP_TxMultiFrame+0x86>
 8009f42:	f107 0314 	add.w	r3, r7, #20
 8009f46:	22c8      	movs	r2, #200	; 0xc8
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff ff15 	bl	8009d7a <CanTP_WaitFC>
 8009f50:	4603      	mov	r3, r0
 8009f52:	e033      	b.n	8009fbc <CanTP_TxMultiFrame+0xee>
	uint16_t DataSent = 6;
 8009f54:	2306      	movs	r3, #6
 8009f56:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (DataSent < Packet.Len)
 8009f58:	e02b      	b.n	8009fb2 <CanTP_TxMultiFrame+0xe4>
	{
		CFFrame.Data = Packet.Data + DataSent;
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f5e:	4413      	add	r3, r2
 8009f60:	61fb      	str	r3, [r7, #28]
		CFFrame.DataLen = (Packet.Len - DataSent < 7) ? Packet.Len - DataSent : 7;
 8009f62:	88bb      	ldrh	r3, [r7, #4]
 8009f64:	461a      	mov	r2, r3
 8009f66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	2b07      	cmp	r3, #7
 8009f6c:	bfa8      	it	ge
 8009f6e:	2307      	movge	r3, #7
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f887 3020 	strb.w	r3, [r7, #32]
		CFFrame.SN++;
 8009f76:	7e3b      	ldrb	r3, [r7, #24]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	763b      	strb	r3, [r7, #24]
		osDelay(5);
 8009f7e:	2005      	movs	r0, #5
 8009f80:	f7fc f97c 	bl	800627c <osDelay>
//		SyncPrintf("CF Tx Len %d, SN %d \r\n", CFFrame.DataLen, CFFrame.SN);
		HAL_CheckERR(CanTP_TxCF(hCanTP, CFFrame));
 8009f84:	f107 0318 	add.w	r3, r7, #24
 8009f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff fe89 	bl	8009ca2 <CanTP_TxCF>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <CanTP_TxMultiFrame+0xd8>
 8009f96:	f107 0318 	add.w	r3, r7, #24
 8009f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7ff fe80 	bl	8009ca2 <CanTP_TxCF>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	e00a      	b.n	8009fbc <CanTP_TxMultiFrame+0xee>
		DataSent += CFFrame.DataLen;
 8009fa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009fae:	4413      	add	r3, r2
 8009fb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (DataSent < Packet.Len)
 8009fb2:	88bb      	ldrh	r3, [r7, #4]
 8009fb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d3cf      	bcc.n	8009f5a <CanTP_TxMultiFrame+0x8c>
	}
	return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3730      	adds	r7, #48	; 0x30
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <CanTP_Init>:


HAL_StatusTypeDef CanTP_Init(CanTP_HandleTypedef* hCanTP)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	HAL_CheckERR(HAL_CAN_ConfigFilter(hCanTP->hcan, &(hCanTP->CanFilter)));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7f8 fb76 	bl	80026c8 <HAL_CAN_ConfigFilter>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <CanTP_Init+0x32>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3308      	adds	r3, #8
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7f8 fb6b 	bl	80026c8 <HAL_CAN_ConfigFilter>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	e03c      	b.n	800a070 <CanTP_Init+0xac>
	if(hCanTP->CanFilter.FilterFIFOAssignment == CAN_FilterFIFO0)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d110      	bne.n	800a020 <CanTP_Init+0x5c>
	{
		HAL_CheckERR(HAL_CAN_ActivateNotification(hCanTP->hcan, CAN_IT_RX_FIFO0_MSG_PENDING));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	2102      	movs	r1, #2
 800a004:	4618      	mov	r0, r3
 800a006:	f7f8 fea5 	bl	8002d54 <HAL_CAN_ActivateNotification>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d018      	beq.n	800a042 <CanTP_Init+0x7e>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	2102      	movs	r1, #2
 800a016:	4618      	mov	r0, r3
 800a018:	f7f8 fe9c 	bl	8002d54 <HAL_CAN_ActivateNotification>
 800a01c:	4603      	mov	r3, r0
 800a01e:	e027      	b.n	800a070 <CanTP_Init+0xac>
	}
	else
	{
		HAL_CheckERR(HAL_CAN_ActivateNotification(hCanTP->hcan, CAN_IT_RX_FIFO1_MSG_PENDING));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2110      	movs	r1, #16
 800a026:	4618      	mov	r0, r3
 800a028:	f7f8 fe94 	bl	8002d54 <HAL_CAN_ActivateNotification>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d007      	beq.n	800a042 <CanTP_Init+0x7e>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2110      	movs	r1, #16
 800a038:	4618      	mov	r0, r3
 800a03a:	f7f8 fe8b 	bl	8002d54 <HAL_CAN_ActivateNotification>
 800a03e:	4603      	mov	r3, r0
 800a040:	e016      	b.n	800a070 <CanTP_Init+0xac>
	}
	HAL_CAN_ActivateNotification(hCanTP->hcan, CAN_IT_ERROR | CAN_IT_LAST_ERROR_CODE);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7f8 fe82 	bl	8002d54 <HAL_CAN_ActivateNotification>
	HAL_CheckERR(HAL_CAN_Start(hCanTP->hcan));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	4618      	mov	r0, r3
 800a056:	f7f8 fc17 	bl	8002888 <HAL_CAN_Start>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d006      	beq.n	800a06e <CanTP_Init+0xaa>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	4618      	mov	r0, r3
 800a066:	f7f8 fc0f 	bl	8002888 <HAL_CAN_Start>
 800a06a:	4603      	mov	r3, r0
 800a06c:	e000      	b.n	800a070 <CanTP_Init+0xac>
	return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <CanTP_Transmit>:

HAL_StatusTypeDef CanTP_Transmit(CanTP_HandleTypedef* hCanTP, CanTP_Packet Packet)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	1d3b      	adds	r3, r7, #4
 800a082:	e883 0006 	stmia.w	r3, {r1, r2}

	if(Packet.Len <= 7)
 800a086:	88bb      	ldrh	r3, [r7, #4]
 800a088:	2b07      	cmp	r3, #7
 800a08a:	d810      	bhi.n	800a0ae <CanTP_Transmit+0x36>
	{
		HAL_CheckERR(CanTP_TxSingleFrame(hCanTP, Packet));
 800a08c:	1d3b      	adds	r3, r7, #4
 800a08e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff fef7 	bl	8009e86 <CanTP_TxSingleFrame>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d018      	beq.n	800a0d0 <CanTP_Transmit+0x58>
 800a09e:	1d3b      	adds	r3, r7, #4
 800a0a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7ff feee 	bl	8009e86 <CanTP_TxSingleFrame>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	e011      	b.n	800a0d2 <CanTP_Transmit+0x5a>
	}
	else
	{
		HAL_CheckERR(CanTP_TxMultiFrame(hCanTP, Packet));
 800a0ae:	1d3b      	adds	r3, r7, #4
 800a0b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7ff ff0a 	bl	8009ece <CanTP_TxMultiFrame>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d007      	beq.n	800a0d0 <CanTP_Transmit+0x58>
 800a0c0:	1d3b      	adds	r3, r7, #4
 800a0c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7ff ff01 	bl	8009ece <CanTP_TxMultiFrame>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	e000      	b.n	800a0d2 <CanTP_Transmit+0x5a>
	}
	return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <CanTP_Receive>:


HAL_StatusTypeDef CanTP_Receive(CanTP_HandleTypedef* hCanTP, CanTP_Packet* Packet, uint32_t Timeout)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08c      	sub	sp, #48	; 0x30
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
//	}
//	else
//	{
//		HAL_CheckERR(HAL_CAN_ActivateNotification(hCanTP->hcan, CAN_IT_RX_FIFO1_MSG_PENDING));
//	}
	HAL_CheckERR(CanTP_WaitData(hCanTP,Timeout));
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7ff fd3e 	bl	8009b6c <CanTP_WaitData>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <CanTP_Receive+0x26>
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff fd37 	bl	8009b6c <CanTP_WaitData>
 800a0fe:	4603      	mov	r3, r0
 800a100:	e0b7      	b.n	800a272 <CanTP_Receive+0x196>
	uint8_t FrameType = CanTP_GetFrameType(hCanTP->CanRxBuffer);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	3334      	adds	r3, #52	; 0x34
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff fe28 	bl	8009d5c <CanTP_GetFrameType>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	if(FrameType == CANTP_SF_ID)
 800a112:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d11c      	bne.n	800a154 <CanTP_Receive+0x78>
	{
		uint8_t* RcvData = hCanTP->CanRxBuffer;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3334      	adds	r3, #52	; 0x34
 800a11e:	623b      	str	r3, [r7, #32]
		Packet->Len = RcvData[0] & 0x0f;
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	f003 030f 	and.w	r3, r3, #15
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	801a      	strh	r2, [r3, #0]
		Packet->Data = pvPortMalloc(Packet->Len);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fb2f 	bl	8009798 <pvPortMalloc>
 800a13a:	4602      	mov	r2, r0
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	605a      	str	r2, [r3, #4]
		memcpy(Packet->Data, RcvData + 1, Packet->Len);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	6858      	ldr	r0, [r3, #4]
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	1c59      	adds	r1, r3, #1
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	f000 f8c3 	bl	800a2d8 <memcpy>
 800a152:	e08d      	b.n	800a270 <CanTP_Receive+0x194>
	}
	else if(FrameType == CANTP_FF_ID)
 800a154:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a158:	2b10      	cmp	r3, #16
 800a15a:	f040 8087 	bne.w	800a26c <CanTP_Receive+0x190>
	{
		CanTP_CFFrameTypedef CFFrame = {0};
 800a15e:	f107 0314 	add.w	r3, r7, #20
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	605a      	str	r2, [r3, #4]
 800a168:	609a      	str	r2, [r3, #8]
		CanTP_FCFrameTypedef FCFrame = {0};
 800a16a:	f107 0310 	add.w	r3, r7, #16
 800a16e:	2100      	movs	r1, #0
 800a170:	460a      	mov	r2, r1
 800a172:	801a      	strh	r2, [r3, #0]
 800a174:	460a      	mov	r2, r1
 800a176:	709a      	strb	r2, [r3, #2]

		uint8_t* RcvData = hCanTP->CanRxBuffer;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	3334      	adds	r3, #52	; 0x34
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t FF_DL = ((RcvData[0] & 0x0f)<<8) | RcvData[1] ;
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	b21b      	sxth	r3, r3
 800a186:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a18a:	b21a      	sxth	r2, r3
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	3301      	adds	r3, #1
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	b21b      	sxth	r3, r3
 800a194:	4313      	orrs	r3, r2
 800a196:	b21b      	sxth	r3, r3
 800a198:	84fb      	strh	r3, [r7, #38]	; 0x26
		Packet->Len = FF_DL;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a19e:	801a      	strh	r2, [r3, #0]
		Packet->Data = pvPortMalloc(Packet->Len + 7);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	881b      	ldrh	r3, [r3, #0]
 800a1a4:	3307      	adds	r3, #7
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff faf6 	bl	8009798 <pvPortMalloc>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	605a      	str	r2, [r3, #4]
		memcpy(Packet->Data, RcvData + 2, 6);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6858      	ldr	r0, [r3, #4]
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	3302      	adds	r3, #2
 800a1ba:	2206      	movs	r2, #6
 800a1bc:	4619      	mov	r1, r3
 800a1be:	f000 f88b 	bl	800a2d8 <memcpy>
		FCFrame.BS = 8;
 800a1c2:	2308      	movs	r3, #8
 800a1c4:	747b      	strb	r3, [r7, #17]
		FCFrame.FS = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	743b      	strb	r3, [r7, #16]
		FCFrame.STmin = 25;
 800a1ca:	2319      	movs	r3, #25
 800a1cc:	74bb      	strb	r3, [r7, #18]
		CanTP_TxFC(hCanTP, FCFrame);
 800a1ce:	6939      	ldr	r1, [r7, #16]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7ff fd9b 	bl	8009d0c <CanTP_TxFC>

		uint16_t DataReceived = 6;
 800a1d6:	2306      	movs	r3, #6
 800a1d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t CurrentSN = 1;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		CFFrame.Data = (uint8_t*)pvPortMalloc(8);
 800a1e0:	2008      	movs	r0, #8
 800a1e2:	f7ff fad9 	bl	8009798 <pvPortMalloc>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	61bb      	str	r3, [r7, #24]
		while(DataReceived < FF_DL)
 800a1ea:	e02c      	b.n	800a246 <CanTP_Receive+0x16a>
		{
			HAL_CheckERR(CanTP_WaitCF(hCanTP, &CFFrame, Timeout));
 800a1ec:	f107 0314 	add.w	r3, r7, #20
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f7ff fdfd 	bl	8009df4 <CanTP_WaitCF>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d008      	beq.n	800a212 <CanTP_Receive+0x136>
 800a200:	f107 0314 	add.w	r3, r7, #20
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	4619      	mov	r1, r3
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7ff fdf3 	bl	8009df4 <CanTP_WaitCF>
 800a20e:	4603      	mov	r3, r0
 800a210:	e02f      	b.n	800a272 <CanTP_Receive+0x196>
			if(CurrentSN != CFFrame.SN ) return HAL_ERROR;
 800a212:	7d3b      	ldrb	r3, [r7, #20]
 800a214:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800a218:	429a      	cmp	r2, r3
 800a21a:	d001      	beq.n	800a220 <CanTP_Receive+0x144>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e028      	b.n	800a272 <CanTP_Receive+0x196>
			memcpy(Packet->Data + DataReceived, CFFrame.Data, 7);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a226:	4413      	add	r3, r2
 800a228:	69b9      	ldr	r1, [r7, #24]
 800a22a:	2207      	movs	r2, #7
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 f853 	bl	800a2d8 <memcpy>
			DataReceived += CFFrame.DataLen;
 800a232:	7f3b      	ldrb	r3, [r7, #28]
 800a234:	b29a      	uxth	r2, r3
 800a236:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a238:	4413      	add	r3, r2
 800a23a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			CurrentSN++;
 800a23c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a240:	3301      	adds	r3, #1
 800a242:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		while(DataReceived < FF_DL)
 800a246:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d3ce      	bcc.n	800a1ec <CanTP_Receive+0x110>
		}
		vPortFree(CFFrame.Data);
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fb6d 	bl	8009930 <vPortFree>
		Packet->Data[Packet->Len] = 0;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	8812      	ldrh	r2, [r2, #0]
 800a25e:	4413      	add	r3, r2
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
		SyncPrintf("Done Rcv \r\n");
 800a264:	4805      	ldr	r0, [pc, #20]	; (800a27c <CanTP_Receive+0x1a0>)
 800a266:	f7f6 ffdb 	bl	8001220 <SyncPrintf>
 800a26a:	e001      	b.n	800a270 <CanTP_Receive+0x194>
	}
	else
	{
		return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e000      	b.n	800a272 <CanTP_Receive+0x196>
	}
	return HAL_OK;
 800a270:	2300      	movs	r3, #0

}
 800a272:	4618      	mov	r0, r3
 800a274:	3730      	adds	r7, #48	; 0x30
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	0800afc0 	.word	0x0800afc0

0800a280 <__errno>:
 800a280:	4b01      	ldr	r3, [pc, #4]	; (800a288 <__errno+0x8>)
 800a282:	6818      	ldr	r0, [r3, #0]
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20000010 	.word	0x20000010

0800a28c <__libc_init_array>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	4d0d      	ldr	r5, [pc, #52]	; (800a2c4 <__libc_init_array+0x38>)
 800a290:	4c0d      	ldr	r4, [pc, #52]	; (800a2c8 <__libc_init_array+0x3c>)
 800a292:	1b64      	subs	r4, r4, r5
 800a294:	10a4      	asrs	r4, r4, #2
 800a296:	2600      	movs	r6, #0
 800a298:	42a6      	cmp	r6, r4
 800a29a:	d109      	bne.n	800a2b0 <__libc_init_array+0x24>
 800a29c:	4d0b      	ldr	r5, [pc, #44]	; (800a2cc <__libc_init_array+0x40>)
 800a29e:	4c0c      	ldr	r4, [pc, #48]	; (800a2d0 <__libc_init_array+0x44>)
 800a2a0:	f000 fd16 	bl	800acd0 <_init>
 800a2a4:	1b64      	subs	r4, r4, r5
 800a2a6:	10a4      	asrs	r4, r4, #2
 800a2a8:	2600      	movs	r6, #0
 800a2aa:	42a6      	cmp	r6, r4
 800a2ac:	d105      	bne.n	800a2ba <__libc_init_array+0x2e>
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
 800a2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2b4:	4798      	blx	r3
 800a2b6:	3601      	adds	r6, #1
 800a2b8:	e7ee      	b.n	800a298 <__libc_init_array+0xc>
 800a2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2be:	4798      	blx	r3
 800a2c0:	3601      	adds	r6, #1
 800a2c2:	e7f2      	b.n	800a2aa <__libc_init_array+0x1e>
 800a2c4:	0800b500 	.word	0x0800b500
 800a2c8:	0800b500 	.word	0x0800b500
 800a2cc:	0800b500 	.word	0x0800b500
 800a2d0:	0800b504 	.word	0x0800b504

0800a2d4 <__retarget_lock_acquire_recursive>:
 800a2d4:	4770      	bx	lr

0800a2d6 <__retarget_lock_release_recursive>:
 800a2d6:	4770      	bx	lr

0800a2d8 <memcpy>:
 800a2d8:	440a      	add	r2, r1
 800a2da:	4291      	cmp	r1, r2
 800a2dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2e0:	d100      	bne.n	800a2e4 <memcpy+0xc>
 800a2e2:	4770      	bx	lr
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ee:	4291      	cmp	r1, r2
 800a2f0:	d1f9      	bne.n	800a2e6 <memcpy+0xe>
 800a2f2:	bd10      	pop	{r4, pc}

0800a2f4 <memset>:
 800a2f4:	4402      	add	r2, r0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d100      	bne.n	800a2fe <memset+0xa>
 800a2fc:	4770      	bx	lr
 800a2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a302:	e7f9      	b.n	800a2f8 <memset+0x4>

0800a304 <sbrk_aligned>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4e0e      	ldr	r6, [pc, #56]	; (800a340 <sbrk_aligned+0x3c>)
 800a308:	460c      	mov	r4, r1
 800a30a:	6831      	ldr	r1, [r6, #0]
 800a30c:	4605      	mov	r5, r0
 800a30e:	b911      	cbnz	r1, 800a316 <sbrk_aligned+0x12>
 800a310:	f000 f8f6 	bl	800a500 <_sbrk_r>
 800a314:	6030      	str	r0, [r6, #0]
 800a316:	4621      	mov	r1, r4
 800a318:	4628      	mov	r0, r5
 800a31a:	f000 f8f1 	bl	800a500 <_sbrk_r>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d00a      	beq.n	800a338 <sbrk_aligned+0x34>
 800a322:	1cc4      	adds	r4, r0, #3
 800a324:	f024 0403 	bic.w	r4, r4, #3
 800a328:	42a0      	cmp	r0, r4
 800a32a:	d007      	beq.n	800a33c <sbrk_aligned+0x38>
 800a32c:	1a21      	subs	r1, r4, r0
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 f8e6 	bl	800a500 <_sbrk_r>
 800a334:	3001      	adds	r0, #1
 800a336:	d101      	bne.n	800a33c <sbrk_aligned+0x38>
 800a338:	f04f 34ff 	mov.w	r4, #4294967295
 800a33c:	4620      	mov	r0, r4
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	20005f04 	.word	0x20005f04

0800a344 <_malloc_r>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	1ccd      	adds	r5, r1, #3
 800a34a:	f025 0503 	bic.w	r5, r5, #3
 800a34e:	3508      	adds	r5, #8
 800a350:	2d0c      	cmp	r5, #12
 800a352:	bf38      	it	cc
 800a354:	250c      	movcc	r5, #12
 800a356:	2d00      	cmp	r5, #0
 800a358:	4607      	mov	r7, r0
 800a35a:	db01      	blt.n	800a360 <_malloc_r+0x1c>
 800a35c:	42a9      	cmp	r1, r5
 800a35e:	d905      	bls.n	800a36c <_malloc_r+0x28>
 800a360:	230c      	movs	r3, #12
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	2600      	movs	r6, #0
 800a366:	4630      	mov	r0, r6
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	4e2e      	ldr	r6, [pc, #184]	; (800a428 <_malloc_r+0xe4>)
 800a36e:	f000 f915 	bl	800a59c <__malloc_lock>
 800a372:	6833      	ldr	r3, [r6, #0]
 800a374:	461c      	mov	r4, r3
 800a376:	bb34      	cbnz	r4, 800a3c6 <_malloc_r+0x82>
 800a378:	4629      	mov	r1, r5
 800a37a:	4638      	mov	r0, r7
 800a37c:	f7ff ffc2 	bl	800a304 <sbrk_aligned>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	4604      	mov	r4, r0
 800a384:	d14d      	bne.n	800a422 <_malloc_r+0xde>
 800a386:	6834      	ldr	r4, [r6, #0]
 800a388:	4626      	mov	r6, r4
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	d140      	bne.n	800a410 <_malloc_r+0xcc>
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	4631      	mov	r1, r6
 800a392:	4638      	mov	r0, r7
 800a394:	eb04 0803 	add.w	r8, r4, r3
 800a398:	f000 f8b2 	bl	800a500 <_sbrk_r>
 800a39c:	4580      	cmp	r8, r0
 800a39e:	d13a      	bne.n	800a416 <_malloc_r+0xd2>
 800a3a0:	6821      	ldr	r1, [r4, #0]
 800a3a2:	3503      	adds	r5, #3
 800a3a4:	1a6d      	subs	r5, r5, r1
 800a3a6:	f025 0503 	bic.w	r5, r5, #3
 800a3aa:	3508      	adds	r5, #8
 800a3ac:	2d0c      	cmp	r5, #12
 800a3ae:	bf38      	it	cc
 800a3b0:	250c      	movcc	r5, #12
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f7ff ffa5 	bl	800a304 <sbrk_aligned>
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	d02b      	beq.n	800a416 <_malloc_r+0xd2>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	442b      	add	r3, r5
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	e00e      	b.n	800a3e4 <_malloc_r+0xa0>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	1b52      	subs	r2, r2, r5
 800a3ca:	d41e      	bmi.n	800a40a <_malloc_r+0xc6>
 800a3cc:	2a0b      	cmp	r2, #11
 800a3ce:	d916      	bls.n	800a3fe <_malloc_r+0xba>
 800a3d0:	1961      	adds	r1, r4, r5
 800a3d2:	42a3      	cmp	r3, r4
 800a3d4:	6025      	str	r5, [r4, #0]
 800a3d6:	bf18      	it	ne
 800a3d8:	6059      	strne	r1, [r3, #4]
 800a3da:	6863      	ldr	r3, [r4, #4]
 800a3dc:	bf08      	it	eq
 800a3de:	6031      	streq	r1, [r6, #0]
 800a3e0:	5162      	str	r2, [r4, r5]
 800a3e2:	604b      	str	r3, [r1, #4]
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	f104 060b 	add.w	r6, r4, #11
 800a3ea:	f000 f8dd 	bl	800a5a8 <__malloc_unlock>
 800a3ee:	f026 0607 	bic.w	r6, r6, #7
 800a3f2:	1d23      	adds	r3, r4, #4
 800a3f4:	1af2      	subs	r2, r6, r3
 800a3f6:	d0b6      	beq.n	800a366 <_malloc_r+0x22>
 800a3f8:	1b9b      	subs	r3, r3, r6
 800a3fa:	50a3      	str	r3, [r4, r2]
 800a3fc:	e7b3      	b.n	800a366 <_malloc_r+0x22>
 800a3fe:	6862      	ldr	r2, [r4, #4]
 800a400:	42a3      	cmp	r3, r4
 800a402:	bf0c      	ite	eq
 800a404:	6032      	streq	r2, [r6, #0]
 800a406:	605a      	strne	r2, [r3, #4]
 800a408:	e7ec      	b.n	800a3e4 <_malloc_r+0xa0>
 800a40a:	4623      	mov	r3, r4
 800a40c:	6864      	ldr	r4, [r4, #4]
 800a40e:	e7b2      	b.n	800a376 <_malloc_r+0x32>
 800a410:	4634      	mov	r4, r6
 800a412:	6876      	ldr	r6, [r6, #4]
 800a414:	e7b9      	b.n	800a38a <_malloc_r+0x46>
 800a416:	230c      	movs	r3, #12
 800a418:	603b      	str	r3, [r7, #0]
 800a41a:	4638      	mov	r0, r7
 800a41c:	f000 f8c4 	bl	800a5a8 <__malloc_unlock>
 800a420:	e7a1      	b.n	800a366 <_malloc_r+0x22>
 800a422:	6025      	str	r5, [r4, #0]
 800a424:	e7de      	b.n	800a3e4 <_malloc_r+0xa0>
 800a426:	bf00      	nop
 800a428:	20005f00 	.word	0x20005f00

0800a42c <cleanup_glue>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	460c      	mov	r4, r1
 800a430:	6809      	ldr	r1, [r1, #0]
 800a432:	4605      	mov	r5, r0
 800a434:	b109      	cbz	r1, 800a43a <cleanup_glue+0xe>
 800a436:	f7ff fff9 	bl	800a42c <cleanup_glue>
 800a43a:	4621      	mov	r1, r4
 800a43c:	4628      	mov	r0, r5
 800a43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a442:	f000 b8b7 	b.w	800a5b4 <_free_r>
	...

0800a448 <_reclaim_reent>:
 800a448:	4b2c      	ldr	r3, [pc, #176]	; (800a4fc <_reclaim_reent+0xb4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4283      	cmp	r3, r0
 800a44e:	b570      	push	{r4, r5, r6, lr}
 800a450:	4604      	mov	r4, r0
 800a452:	d051      	beq.n	800a4f8 <_reclaim_reent+0xb0>
 800a454:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a456:	b143      	cbz	r3, 800a46a <_reclaim_reent+0x22>
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d14a      	bne.n	800a4f4 <_reclaim_reent+0xac>
 800a45e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a460:	6819      	ldr	r1, [r3, #0]
 800a462:	b111      	cbz	r1, 800a46a <_reclaim_reent+0x22>
 800a464:	4620      	mov	r0, r4
 800a466:	f000 f8a5 	bl	800a5b4 <_free_r>
 800a46a:	6961      	ldr	r1, [r4, #20]
 800a46c:	b111      	cbz	r1, 800a474 <_reclaim_reent+0x2c>
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 f8a0 	bl	800a5b4 <_free_r>
 800a474:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a476:	b111      	cbz	r1, 800a47e <_reclaim_reent+0x36>
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 f89b 	bl	800a5b4 <_free_r>
 800a47e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a480:	b111      	cbz	r1, 800a488 <_reclaim_reent+0x40>
 800a482:	4620      	mov	r0, r4
 800a484:	f000 f896 	bl	800a5b4 <_free_r>
 800a488:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a48a:	b111      	cbz	r1, 800a492 <_reclaim_reent+0x4a>
 800a48c:	4620      	mov	r0, r4
 800a48e:	f000 f891 	bl	800a5b4 <_free_r>
 800a492:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a494:	b111      	cbz	r1, 800a49c <_reclaim_reent+0x54>
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f88c 	bl	800a5b4 <_free_r>
 800a49c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a49e:	b111      	cbz	r1, 800a4a6 <_reclaim_reent+0x5e>
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 f887 	bl	800a5b4 <_free_r>
 800a4a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a4a8:	b111      	cbz	r1, 800a4b0 <_reclaim_reent+0x68>
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f882 	bl	800a5b4 <_free_r>
 800a4b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4b2:	b111      	cbz	r1, 800a4ba <_reclaim_reent+0x72>
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 f87d 	bl	800a5b4 <_free_r>
 800a4ba:	69a3      	ldr	r3, [r4, #24]
 800a4bc:	b1e3      	cbz	r3, 800a4f8 <_reclaim_reent+0xb0>
 800a4be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	4798      	blx	r3
 800a4c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4c6:	b1b9      	cbz	r1, 800a4f8 <_reclaim_reent+0xb0>
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4ce:	f7ff bfad 	b.w	800a42c <cleanup_glue>
 800a4d2:	5949      	ldr	r1, [r1, r5]
 800a4d4:	b941      	cbnz	r1, 800a4e8 <_reclaim_reent+0xa0>
 800a4d6:	3504      	adds	r5, #4
 800a4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4da:	2d80      	cmp	r5, #128	; 0x80
 800a4dc:	68d9      	ldr	r1, [r3, #12]
 800a4de:	d1f8      	bne.n	800a4d2 <_reclaim_reent+0x8a>
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 f867 	bl	800a5b4 <_free_r>
 800a4e6:	e7ba      	b.n	800a45e <_reclaim_reent+0x16>
 800a4e8:	680e      	ldr	r6, [r1, #0]
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 f862 	bl	800a5b4 <_free_r>
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	e7ef      	b.n	800a4d4 <_reclaim_reent+0x8c>
 800a4f4:	2500      	movs	r5, #0
 800a4f6:	e7ef      	b.n	800a4d8 <_reclaim_reent+0x90>
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20000010 	.word	0x20000010

0800a500 <_sbrk_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d06      	ldr	r5, [pc, #24]	; (800a51c <_sbrk_r+0x1c>)
 800a504:	2300      	movs	r3, #0
 800a506:	4604      	mov	r4, r0
 800a508:	4608      	mov	r0, r1
 800a50a:	602b      	str	r3, [r5, #0]
 800a50c:	f7f6 fd8e 	bl	800102c <_sbrk>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_sbrk_r+0x1a>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b103      	cbz	r3, 800a51a <_sbrk_r+0x1a>
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	20005f08 	.word	0x20005f08

0800a520 <_vasniprintf_r>:
 800a520:	b530      	push	{r4, r5, lr}
 800a522:	4615      	mov	r5, r2
 800a524:	b09b      	sub	sp, #108	; 0x6c
 800a526:	682c      	ldr	r4, [r5, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	b189      	cbz	r1, 800a550 <_vasniprintf_r+0x30>
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	bf12      	itee	ne
 800a530:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 800a534:	f44f 7322 	moveq.w	r3, #648	; 0x288
 800a538:	2100      	moveq	r1, #0
 800a53a:	2c00      	cmp	r4, #0
 800a53c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a540:	9100      	str	r1, [sp, #0]
 800a542:	9104      	str	r1, [sp, #16]
 800a544:	da08      	bge.n	800a558 <_vasniprintf_r+0x38>
 800a546:	238b      	movs	r3, #139	; 0x8b
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	2000      	movs	r0, #0
 800a54c:	b01b      	add	sp, #108	; 0x6c
 800a54e:	bd30      	pop	{r4, r5, pc}
 800a550:	f44f 7322 	mov.w	r3, #648	; 0x288
 800a554:	460c      	mov	r4, r1
 800a556:	e7f0      	b.n	800a53a <_vasniprintf_r+0x1a>
 800a558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a55c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a560:	4669      	mov	r1, sp
 800a562:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a564:	9402      	str	r4, [sp, #8]
 800a566:	9405      	str	r4, [sp, #20]
 800a568:	f000 f8cc 	bl	800a704 <_svfiprintf_r>
 800a56c:	1e03      	subs	r3, r0, #0
 800a56e:	bfa4      	itt	ge
 800a570:	602b      	strge	r3, [r5, #0]
 800a572:	9b00      	ldrge	r3, [sp, #0]
 800a574:	f04f 0000 	mov.w	r0, #0
 800a578:	bfa4      	itt	ge
 800a57a:	7018      	strbge	r0, [r3, #0]
 800a57c:	9804      	ldrge	r0, [sp, #16]
 800a57e:	e7e5      	b.n	800a54c <_vasniprintf_r+0x2c>

0800a580 <vasniprintf>:
 800a580:	b507      	push	{r0, r1, r2, lr}
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	4613      	mov	r3, r2
 800a586:	460a      	mov	r2, r1
 800a588:	4601      	mov	r1, r0
 800a58a:	4803      	ldr	r0, [pc, #12]	; (800a598 <vasniprintf+0x18>)
 800a58c:	6800      	ldr	r0, [r0, #0]
 800a58e:	f7ff ffc7 	bl	800a520 <_vasniprintf_r>
 800a592:	b003      	add	sp, #12
 800a594:	f85d fb04 	ldr.w	pc, [sp], #4
 800a598:	20000010 	.word	0x20000010

0800a59c <__malloc_lock>:
 800a59c:	4801      	ldr	r0, [pc, #4]	; (800a5a4 <__malloc_lock+0x8>)
 800a59e:	f7ff be99 	b.w	800a2d4 <__retarget_lock_acquire_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	20005efc 	.word	0x20005efc

0800a5a8 <__malloc_unlock>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__malloc_unlock+0x8>)
 800a5aa:	f7ff be94 	b.w	800a2d6 <__retarget_lock_release_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20005efc 	.word	0x20005efc

0800a5b4 <_free_r>:
 800a5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5b6:	2900      	cmp	r1, #0
 800a5b8:	d044      	beq.n	800a644 <_free_r+0x90>
 800a5ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5be:	9001      	str	r0, [sp, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a5c6:	bfb8      	it	lt
 800a5c8:	18e4      	addlt	r4, r4, r3
 800a5ca:	f7ff ffe7 	bl	800a59c <__malloc_lock>
 800a5ce:	4a1e      	ldr	r2, [pc, #120]	; (800a648 <_free_r+0x94>)
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	6813      	ldr	r3, [r2, #0]
 800a5d4:	b933      	cbnz	r3, 800a5e4 <_free_r+0x30>
 800a5d6:	6063      	str	r3, [r4, #4]
 800a5d8:	6014      	str	r4, [r2, #0]
 800a5da:	b003      	add	sp, #12
 800a5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5e0:	f7ff bfe2 	b.w	800a5a8 <__malloc_unlock>
 800a5e4:	42a3      	cmp	r3, r4
 800a5e6:	d908      	bls.n	800a5fa <_free_r+0x46>
 800a5e8:	6825      	ldr	r5, [r4, #0]
 800a5ea:	1961      	adds	r1, r4, r5
 800a5ec:	428b      	cmp	r3, r1
 800a5ee:	bf01      	itttt	eq
 800a5f0:	6819      	ldreq	r1, [r3, #0]
 800a5f2:	685b      	ldreq	r3, [r3, #4]
 800a5f4:	1949      	addeq	r1, r1, r5
 800a5f6:	6021      	streq	r1, [r4, #0]
 800a5f8:	e7ed      	b.n	800a5d6 <_free_r+0x22>
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	b10b      	cbz	r3, 800a604 <_free_r+0x50>
 800a600:	42a3      	cmp	r3, r4
 800a602:	d9fa      	bls.n	800a5fa <_free_r+0x46>
 800a604:	6811      	ldr	r1, [r2, #0]
 800a606:	1855      	adds	r5, r2, r1
 800a608:	42a5      	cmp	r5, r4
 800a60a:	d10b      	bne.n	800a624 <_free_r+0x70>
 800a60c:	6824      	ldr	r4, [r4, #0]
 800a60e:	4421      	add	r1, r4
 800a610:	1854      	adds	r4, r2, r1
 800a612:	42a3      	cmp	r3, r4
 800a614:	6011      	str	r1, [r2, #0]
 800a616:	d1e0      	bne.n	800a5da <_free_r+0x26>
 800a618:	681c      	ldr	r4, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	6053      	str	r3, [r2, #4]
 800a61e:	4421      	add	r1, r4
 800a620:	6011      	str	r1, [r2, #0]
 800a622:	e7da      	b.n	800a5da <_free_r+0x26>
 800a624:	d902      	bls.n	800a62c <_free_r+0x78>
 800a626:	230c      	movs	r3, #12
 800a628:	6003      	str	r3, [r0, #0]
 800a62a:	e7d6      	b.n	800a5da <_free_r+0x26>
 800a62c:	6825      	ldr	r5, [r4, #0]
 800a62e:	1961      	adds	r1, r4, r5
 800a630:	428b      	cmp	r3, r1
 800a632:	bf04      	itt	eq
 800a634:	6819      	ldreq	r1, [r3, #0]
 800a636:	685b      	ldreq	r3, [r3, #4]
 800a638:	6063      	str	r3, [r4, #4]
 800a63a:	bf04      	itt	eq
 800a63c:	1949      	addeq	r1, r1, r5
 800a63e:	6021      	streq	r1, [r4, #0]
 800a640:	6054      	str	r4, [r2, #4]
 800a642:	e7ca      	b.n	800a5da <_free_r+0x26>
 800a644:	b003      	add	sp, #12
 800a646:	bd30      	pop	{r4, r5, pc}
 800a648:	20005f00 	.word	0x20005f00

0800a64c <__ssputs_r>:
 800a64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a650:	688e      	ldr	r6, [r1, #8]
 800a652:	429e      	cmp	r6, r3
 800a654:	4682      	mov	sl, r0
 800a656:	460c      	mov	r4, r1
 800a658:	4690      	mov	r8, r2
 800a65a:	461f      	mov	r7, r3
 800a65c:	d838      	bhi.n	800a6d0 <__ssputs_r+0x84>
 800a65e:	898a      	ldrh	r2, [r1, #12]
 800a660:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a664:	d032      	beq.n	800a6cc <__ssputs_r+0x80>
 800a666:	6825      	ldr	r5, [r4, #0]
 800a668:	6909      	ldr	r1, [r1, #16]
 800a66a:	eba5 0901 	sub.w	r9, r5, r1
 800a66e:	6965      	ldr	r5, [r4, #20]
 800a670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a678:	3301      	adds	r3, #1
 800a67a:	444b      	add	r3, r9
 800a67c:	106d      	asrs	r5, r5, #1
 800a67e:	429d      	cmp	r5, r3
 800a680:	bf38      	it	cc
 800a682:	461d      	movcc	r5, r3
 800a684:	0553      	lsls	r3, r2, #21
 800a686:	d531      	bpl.n	800a6ec <__ssputs_r+0xa0>
 800a688:	4629      	mov	r1, r5
 800a68a:	f7ff fe5b 	bl	800a344 <_malloc_r>
 800a68e:	4606      	mov	r6, r0
 800a690:	b950      	cbnz	r0, 800a6a8 <__ssputs_r+0x5c>
 800a692:	230c      	movs	r3, #12
 800a694:	f8ca 3000 	str.w	r3, [sl]
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69e:	81a3      	strh	r3, [r4, #12]
 800a6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a8:	6921      	ldr	r1, [r4, #16]
 800a6aa:	464a      	mov	r2, r9
 800a6ac:	f7ff fe14 	bl	800a2d8 <memcpy>
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	6126      	str	r6, [r4, #16]
 800a6be:	6165      	str	r5, [r4, #20]
 800a6c0:	444e      	add	r6, r9
 800a6c2:	eba5 0509 	sub.w	r5, r5, r9
 800a6c6:	6026      	str	r6, [r4, #0]
 800a6c8:	60a5      	str	r5, [r4, #8]
 800a6ca:	463e      	mov	r6, r7
 800a6cc:	42be      	cmp	r6, r7
 800a6ce:	d900      	bls.n	800a6d2 <__ssputs_r+0x86>
 800a6d0:	463e      	mov	r6, r7
 800a6d2:	6820      	ldr	r0, [r4, #0]
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	4641      	mov	r1, r8
 800a6d8:	f000 faa8 	bl	800ac2c <memmove>
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	1b9b      	subs	r3, r3, r6
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	4433      	add	r3, r6
 800a6e6:	6023      	str	r3, [r4, #0]
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	e7db      	b.n	800a6a4 <__ssputs_r+0x58>
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	f000 fab7 	bl	800ac60 <_realloc_r>
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1e1      	bne.n	800a6bc <__ssputs_r+0x70>
 800a6f8:	6921      	ldr	r1, [r4, #16]
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	f7ff ff5a 	bl	800a5b4 <_free_r>
 800a700:	e7c7      	b.n	800a692 <__ssputs_r+0x46>
	...

0800a704 <_svfiprintf_r>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	4698      	mov	r8, r3
 800a70a:	898b      	ldrh	r3, [r1, #12]
 800a70c:	061b      	lsls	r3, r3, #24
 800a70e:	b09d      	sub	sp, #116	; 0x74
 800a710:	4607      	mov	r7, r0
 800a712:	460d      	mov	r5, r1
 800a714:	4614      	mov	r4, r2
 800a716:	d50e      	bpl.n	800a736 <_svfiprintf_r+0x32>
 800a718:	690b      	ldr	r3, [r1, #16]
 800a71a:	b963      	cbnz	r3, 800a736 <_svfiprintf_r+0x32>
 800a71c:	2140      	movs	r1, #64	; 0x40
 800a71e:	f7ff fe11 	bl	800a344 <_malloc_r>
 800a722:	6028      	str	r0, [r5, #0]
 800a724:	6128      	str	r0, [r5, #16]
 800a726:	b920      	cbnz	r0, 800a732 <_svfiprintf_r+0x2e>
 800a728:	230c      	movs	r3, #12
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	e0d1      	b.n	800a8d6 <_svfiprintf_r+0x1d2>
 800a732:	2340      	movs	r3, #64	; 0x40
 800a734:	616b      	str	r3, [r5, #20]
 800a736:	2300      	movs	r3, #0
 800a738:	9309      	str	r3, [sp, #36]	; 0x24
 800a73a:	2320      	movs	r3, #32
 800a73c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a740:	f8cd 800c 	str.w	r8, [sp, #12]
 800a744:	2330      	movs	r3, #48	; 0x30
 800a746:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8f0 <_svfiprintf_r+0x1ec>
 800a74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a74e:	f04f 0901 	mov.w	r9, #1
 800a752:	4623      	mov	r3, r4
 800a754:	469a      	mov	sl, r3
 800a756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75a:	b10a      	cbz	r2, 800a760 <_svfiprintf_r+0x5c>
 800a75c:	2a25      	cmp	r2, #37	; 0x25
 800a75e:	d1f9      	bne.n	800a754 <_svfiprintf_r+0x50>
 800a760:	ebba 0b04 	subs.w	fp, sl, r4
 800a764:	d00b      	beq.n	800a77e <_svfiprintf_r+0x7a>
 800a766:	465b      	mov	r3, fp
 800a768:	4622      	mov	r2, r4
 800a76a:	4629      	mov	r1, r5
 800a76c:	4638      	mov	r0, r7
 800a76e:	f7ff ff6d 	bl	800a64c <__ssputs_r>
 800a772:	3001      	adds	r0, #1
 800a774:	f000 80aa 	beq.w	800a8cc <_svfiprintf_r+0x1c8>
 800a778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77a:	445a      	add	r2, fp
 800a77c:	9209      	str	r2, [sp, #36]	; 0x24
 800a77e:	f89a 3000 	ldrb.w	r3, [sl]
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 80a2 	beq.w	800a8cc <_svfiprintf_r+0x1c8>
 800a788:	2300      	movs	r3, #0
 800a78a:	f04f 32ff 	mov.w	r2, #4294967295
 800a78e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a792:	f10a 0a01 	add.w	sl, sl, #1
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	9307      	str	r3, [sp, #28]
 800a79a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a79e:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a0:	4654      	mov	r4, sl
 800a7a2:	2205      	movs	r2, #5
 800a7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a8:	4851      	ldr	r0, [pc, #324]	; (800a8f0 <_svfiprintf_r+0x1ec>)
 800a7aa:	f7f5 fd11 	bl	80001d0 <memchr>
 800a7ae:	9a04      	ldr	r2, [sp, #16]
 800a7b0:	b9d8      	cbnz	r0, 800a7ea <_svfiprintf_r+0xe6>
 800a7b2:	06d0      	lsls	r0, r2, #27
 800a7b4:	bf44      	itt	mi
 800a7b6:	2320      	movmi	r3, #32
 800a7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7bc:	0711      	lsls	r1, r2, #28
 800a7be:	bf44      	itt	mi
 800a7c0:	232b      	movmi	r3, #43	; 0x2b
 800a7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a7cc:	d015      	beq.n	800a7fa <_svfiprintf_r+0xf6>
 800a7ce:	9a07      	ldr	r2, [sp, #28]
 800a7d0:	4654      	mov	r4, sl
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f04f 0c0a 	mov.w	ip, #10
 800a7d8:	4621      	mov	r1, r4
 800a7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7de:	3b30      	subs	r3, #48	; 0x30
 800a7e0:	2b09      	cmp	r3, #9
 800a7e2:	d94e      	bls.n	800a882 <_svfiprintf_r+0x17e>
 800a7e4:	b1b0      	cbz	r0, 800a814 <_svfiprintf_r+0x110>
 800a7e6:	9207      	str	r2, [sp, #28]
 800a7e8:	e014      	b.n	800a814 <_svfiprintf_r+0x110>
 800a7ea:	eba0 0308 	sub.w	r3, r0, r8
 800a7ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	46a2      	mov	sl, r4
 800a7f8:	e7d2      	b.n	800a7a0 <_svfiprintf_r+0x9c>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	1d19      	adds	r1, r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	9103      	str	r1, [sp, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfbb      	ittet	lt
 800a806:	425b      	neglt	r3, r3
 800a808:	f042 0202 	orrlt.w	r2, r2, #2
 800a80c:	9307      	strge	r3, [sp, #28]
 800a80e:	9307      	strlt	r3, [sp, #28]
 800a810:	bfb8      	it	lt
 800a812:	9204      	strlt	r2, [sp, #16]
 800a814:	7823      	ldrb	r3, [r4, #0]
 800a816:	2b2e      	cmp	r3, #46	; 0x2e
 800a818:	d10c      	bne.n	800a834 <_svfiprintf_r+0x130>
 800a81a:	7863      	ldrb	r3, [r4, #1]
 800a81c:	2b2a      	cmp	r3, #42	; 0x2a
 800a81e:	d135      	bne.n	800a88c <_svfiprintf_r+0x188>
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	1d1a      	adds	r2, r3, #4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	9203      	str	r2, [sp, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bfb8      	it	lt
 800a82c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a830:	3402      	adds	r4, #2
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a900 <_svfiprintf_r+0x1fc>
 800a838:	7821      	ldrb	r1, [r4, #0]
 800a83a:	2203      	movs	r2, #3
 800a83c:	4650      	mov	r0, sl
 800a83e:	f7f5 fcc7 	bl	80001d0 <memchr>
 800a842:	b140      	cbz	r0, 800a856 <_svfiprintf_r+0x152>
 800a844:	2340      	movs	r3, #64	; 0x40
 800a846:	eba0 000a 	sub.w	r0, r0, sl
 800a84a:	fa03 f000 	lsl.w	r0, r3, r0
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	4303      	orrs	r3, r0
 800a852:	3401      	adds	r4, #1
 800a854:	9304      	str	r3, [sp, #16]
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	4826      	ldr	r0, [pc, #152]	; (800a8f4 <_svfiprintf_r+0x1f0>)
 800a85c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a860:	2206      	movs	r2, #6
 800a862:	f7f5 fcb5 	bl	80001d0 <memchr>
 800a866:	2800      	cmp	r0, #0
 800a868:	d038      	beq.n	800a8dc <_svfiprintf_r+0x1d8>
 800a86a:	4b23      	ldr	r3, [pc, #140]	; (800a8f8 <_svfiprintf_r+0x1f4>)
 800a86c:	bb1b      	cbnz	r3, 800a8b6 <_svfiprintf_r+0x1b2>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	3307      	adds	r3, #7
 800a872:	f023 0307 	bic.w	r3, r3, #7
 800a876:	3308      	adds	r3, #8
 800a878:	9303      	str	r3, [sp, #12]
 800a87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87c:	4433      	add	r3, r6
 800a87e:	9309      	str	r3, [sp, #36]	; 0x24
 800a880:	e767      	b.n	800a752 <_svfiprintf_r+0x4e>
 800a882:	fb0c 3202 	mla	r2, ip, r2, r3
 800a886:	460c      	mov	r4, r1
 800a888:	2001      	movs	r0, #1
 800a88a:	e7a5      	b.n	800a7d8 <_svfiprintf_r+0xd4>
 800a88c:	2300      	movs	r3, #0
 800a88e:	3401      	adds	r4, #1
 800a890:	9305      	str	r3, [sp, #20]
 800a892:	4619      	mov	r1, r3
 800a894:	f04f 0c0a 	mov.w	ip, #10
 800a898:	4620      	mov	r0, r4
 800a89a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89e:	3a30      	subs	r2, #48	; 0x30
 800a8a0:	2a09      	cmp	r2, #9
 800a8a2:	d903      	bls.n	800a8ac <_svfiprintf_r+0x1a8>
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0c5      	beq.n	800a834 <_svfiprintf_r+0x130>
 800a8a8:	9105      	str	r1, [sp, #20]
 800a8aa:	e7c3      	b.n	800a834 <_svfiprintf_r+0x130>
 800a8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e7f0      	b.n	800a898 <_svfiprintf_r+0x194>
 800a8b6:	ab03      	add	r3, sp, #12
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <_svfiprintf_r+0x1f8>)
 800a8be:	a904      	add	r1, sp, #16
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	f3af 8000 	nop.w
 800a8c6:	1c42      	adds	r2, r0, #1
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	d1d6      	bne.n	800a87a <_svfiprintf_r+0x176>
 800a8cc:	89ab      	ldrh	r3, [r5, #12]
 800a8ce:	065b      	lsls	r3, r3, #25
 800a8d0:	f53f af2c 	bmi.w	800a72c <_svfiprintf_r+0x28>
 800a8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d6:	b01d      	add	sp, #116	; 0x74
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	ab03      	add	r3, sp, #12
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <_svfiprintf_r+0x1f8>)
 800a8e4:	a904      	add	r1, sp, #16
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f000 f87a 	bl	800a9e0 <_printf_i>
 800a8ec:	e7eb      	b.n	800a8c6 <_svfiprintf_r+0x1c2>
 800a8ee:	bf00      	nop
 800a8f0:	0800b4c4 	.word	0x0800b4c4
 800a8f4:	0800b4ce 	.word	0x0800b4ce
 800a8f8:	00000000 	.word	0x00000000
 800a8fc:	0800a64d 	.word	0x0800a64d
 800a900:	0800b4ca 	.word	0x0800b4ca

0800a904 <_printf_common>:
 800a904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a908:	4616      	mov	r6, r2
 800a90a:	4699      	mov	r9, r3
 800a90c:	688a      	ldr	r2, [r1, #8]
 800a90e:	690b      	ldr	r3, [r1, #16]
 800a910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a914:	4293      	cmp	r3, r2
 800a916:	bfb8      	it	lt
 800a918:	4613      	movlt	r3, r2
 800a91a:	6033      	str	r3, [r6, #0]
 800a91c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a920:	4607      	mov	r7, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b10a      	cbz	r2, 800a92a <_printf_common+0x26>
 800a926:	3301      	adds	r3, #1
 800a928:	6033      	str	r3, [r6, #0]
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	0699      	lsls	r1, r3, #26
 800a92e:	bf42      	ittt	mi
 800a930:	6833      	ldrmi	r3, [r6, #0]
 800a932:	3302      	addmi	r3, #2
 800a934:	6033      	strmi	r3, [r6, #0]
 800a936:	6825      	ldr	r5, [r4, #0]
 800a938:	f015 0506 	ands.w	r5, r5, #6
 800a93c:	d106      	bne.n	800a94c <_printf_common+0x48>
 800a93e:	f104 0a19 	add.w	sl, r4, #25
 800a942:	68e3      	ldr	r3, [r4, #12]
 800a944:	6832      	ldr	r2, [r6, #0]
 800a946:	1a9b      	subs	r3, r3, r2
 800a948:	42ab      	cmp	r3, r5
 800a94a:	dc26      	bgt.n	800a99a <_printf_common+0x96>
 800a94c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a950:	1e13      	subs	r3, r2, #0
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	bf18      	it	ne
 800a956:	2301      	movne	r3, #1
 800a958:	0692      	lsls	r2, r2, #26
 800a95a:	d42b      	bmi.n	800a9b4 <_printf_common+0xb0>
 800a95c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a960:	4649      	mov	r1, r9
 800a962:	4638      	mov	r0, r7
 800a964:	47c0      	blx	r8
 800a966:	3001      	adds	r0, #1
 800a968:	d01e      	beq.n	800a9a8 <_printf_common+0xa4>
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	68e5      	ldr	r5, [r4, #12]
 800a96e:	6832      	ldr	r2, [r6, #0]
 800a970:	f003 0306 	and.w	r3, r3, #6
 800a974:	2b04      	cmp	r3, #4
 800a976:	bf08      	it	eq
 800a978:	1aad      	subeq	r5, r5, r2
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	6922      	ldr	r2, [r4, #16]
 800a97e:	bf0c      	ite	eq
 800a980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a984:	2500      	movne	r5, #0
 800a986:	4293      	cmp	r3, r2
 800a988:	bfc4      	itt	gt
 800a98a:	1a9b      	subgt	r3, r3, r2
 800a98c:	18ed      	addgt	r5, r5, r3
 800a98e:	2600      	movs	r6, #0
 800a990:	341a      	adds	r4, #26
 800a992:	42b5      	cmp	r5, r6
 800a994:	d11a      	bne.n	800a9cc <_printf_common+0xc8>
 800a996:	2000      	movs	r0, #0
 800a998:	e008      	b.n	800a9ac <_printf_common+0xa8>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4652      	mov	r2, sl
 800a99e:	4649      	mov	r1, r9
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	47c0      	blx	r8
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d103      	bne.n	800a9b0 <_printf_common+0xac>
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	e7c6      	b.n	800a942 <_printf_common+0x3e>
 800a9b4:	18e1      	adds	r1, r4, r3
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	2030      	movs	r0, #48	; 0x30
 800a9ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9be:	4422      	add	r2, r4
 800a9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9c8:	3302      	adds	r3, #2
 800a9ca:	e7c7      	b.n	800a95c <_printf_common+0x58>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	47c0      	blx	r8
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d0e6      	beq.n	800a9a8 <_printf_common+0xa4>
 800a9da:	3601      	adds	r6, #1
 800a9dc:	e7d9      	b.n	800a992 <_printf_common+0x8e>
	...

0800a9e0 <_printf_i>:
 800a9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	7e0f      	ldrb	r7, [r1, #24]
 800a9e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9e8:	2f78      	cmp	r7, #120	; 0x78
 800a9ea:	4691      	mov	r9, r2
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	469a      	mov	sl, r3
 800a9f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9f6:	d807      	bhi.n	800aa08 <_printf_i+0x28>
 800a9f8:	2f62      	cmp	r7, #98	; 0x62
 800a9fa:	d80a      	bhi.n	800aa12 <_printf_i+0x32>
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	f000 80d8 	beq.w	800abb2 <_printf_i+0x1d2>
 800aa02:	2f58      	cmp	r7, #88	; 0x58
 800aa04:	f000 80a3 	beq.w	800ab4e <_printf_i+0x16e>
 800aa08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa10:	e03a      	b.n	800aa88 <_printf_i+0xa8>
 800aa12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa16:	2b15      	cmp	r3, #21
 800aa18:	d8f6      	bhi.n	800aa08 <_printf_i+0x28>
 800aa1a:	a101      	add	r1, pc, #4	; (adr r1, 800aa20 <_printf_i+0x40>)
 800aa1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa20:	0800aa79 	.word	0x0800aa79
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa09 	.word	0x0800aa09
 800aa2c:	0800aa09 	.word	0x0800aa09
 800aa30:	0800aa09 	.word	0x0800aa09
 800aa34:	0800aa09 	.word	0x0800aa09
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa09 	.word	0x0800aa09
 800aa40:	0800aa09 	.word	0x0800aa09
 800aa44:	0800aa09 	.word	0x0800aa09
 800aa48:	0800aa09 	.word	0x0800aa09
 800aa4c:	0800ab99 	.word	0x0800ab99
 800aa50:	0800aabd 	.word	0x0800aabd
 800aa54:	0800ab7b 	.word	0x0800ab7b
 800aa58:	0800aa09 	.word	0x0800aa09
 800aa5c:	0800aa09 	.word	0x0800aa09
 800aa60:	0800abbb 	.word	0x0800abbb
 800aa64:	0800aa09 	.word	0x0800aa09
 800aa68:	0800aabd 	.word	0x0800aabd
 800aa6c:	0800aa09 	.word	0x0800aa09
 800aa70:	0800aa09 	.word	0x0800aa09
 800aa74:	0800ab83 	.word	0x0800ab83
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	602a      	str	r2, [r5, #0]
 800aa80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e0a3      	b.n	800abd4 <_printf_i+0x1f4>
 800aa8c:	6820      	ldr	r0, [r4, #0]
 800aa8e:	6829      	ldr	r1, [r5, #0]
 800aa90:	0606      	lsls	r6, r0, #24
 800aa92:	f101 0304 	add.w	r3, r1, #4
 800aa96:	d50a      	bpl.n	800aaae <_printf_i+0xce>
 800aa98:	680e      	ldr	r6, [r1, #0]
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	da03      	bge.n	800aaa8 <_printf_i+0xc8>
 800aaa0:	232d      	movs	r3, #45	; 0x2d
 800aaa2:	4276      	negs	r6, r6
 800aaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa8:	485e      	ldr	r0, [pc, #376]	; (800ac24 <_printf_i+0x244>)
 800aaaa:	230a      	movs	r3, #10
 800aaac:	e019      	b.n	800aae2 <_printf_i+0x102>
 800aaae:	680e      	ldr	r6, [r1, #0]
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aab6:	bf18      	it	ne
 800aab8:	b236      	sxthne	r6, r6
 800aaba:	e7ef      	b.n	800aa9c <_printf_i+0xbc>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	6820      	ldr	r0, [r4, #0]
 800aac0:	1d19      	adds	r1, r3, #4
 800aac2:	6029      	str	r1, [r5, #0]
 800aac4:	0601      	lsls	r1, r0, #24
 800aac6:	d501      	bpl.n	800aacc <_printf_i+0xec>
 800aac8:	681e      	ldr	r6, [r3, #0]
 800aaca:	e002      	b.n	800aad2 <_printf_i+0xf2>
 800aacc:	0646      	lsls	r6, r0, #25
 800aace:	d5fb      	bpl.n	800aac8 <_printf_i+0xe8>
 800aad0:	881e      	ldrh	r6, [r3, #0]
 800aad2:	4854      	ldr	r0, [pc, #336]	; (800ac24 <_printf_i+0x244>)
 800aad4:	2f6f      	cmp	r7, #111	; 0x6f
 800aad6:	bf0c      	ite	eq
 800aad8:	2308      	moveq	r3, #8
 800aada:	230a      	movne	r3, #10
 800aadc:	2100      	movs	r1, #0
 800aade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aae2:	6865      	ldr	r5, [r4, #4]
 800aae4:	60a5      	str	r5, [r4, #8]
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	bfa2      	ittt	ge
 800aaea:	6821      	ldrge	r1, [r4, #0]
 800aaec:	f021 0104 	bicge.w	r1, r1, #4
 800aaf0:	6021      	strge	r1, [r4, #0]
 800aaf2:	b90e      	cbnz	r6, 800aaf8 <_printf_i+0x118>
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	d04d      	beq.n	800ab94 <_printf_i+0x1b4>
 800aaf8:	4615      	mov	r5, r2
 800aafa:	fbb6 f1f3 	udiv	r1, r6, r3
 800aafe:	fb03 6711 	mls	r7, r3, r1, r6
 800ab02:	5dc7      	ldrb	r7, [r0, r7]
 800ab04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab08:	4637      	mov	r7, r6
 800ab0a:	42bb      	cmp	r3, r7
 800ab0c:	460e      	mov	r6, r1
 800ab0e:	d9f4      	bls.n	800aafa <_printf_i+0x11a>
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d10b      	bne.n	800ab2c <_printf_i+0x14c>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	07de      	lsls	r6, r3, #31
 800ab18:	d508      	bpl.n	800ab2c <_printf_i+0x14c>
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	6861      	ldr	r1, [r4, #4]
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	bfde      	ittt	le
 800ab22:	2330      	movle	r3, #48	; 0x30
 800ab24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab28:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab2c:	1b52      	subs	r2, r2, r5
 800ab2e:	6122      	str	r2, [r4, #16]
 800ab30:	f8cd a000 	str.w	sl, [sp]
 800ab34:	464b      	mov	r3, r9
 800ab36:	aa03      	add	r2, sp, #12
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	f7ff fee2 	bl	800a904 <_printf_common>
 800ab40:	3001      	adds	r0, #1
 800ab42:	d14c      	bne.n	800abde <_printf_i+0x1fe>
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295
 800ab48:	b004      	add	sp, #16
 800ab4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4e:	4835      	ldr	r0, [pc, #212]	; (800ac24 <_printf_i+0x244>)
 800ab50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab54:	6829      	ldr	r1, [r5, #0]
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab5c:	6029      	str	r1, [r5, #0]
 800ab5e:	061d      	lsls	r5, r3, #24
 800ab60:	d514      	bpl.n	800ab8c <_printf_i+0x1ac>
 800ab62:	07df      	lsls	r7, r3, #31
 800ab64:	bf44      	itt	mi
 800ab66:	f043 0320 	orrmi.w	r3, r3, #32
 800ab6a:	6023      	strmi	r3, [r4, #0]
 800ab6c:	b91e      	cbnz	r6, 800ab76 <_printf_i+0x196>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f023 0320 	bic.w	r3, r3, #32
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	2310      	movs	r3, #16
 800ab78:	e7b0      	b.n	800aadc <_printf_i+0xfc>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	f043 0320 	orr.w	r3, r3, #32
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	2378      	movs	r3, #120	; 0x78
 800ab84:	4828      	ldr	r0, [pc, #160]	; (800ac28 <_printf_i+0x248>)
 800ab86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab8a:	e7e3      	b.n	800ab54 <_printf_i+0x174>
 800ab8c:	0659      	lsls	r1, r3, #25
 800ab8e:	bf48      	it	mi
 800ab90:	b2b6      	uxthmi	r6, r6
 800ab92:	e7e6      	b.n	800ab62 <_printf_i+0x182>
 800ab94:	4615      	mov	r5, r2
 800ab96:	e7bb      	b.n	800ab10 <_printf_i+0x130>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	6826      	ldr	r6, [r4, #0]
 800ab9c:	6961      	ldr	r1, [r4, #20]
 800ab9e:	1d18      	adds	r0, r3, #4
 800aba0:	6028      	str	r0, [r5, #0]
 800aba2:	0635      	lsls	r5, r6, #24
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	d501      	bpl.n	800abac <_printf_i+0x1cc>
 800aba8:	6019      	str	r1, [r3, #0]
 800abaa:	e002      	b.n	800abb2 <_printf_i+0x1d2>
 800abac:	0670      	lsls	r0, r6, #25
 800abae:	d5fb      	bpl.n	800aba8 <_printf_i+0x1c8>
 800abb0:	8019      	strh	r1, [r3, #0]
 800abb2:	2300      	movs	r3, #0
 800abb4:	6123      	str	r3, [r4, #16]
 800abb6:	4615      	mov	r5, r2
 800abb8:	e7ba      	b.n	800ab30 <_printf_i+0x150>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	1d1a      	adds	r2, r3, #4
 800abbe:	602a      	str	r2, [r5, #0]
 800abc0:	681d      	ldr	r5, [r3, #0]
 800abc2:	6862      	ldr	r2, [r4, #4]
 800abc4:	2100      	movs	r1, #0
 800abc6:	4628      	mov	r0, r5
 800abc8:	f7f5 fb02 	bl	80001d0 <memchr>
 800abcc:	b108      	cbz	r0, 800abd2 <_printf_i+0x1f2>
 800abce:	1b40      	subs	r0, r0, r5
 800abd0:	6060      	str	r0, [r4, #4]
 800abd2:	6863      	ldr	r3, [r4, #4]
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	2300      	movs	r3, #0
 800abd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abdc:	e7a8      	b.n	800ab30 <_printf_i+0x150>
 800abde:	6923      	ldr	r3, [r4, #16]
 800abe0:	462a      	mov	r2, r5
 800abe2:	4649      	mov	r1, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	47d0      	blx	sl
 800abe8:	3001      	adds	r0, #1
 800abea:	d0ab      	beq.n	800ab44 <_printf_i+0x164>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	079b      	lsls	r3, r3, #30
 800abf0:	d413      	bmi.n	800ac1a <_printf_i+0x23a>
 800abf2:	68e0      	ldr	r0, [r4, #12]
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	4298      	cmp	r0, r3
 800abf8:	bfb8      	it	lt
 800abfa:	4618      	movlt	r0, r3
 800abfc:	e7a4      	b.n	800ab48 <_printf_i+0x168>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4632      	mov	r2, r6
 800ac02:	4649      	mov	r1, r9
 800ac04:	4640      	mov	r0, r8
 800ac06:	47d0      	blx	sl
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d09b      	beq.n	800ab44 <_printf_i+0x164>
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	68e3      	ldr	r3, [r4, #12]
 800ac10:	9903      	ldr	r1, [sp, #12]
 800ac12:	1a5b      	subs	r3, r3, r1
 800ac14:	42ab      	cmp	r3, r5
 800ac16:	dcf2      	bgt.n	800abfe <_printf_i+0x21e>
 800ac18:	e7eb      	b.n	800abf2 <_printf_i+0x212>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	f104 0619 	add.w	r6, r4, #25
 800ac20:	e7f5      	b.n	800ac0e <_printf_i+0x22e>
 800ac22:	bf00      	nop
 800ac24:	0800b4d5 	.word	0x0800b4d5
 800ac28:	0800b4e6 	.word	0x0800b4e6

0800ac2c <memmove>:
 800ac2c:	4288      	cmp	r0, r1
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	eb01 0402 	add.w	r4, r1, r2
 800ac34:	d902      	bls.n	800ac3c <memmove+0x10>
 800ac36:	4284      	cmp	r4, r0
 800ac38:	4623      	mov	r3, r4
 800ac3a:	d807      	bhi.n	800ac4c <memmove+0x20>
 800ac3c:	1e43      	subs	r3, r0, #1
 800ac3e:	42a1      	cmp	r1, r4
 800ac40:	d008      	beq.n	800ac54 <memmove+0x28>
 800ac42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac4a:	e7f8      	b.n	800ac3e <memmove+0x12>
 800ac4c:	4402      	add	r2, r0
 800ac4e:	4601      	mov	r1, r0
 800ac50:	428a      	cmp	r2, r1
 800ac52:	d100      	bne.n	800ac56 <memmove+0x2a>
 800ac54:	bd10      	pop	{r4, pc}
 800ac56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac5e:	e7f7      	b.n	800ac50 <memmove+0x24>

0800ac60 <_realloc_r>:
 800ac60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac64:	4680      	mov	r8, r0
 800ac66:	4614      	mov	r4, r2
 800ac68:	460e      	mov	r6, r1
 800ac6a:	b921      	cbnz	r1, 800ac76 <_realloc_r+0x16>
 800ac6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	4611      	mov	r1, r2
 800ac72:	f7ff bb67 	b.w	800a344 <_malloc_r>
 800ac76:	b92a      	cbnz	r2, 800ac84 <_realloc_r+0x24>
 800ac78:	f7ff fc9c 	bl	800a5b4 <_free_r>
 800ac7c:	4625      	mov	r5, r4
 800ac7e:	4628      	mov	r0, r5
 800ac80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac84:	f000 f81b 	bl	800acbe <_malloc_usable_size_r>
 800ac88:	4284      	cmp	r4, r0
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	d802      	bhi.n	800ac94 <_realloc_r+0x34>
 800ac8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac92:	d812      	bhi.n	800acba <_realloc_r+0x5a>
 800ac94:	4621      	mov	r1, r4
 800ac96:	4640      	mov	r0, r8
 800ac98:	f7ff fb54 	bl	800a344 <_malloc_r>
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d0ed      	beq.n	800ac7e <_realloc_r+0x1e>
 800aca2:	42bc      	cmp	r4, r7
 800aca4:	4622      	mov	r2, r4
 800aca6:	4631      	mov	r1, r6
 800aca8:	bf28      	it	cs
 800acaa:	463a      	movcs	r2, r7
 800acac:	f7ff fb14 	bl	800a2d8 <memcpy>
 800acb0:	4631      	mov	r1, r6
 800acb2:	4640      	mov	r0, r8
 800acb4:	f7ff fc7e 	bl	800a5b4 <_free_r>
 800acb8:	e7e1      	b.n	800ac7e <_realloc_r+0x1e>
 800acba:	4635      	mov	r5, r6
 800acbc:	e7df      	b.n	800ac7e <_realloc_r+0x1e>

0800acbe <_malloc_usable_size_r>:
 800acbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc2:	1f18      	subs	r0, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	bfbc      	itt	lt
 800acc8:	580b      	ldrlt	r3, [r1, r0]
 800acca:	18c0      	addlt	r0, r0, r3
 800accc:	4770      	bx	lr
	...

0800acd0 <_init>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr

0800acdc <_fini>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr
